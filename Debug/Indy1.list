
Indy1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a88  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08006c48  08006c48  00016c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007220  08007220  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007228  08007228  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800722c  0800722c  0001722c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000070  080072a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  080072a0  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f195  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e6f  00000000  00000000  0002f235  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d70  00000000  00000000  000310a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c78  00000000  00000000  00031e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030358  00000000  00000000  00032a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad78  00000000  00000000  00062de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00121f18  00000000  00000000  0006db60  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018fa78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a3c  00000000  00000000  0018faf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006c30 	.word	0x08006c30

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08006c30 	.word	0x08006c30

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d008      	beq.n	80005d0 <NRF24_csn+0x20>
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <NRF24_csn+0x38>)
 80005c0:	6818      	ldr	r0, [r3, #0]
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <NRF24_csn+0x3c>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	f001 fde1 	bl	8002190 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80005ce:	e007      	b.n	80005e0 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <NRF24_csn+0x38>)
 80005d2:	6818      	ldr	r0, [r3, #0]
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <NRF24_csn+0x3c>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	2200      	movs	r2, #0
 80005da:	4619      	mov	r1, r3
 80005dc:	f001 fdd8 	bl	8002190 <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000090 	.word	0x20000090
 80005ec:	20000094 	.word	0x20000094

080005f0 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d008      	beq.n	8000610 <NRF24_ce+0x20>
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <NRF24_ce+0x38>)
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <NRF24_ce+0x3c>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	2201      	movs	r2, #1
 8000608:	4619      	mov	r1, r3
 800060a:	f001 fdc1 	bl	8002190 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800060e:	e007      	b.n	8000620 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <NRF24_ce+0x38>)
 8000612:	6818      	ldr	r0, [r3, #0]
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <NRF24_ce+0x3c>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	2200      	movs	r2, #0
 800061a:	4619      	mov	r1, r3
 800061c:	f001 fdb8 	bl	8002190 <HAL_GPIO_WritePin>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000090 	.word	0x20000090
 800062c:	20000096 	.word	0x20000096

08000630 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff ffb8 	bl	80005b0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 031f 	and.w	r3, r3, #31
 8000646:	b2db      	uxtb	r3, r3
 8000648:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800064a:	f107 010c 	add.w	r1, r7, #12
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	2201      	movs	r2, #1
 8000652:	480a      	ldr	r0, [pc, #40]	; (800067c <NRF24_read_register+0x4c>)
 8000654:	f003 fb3c 	bl	8003cd0 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	1c59      	adds	r1, r3, #1
 800065e:	2364      	movs	r3, #100	; 0x64
 8000660:	2201      	movs	r2, #1
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <NRF24_read_register+0x4c>)
 8000664:	f003 fc9a 	bl	8003f9c <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000668:	7b7b      	ldrb	r3, [r7, #13]
 800066a:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f7ff ff9f 	bl	80005b0 <NRF24_csn>
	return retData;
 8000672:	7bfb      	ldrb	r3, [r7, #15]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000098 	.word	0x20000098

08000680 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff8d 	bl	80005b0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f003 031f 	and.w	r3, r3, #31
 800069c:	b2db      	uxtb	r3, r3
 800069e:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006a0:	f107 010c 	add.w	r1, r7, #12
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	2201      	movs	r2, #1
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <NRF24_read_registerN+0x4c>)
 80006aa:	f003 fb11 	bl	8003cd0 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	6839      	ldr	r1, [r7, #0]
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <NRF24_read_registerN+0x4c>)
 80006b8:	f003 fc70 	bl	8003f9c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ff77 	bl	80005b0 <NRF24_csn>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000098 	.word	0x20000098

080006d0 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff ff65 	bl	80005b0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f043 0320 	orr.w	r3, r3, #32
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80006f4:	f107 010c 	add.w	r1, r7, #12
 80006f8:	2364      	movs	r3, #100	; 0x64
 80006fa:	2202      	movs	r2, #2
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <NRF24_write_register+0x40>)
 80006fe:	f003 fae7 	bl	8003cd0 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff ff54 	bl	80005b0 <NRF24_csn>
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000098 	.word	0x20000098

08000714 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	4613      	mov	r3, r2
 8000722:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff ff43 	bl	80005b0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f043 0320 	orr.w	r3, r3, #32
 8000730:	b2db      	uxtb	r3, r3
 8000732:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000734:	f107 010c 	add.w	r1, r7, #12
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	2201      	movs	r2, #1
 800073c:	4808      	ldr	r0, [pc, #32]	; (8000760 <NRF24_write_registerN+0x4c>)
 800073e:	f003 fac7 	bl	8003cd0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	b29a      	uxth	r2, r3
 8000746:	2364      	movs	r3, #100	; 0x64
 8000748:	6839      	ldr	r1, [r7, #0]
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <NRF24_write_registerN+0x4c>)
 800074c:	f003 fac0 	bl	8003cd0 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff2d 	bl	80005b0 <NRF24_csn>
}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000098 	.word	0x20000098

08000764 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000768:	21ff      	movs	r1, #255	; 0xff
 800076a:	20e1      	movs	r0, #225	; 0xe1
 800076c:	f7ff ffb0 	bl	80006d0 <NRF24_write_register>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000778:	21ff      	movs	r1, #255	; 0xff
 800077a:	20e2      	movs	r0, #226	; 0xe2
 800077c:	f7ff ffa8 	bl	80006d0 <NRF24_write_register>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <NRF24_Check>:
	statReg = NRF24_read_register(REG_STATUS);
	return statReg;
}


uint8_t NRF24_Check(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <NRF24_Check+0x5c>)
 8000790:	60bb      	str	r3, [r7, #8]

	NRF24_write_registerN(REG_TX_ADDR, ptr, 5);
 8000792:	2205      	movs	r2, #5
 8000794:	68b9      	ldr	r1, [r7, #8]
 8000796:	2010      	movs	r0, #16
 8000798:	f7ff ffbc 	bl	8000714 <NRF24_write_registerN>
	NRF24_read_registerN(REG_TX_ADDR, rxbuf, 5);
 800079c:	463b      	mov	r3, r7
 800079e:	2205      	movs	r2, #5
 80007a0:	4619      	mov	r1, r3
 80007a2:	2010      	movs	r0, #16
 80007a4:	f7ff ff6c 	bl	8000680 <NRF24_read_registerN>

	for (i = 0; i < 5; i++) {
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]
 80007ac:	e010      	b.n	80007d0 <NRF24_Check+0x4c>
		if (rxbuf[i] != *ptr++) return 0;
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	f107 0210 	add.w	r2, r7, #16
 80007b4:	4413      	add	r3, r2
 80007b6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	1c59      	adds	r1, r3, #1
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d001      	beq.n	80007ca <NRF24_Check+0x46>
 80007c6:	2300      	movs	r3, #0
 80007c8:	e006      	b.n	80007d8 <NRF24_Check+0x54>
	for (i = 0; i < 5; i++) {
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	3301      	adds	r3, #1
 80007ce:	73fb      	strb	r3, [r7, #15]
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d9eb      	bls.n	80007ae <NRF24_Check+0x2a>
	}

	return 1;
 80007d6:	2301      	movs	r3, #1

}//end NRF24_CHECK
 80007d8:	4618      	mov	r0, r3
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	08006c48 	.word	0x08006c48

080007e4 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80007e4:	b082      	sub	sp, #8
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b084      	sub	sp, #16
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	61fb      	str	r3, [r7, #28]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
 80007f4:	4613      	mov	r3, r2
 80007f6:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80007f8:	4b66      	ldr	r3, [pc, #408]	; (8000994 <NRF24_begin+0x1b0>)
 80007fa:	4618      	mov	r0, r3
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	2264      	movs	r2, #100	; 0x64
 8000802:	4619      	mov	r1, r3
 8000804:	f005 fe04 	bl	8006410 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000808:	4a63      	ldr	r2, [pc, #396]	; (8000998 <NRF24_begin+0x1b4>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800080e:	4a63      	ldr	r2, [pc, #396]	; (800099c <NRF24_begin+0x1b8>)
 8000810:	887b      	ldrh	r3, [r7, #2]
 8000812:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000814:	4a62      	ldr	r2, [pc, #392]	; (80009a0 <NRF24_begin+0x1bc>)
 8000816:	883b      	ldrh	r3, [r7, #0]
 8000818:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff fec8 	bl	80005b0 <NRF24_csn>
	NRF24_ce(0);
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff fee5 	bl	80005f0 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000826:	2005      	movs	r0, #5
 8000828:	f001 fa18 	bl	8001c5c <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800082c:	2108      	movs	r1, #8
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff ff4e 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000834:	213f      	movs	r1, #63	; 0x3f
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff ff4a 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800083c:	2103      	movs	r1, #3
 800083e:	2002      	movs	r0, #2
 8000840:	f7ff ff46 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000844:	2103      	movs	r1, #3
 8000846:	2003      	movs	r0, #3
 8000848:	f7ff ff42 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800084c:	2103      	movs	r1, #3
 800084e:	2004      	movs	r0, #4
 8000850:	f7ff ff3e 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000854:	2102      	movs	r1, #2
 8000856:	2005      	movs	r0, #5
 8000858:	f7ff ff3a 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 800085c:	210f      	movs	r1, #15
 800085e:	2006      	movs	r0, #6
 8000860:	f7ff ff36 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000864:	210e      	movs	r1, #14
 8000866:	2007      	movs	r0, #7
 8000868:	f7ff ff32 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 800086c:	2100      	movs	r1, #0
 800086e:	2008      	movs	r0, #8
 8000870:	f7ff ff2e 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000874:	2100      	movs	r1, #0
 8000876:	2009      	movs	r0, #9
 8000878:	f7ff ff2a 	bl	80006d0 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800087c:	23e7      	movs	r3, #231	; 0xe7
 800087e:	733b      	strb	r3, [r7, #12]
 8000880:	23e7      	movs	r3, #231	; 0xe7
 8000882:	72fb      	strb	r3, [r7, #11]
 8000884:	23e7      	movs	r3, #231	; 0xe7
 8000886:	72bb      	strb	r3, [r7, #10]
 8000888:	23e7      	movs	r3, #231	; 0xe7
 800088a:	727b      	strb	r3, [r7, #9]
 800088c:	23e7      	movs	r3, #231	; 0xe7
 800088e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000890:	f107 0308 	add.w	r3, r7, #8
 8000894:	2205      	movs	r2, #5
 8000896:	4619      	mov	r1, r3
 8000898:	200a      	movs	r0, #10
 800089a:	f7ff ff3b 	bl	8000714 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800089e:	23c2      	movs	r3, #194	; 0xc2
 80008a0:	733b      	strb	r3, [r7, #12]
 80008a2:	23c2      	movs	r3, #194	; 0xc2
 80008a4:	72fb      	strb	r3, [r7, #11]
 80008a6:	23c2      	movs	r3, #194	; 0xc2
 80008a8:	72bb      	strb	r3, [r7, #10]
 80008aa:	23c2      	movs	r3, #194	; 0xc2
 80008ac:	727b      	strb	r3, [r7, #9]
 80008ae:	23c2      	movs	r3, #194	; 0xc2
 80008b0:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2205      	movs	r2, #5
 80008b8:	4619      	mov	r1, r3
 80008ba:	200b      	movs	r0, #11
 80008bc:	f7ff ff2a 	bl	8000714 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80008c0:	21c3      	movs	r1, #195	; 0xc3
 80008c2:	200c      	movs	r0, #12
 80008c4:	f7ff ff04 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80008c8:	21c4      	movs	r1, #196	; 0xc4
 80008ca:	200d      	movs	r0, #13
 80008cc:	f7ff ff00 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80008d0:	21c5      	movs	r1, #197	; 0xc5
 80008d2:	200e      	movs	r0, #14
 80008d4:	f7ff fefc 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80008d8:	21c6      	movs	r1, #198	; 0xc6
 80008da:	200f      	movs	r0, #15
 80008dc:	f7ff fef8 	bl	80006d0 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80008e0:	23e7      	movs	r3, #231	; 0xe7
 80008e2:	733b      	strb	r3, [r7, #12]
 80008e4:	23e7      	movs	r3, #231	; 0xe7
 80008e6:	72fb      	strb	r3, [r7, #11]
 80008e8:	23e7      	movs	r3, #231	; 0xe7
 80008ea:	72bb      	strb	r3, [r7, #10]
 80008ec:	23e7      	movs	r3, #231	; 0xe7
 80008ee:	727b      	strb	r3, [r7, #9]
 80008f0:	23e7      	movs	r3, #231	; 0xe7
 80008f2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	2205      	movs	r2, #5
 80008fa:	4619      	mov	r1, r3
 80008fc:	2010      	movs	r0, #16
 80008fe:	f7ff ff09 	bl	8000714 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000902:	2100      	movs	r1, #0
 8000904:	2011      	movs	r0, #17
 8000906:	f7ff fee3 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800090a:	2100      	movs	r1, #0
 800090c:	2012      	movs	r0, #18
 800090e:	f7ff fedf 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000912:	2100      	movs	r1, #0
 8000914:	2013      	movs	r0, #19
 8000916:	f7ff fedb 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800091a:	2100      	movs	r1, #0
 800091c:	2014      	movs	r0, #20
 800091e:	f7ff fed7 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000922:	2100      	movs	r1, #0
 8000924:	2015      	movs	r0, #21
 8000926:	f7ff fed3 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800092a:	2100      	movs	r1, #0
 800092c:	2016      	movs	r0, #22
 800092e:	f7ff fecf 	bl	80006d0 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000932:	f000 f957 	bl	8000be4 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000936:	2100      	movs	r1, #0
 8000938:	201c      	movs	r0, #28
 800093a:	f7ff fec9 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800093e:	2100      	movs	r1, #0
 8000940:	201d      	movs	r0, #29
 8000942:	f7ff fec5 	bl	80006d0 <NRF24_write_register>
	printRadioSettings();
 8000946:	f000 f967 	bl	8000c18 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800094a:	210f      	movs	r1, #15
 800094c:	200f      	movs	r0, #15
 800094e:	f000 f829 	bl	80009a4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000952:	2003      	movs	r0, #3
 8000954:	f000 f886 	bl	8000a64 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000958:	2001      	movs	r0, #1
 800095a:	f000 f8bd 	bl	8000ad8 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800095e:	2002      	movs	r0, #2
 8000960:	f000 f900 	bl	8000b64 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000964:	f000 f866 	bl	8000a34 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000968:	2020      	movs	r0, #32
 800096a:	f000 f84b 	bl	8000a04 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 800096e:	f000 f930 	bl	8000bd2 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000972:	204c      	movs	r0, #76	; 0x4c
 8000974:	f000 f831 	bl	80009da <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000978:	f7ff fef4 	bl	8000764 <NRF24_flush_tx>
	NRF24_flush_rx();
 800097c:	f7ff fefa 	bl	8000774 <NRF24_flush_rx>

	NRF24_powerDown();
 8000980:	f000 f918 	bl	8000bb4 <NRF24_powerDown>

}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800098e:	b002      	add	sp, #8
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000098 	.word	0x20000098
 8000998:	20000090 	.word	0x20000090
 800099c:	20000094 	.word	0x20000094
 80009a0:	20000096 	.word	0x20000096

080009a4 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	460a      	mov	r2, r1
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	4613      	mov	r3, r2
 80009b2:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	b25a      	sxtb	r2, r3
 80009ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	b25b      	sxtb	r3, r3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4619      	mov	r1, r3
 80009cc:	2004      	movs	r0, #4
 80009ce:	f7ff fe7f 	bl	80006d0 <NRF24_write_register>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b084      	sub	sp, #16
 80009de:	af00      	add	r7, sp, #0
 80009e0:	4603      	mov	r3, r0
 80009e2:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80009e4:	237f      	movs	r3, #127	; 0x7f
 80009e6:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80009e8:	7bfa      	ldrb	r2, [r7, #15]
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4293      	cmp	r3, r2
 80009ee:	bf28      	it	cs
 80009f0:	4613      	movcs	r3, r2
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	2005      	movs	r0, #5
 80009f8:	f7ff fe6a 	bl	80006d0 <NRF24_write_register>
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000a0e:	2320      	movs	r3, #32
 8000a10:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000a12:	7bfa      	ldrb	r2, [r7, #15]
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4293      	cmp	r3, r2
 8000a18:	bf28      	it	cs
 8000a1a:	4613      	movcs	r3, r2
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <NRF24_setPayloadSize+0x2c>)
 8000a20:	701a      	strb	r2, [r3, #0]
}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	2000008c 	.word	0x2000008c

08000a34 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000a38:	201d      	movs	r0, #29
 8000a3a:	f7ff fdf9 	bl	8000630 <NRF24_read_register>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f023 0304 	bic.w	r3, r3, #4
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	4619      	mov	r1, r3
 8000a48:	201d      	movs	r0, #29
 8000a4a:	f7ff fe41 	bl	80006d0 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	201c      	movs	r0, #28
 8000a52:	f7ff fe3d 	bl	80006d0 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000a56:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <NRF24_disableDynamicPayloads+0x2c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000008d 	.word	0x2000008d

08000a64 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000a6e:	2006      	movs	r0, #6
 8000a70:	f7ff fdde 	bl	8000630 <NRF24_read_register>
 8000a74:	4603      	mov	r3, r0
 8000a76:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	f023 0306 	bic.w	r3, r3, #6
 8000a7e:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d104      	bne.n	8000a90 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	f043 0306 	orr.w	r3, r3, #6
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	e019      	b.n	8000ac4 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d104      	bne.n	8000aa0 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	e011      	b.n	8000ac4 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d104      	bne.n	8000ab0 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	73fb      	strb	r3, [r7, #15]
 8000aae:	e009      	b.n	8000ac4 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d006      	beq.n	8000ac4 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d103      	bne.n	8000ac4 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	f043 0306 	orr.w	r3, r3, #6
 8000ac2:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	2006      	movs	r0, #6
 8000aca:	f7ff fe01 	bl	80006d0 <NRF24_write_register>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ae6:	2006      	movs	r0, #6
 8000ae8:	f7ff fda2 	bl	8000630 <NRF24_read_register>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <NRF24_setDataRate+0x88>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000af6:	7bbb      	ldrb	r3, [r7, #14]
 8000af8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000afc:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d107      	bne.n	8000b14 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <NRF24_setDataRate+0x88>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	f043 0320 	orr.w	r3, r3, #32
 8000b10:	73bb      	strb	r3, [r7, #14]
 8000b12:	e00d      	b.n	8000b30 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d107      	bne.n	8000b2a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <NRF24_setDataRate+0x88>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	73bb      	strb	r3, [r7, #14]
 8000b28:	e002      	b.n	8000b30 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <NRF24_setDataRate+0x88>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000b30:	7bbb      	ldrb	r3, [r7, #14]
 8000b32:	4619      	mov	r1, r3
 8000b34:	2006      	movs	r0, #6
 8000b36:	f7ff fdcb 	bl	80006d0 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000b3a:	2006      	movs	r0, #6
 8000b3c:	f7ff fd78 	bl	8000630 <NRF24_read_register>
 8000b40:	4603      	mov	r3, r0
 8000b42:	461a      	mov	r2, r3
 8000b44:	7bbb      	ldrb	r3, [r7, #14]
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d102      	bne.n	8000b50 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	e002      	b.n	8000b56 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <NRF24_setDataRate+0x88>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2000008e 	.word	0x2000008e

08000b64 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff fd5e 	bl	8000630 <NRF24_read_register>
 8000b74:	4603      	mov	r3, r0
 8000b76:	f023 030c 	bic.w	r3, r3, #12
 8000b7a:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d00f      	beq.n	8000ba2 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d104      	bne.n	8000b92 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	f043 0308 	orr.w	r3, r3, #8
 8000b8e:	73fb      	strb	r3, [r7, #15]
 8000b90:	e007      	b.n	8000ba2 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff fd92 	bl	80006d0 <NRF24_write_register>
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fd39 	bl	8000630 <NRF24_read_register>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f023 0302 	bic.w	r3, r3, #2
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fd81 	bl	80006d0 <NRF24_write_register>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000bd6:	2170      	movs	r1, #112	; 0x70
 8000bd8:	2007      	movs	r0, #7
 8000bda:	f7ff fd79 	bl	80006d0 <NRF24_write_register>
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff fce0 	bl	80005b0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000bf0:	2350      	movs	r3, #80	; 0x50
 8000bf2:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000bf4:	2373      	movs	r3, #115	; 0x73
 8000bf6:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000bf8:	1d39      	adds	r1, r7, #4
 8000bfa:	2364      	movs	r3, #100	; 0x64
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <NRF24_ACTIVATE_cmd+0x30>)
 8000c00:	f003 f866 	bl	8003cd0 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff fcd3 	bl	80005b0 <NRF24_csn>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000098 	.word	0x20000098

08000c18 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1a:	b0a1      	sub	sp, #132	; 0x84
 8000c1c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	4ab6      	ldr	r2, [pc, #728]	; (8000efc <printRadioSettings+0x2e4>)
 8000c24:	461c      	mov	r4, r3
 8000c26:	4615      	mov	r5, r2
 8000c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	8022      	strh	r2, [r4, #0]
 8000c3a:	3402      	adds	r4, #2
 8000c3c:	0c1b      	lsrs	r3, r3, #16
 8000c3e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fadb 	bl	8000200 <strlen>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	f107 0108 	add.w	r1, r7, #8
 8000c52:	230a      	movs	r3, #10
 8000c54:	48aa      	ldr	r0, [pc, #680]	; (8000f00 <printRadioSettings+0x2e8>)
 8000c56:	f003 fea1 	bl	800499c <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff fce8 	bl	8000630 <NRF24_read_register>
 8000c60:	4603      	mov	r3, r0
 8000c62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000c66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c6a:	f003 0308 	and.w	r3, r3, #8
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d020      	beq.n	8000cb4 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000c72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d00b      	beq.n	8000c96 <printRadioSettings+0x7e>
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4aa0      	ldr	r2, [pc, #640]	; (8000f04 <printRadioSettings+0x2ec>)
 8000c84:	461c      	mov	r4, r3
 8000c86:	4615      	mov	r5, r2
 8000c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c94:	e017      	b.n	8000cc6 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	4a9b      	ldr	r2, [pc, #620]	; (8000f08 <printRadioSettings+0x2f0>)
 8000c9c:	461c      	mov	r4, r3
 8000c9e:	4615      	mov	r5, r2
 8000ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ca8:	c403      	stmia	r4!, {r0, r1}
 8000caa:	8022      	strh	r2, [r4, #0]
 8000cac:	3402      	adds	r4, #2
 8000cae:	0c13      	lsrs	r3, r2, #16
 8000cb0:	7023      	strb	r3, [r4, #0]
 8000cb2:	e008      	b.n	8000cc6 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	4a94      	ldr	r2, [pc, #592]	; (8000f0c <printRadioSettings+0x2f4>)
 8000cba:	461c      	mov	r4, r3
 8000cbc:	4615      	mov	r5, r2
 8000cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc2:	682b      	ldr	r3, [r5, #0]
 8000cc4:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fa98 	bl	8000200 <strlen>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	f107 0108 	add.w	r1, r7, #8
 8000cd8:	230a      	movs	r3, #10
 8000cda:	4889      	ldr	r0, [pc, #548]	; (8000f00 <printRadioSettings+0x2e8>)
 8000cdc:	f003 fe5e 	bl	800499c <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f7ff fca5 	bl	8000630 <NRF24_read_register>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cf0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	bfcc      	ite	gt
 8000cf8:	2301      	movgt	r3, #1
 8000cfa:	2300      	movle	r3, #0
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d04:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	bfcc      	ite	gt
 8000d0c:	2301      	movgt	r3, #1
 8000d0e:	2300      	movle	r3, #0
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d18:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	bfcc      	ite	gt
 8000d20:	2301      	movgt	r3, #1
 8000d22:	2300      	movle	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d28:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d2c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	bfcc      	ite	gt
 8000d34:	2301      	movgt	r3, #1
 8000d36:	2300      	movle	r3, #0
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d3c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d40:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	bfcc      	ite	gt
 8000d48:	2301      	movgt	r3, #1
 8000d4a:	2300      	movle	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d54:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	bfcc      	ite	gt
 8000d5c:	2301      	movgt	r3, #1
 8000d5e:	2300      	movle	r3, #0
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f107 0008 	add.w	r0, r7, #8
 8000d66:	9303      	str	r3, [sp, #12]
 8000d68:	9402      	str	r4, [sp, #8]
 8000d6a:	9101      	str	r1, [sp, #4]
 8000d6c:	9200      	str	r2, [sp, #0]
 8000d6e:	4633      	mov	r3, r6
 8000d70:	462a      	mov	r2, r5
 8000d72:	4967      	ldr	r1, [pc, #412]	; (8000f10 <printRadioSettings+0x2f8>)
 8000d74:	f005 fb60 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fa3f 	bl	8000200 <strlen>
 8000d82:	4603      	mov	r3, r0
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	f107 0108 	add.w	r1, r7, #8
 8000d8a:	230a      	movs	r3, #10
 8000d8c:	485c      	ldr	r0, [pc, #368]	; (8000f00 <printRadioSettings+0x2e8>)
 8000d8e:	f003 fe05 	bl	800499c <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000d92:	2002      	movs	r0, #2
 8000d94:	f7ff fc4c 	bl	8000630 <NRF24_read_register>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000da2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	bfcc      	ite	gt
 8000daa:	2301      	movgt	r3, #1
 8000dac:	2300      	movle	r3, #0
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000db2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000db6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	bfcc      	ite	gt
 8000dbe:	2301      	movgt	r3, #1
 8000dc0:	2300      	movle	r3, #0
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dca:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bfcc      	ite	gt
 8000dd2:	2301      	movgt	r3, #1
 8000dd4:	2300      	movle	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dde:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	bfcc      	ite	gt
 8000de6:	2301      	movgt	r3, #1
 8000de8:	2300      	movle	r3, #0
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000df2:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bfcc      	ite	gt
 8000dfa:	2301      	movgt	r3, #1
 8000dfc:	2300      	movle	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e06:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	bfcc      	ite	gt
 8000e0e:	2301      	movgt	r3, #1
 8000e10:	2300      	movle	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f107 0008 	add.w	r0, r7, #8
 8000e18:	9303      	str	r3, [sp, #12]
 8000e1a:	9402      	str	r4, [sp, #8]
 8000e1c:	9101      	str	r1, [sp, #4]
 8000e1e:	9200      	str	r2, [sp, #0]
 8000e20:	4633      	mov	r3, r6
 8000e22:	462a      	mov	r2, r5
 8000e24:	493b      	ldr	r1, [pc, #236]	; (8000f14 <printRadioSettings+0x2fc>)
 8000e26:	f005 fb07 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff f9e6 	bl	8000200 <strlen>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	f107 0108 	add.w	r1, r7, #8
 8000e3c:	230a      	movs	r3, #10
 8000e3e:	4830      	ldr	r0, [pc, #192]	; (8000f00 <printRadioSettings+0x2e8>)
 8000e40:	f003 fdac 	bl	800499c <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000e44:	2003      	movs	r0, #3
 8000e46:	f7ff fbf3 	bl	8000630 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000e54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e58:	3302      	adds	r3, #2
 8000e5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000e5e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	492c      	ldr	r1, [pc, #176]	; (8000f18 <printRadioSettings+0x300>)
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f005 fae5 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff f9c4 	bl	8000200 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f107 0108 	add.w	r1, r7, #8
 8000e80:	230a      	movs	r3, #10
 8000e82:	481f      	ldr	r0, [pc, #124]	; (8000f00 <printRadioSettings+0x2e8>)
 8000e84:	f003 fd8a 	bl	800499c <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000e88:	2005      	movs	r0, #5
 8000e8a:	f7ff fbd1 	bl	8000630 <NRF24_read_register>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000e94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	491e      	ldr	r1, [pc, #120]	; (8000f1c <printRadioSettings+0x304>)
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f005 fac8 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff f9a7 	bl	8000200 <strlen>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	f107 0108 	add.w	r1, r7, #8
 8000eba:	230a      	movs	r3, #10
 8000ebc:	4810      	ldr	r0, [pc, #64]	; (8000f00 <printRadioSettings+0x2e8>)
 8000ebe:	f003 fd6d 	bl	800499c <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000ec2:	2006      	movs	r0, #6
 8000ec4:	f7ff fbb4 	bl	8000630 <NRF24_read_register>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000ece:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d024      	beq.n	8000f24 <printRadioSettings+0x30c>
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <printRadioSettings+0x308>)
 8000ee0:	461c      	mov	r4, r3
 8000ee2:	4615      	mov	r5, r2
 8000ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000eec:	6020      	str	r0, [r4, #0]
 8000eee:	3404      	adds	r4, #4
 8000ef0:	8021      	strh	r1, [r4, #0]
 8000ef2:	3402      	adds	r4, #2
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	7023      	strb	r3, [r4, #0]
 8000ef8:	e023      	b.n	8000f42 <printRadioSettings+0x32a>
 8000efa:	bf00      	nop
 8000efc:	08006c50 	.word	0x08006c50
 8000f00:	200000fc 	.word	0x200000fc
 8000f04:	08006c84 	.word	0x08006c84
 8000f08:	08006ca0 	.word	0x08006ca0
 8000f0c:	08006cbc 	.word	0x08006cbc
 8000f10:	08006cd0 	.word	0x08006cd0
 8000f14:	08006d14 	.word	0x08006d14
 8000f18:	08006d60 	.word	0x08006d60
 8000f1c:	08006d7c 	.word	0x08006d7c
 8000f20:	08006d90 	.word	0x08006d90
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	4a29      	ldr	r2, [pc, #164]	; (8000fd0 <printRadioSettings+0x3b8>)
 8000f2a:	461c      	mov	r4, r3
 8000f2c:	4615      	mov	r5, r2
 8000f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f36:	6020      	str	r0, [r4, #0]
 8000f38:	3404      	adds	r4, #4
 8000f3a:	8021      	strh	r1, [r4, #0]
 8000f3c:	3402      	adds	r4, #2
 8000f3e:	0c0b      	lsrs	r3, r1, #16
 8000f40:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff f95a 	bl	8000200 <strlen>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	f107 0108 	add.w	r1, r7, #8
 8000f54:	230a      	movs	r3, #10
 8000f56:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <printRadioSettings+0x3bc>)
 8000f58:	f003 fd20 	bl	800499c <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000f5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f60:	f003 0306 	and.w	r3, r3, #6
 8000f64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000f68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f6c:	085b      	lsrs	r3, r3, #1
 8000f6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000f72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d109      	bne.n	8000f8e <printRadioSettings+0x376>
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <printRadioSettings+0x3c0>)
 8000f80:	461c      	mov	r4, r3
 8000f82:	4615      	mov	r5, r2
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	682b      	ldr	r3, [r5, #0]
 8000f8a:	6023      	str	r3, [r4, #0]
 8000f8c:	e037      	b.n	8000ffe <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000f8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d109      	bne.n	8000faa <printRadioSettings+0x392>
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <printRadioSettings+0x3c4>)
 8000f9c:	461c      	mov	r4, r3
 8000f9e:	4615      	mov	r5, r2
 8000fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa4:	682b      	ldr	r3, [r5, #0]
 8000fa6:	6023      	str	r3, [r4, #0]
 8000fa8:	e029      	b.n	8000ffe <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000faa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d118      	bne.n	8000fe4 <printRadioSettings+0x3cc>
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <printRadioSettings+0x3c8>)
 8000fb8:	461c      	mov	r4, r3
 8000fba:	4615      	mov	r5, r2
 8000fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	8022      	strh	r2, [r4, #0]
 8000fc6:	3402      	adds	r4, #2
 8000fc8:	0c1b      	lsrs	r3, r3, #16
 8000fca:	7023      	strb	r3, [r4, #0]
 8000fcc:	e017      	b.n	8000ffe <printRadioSettings+0x3e6>
 8000fce:	bf00      	nop
 8000fd0:	08006da8 	.word	0x08006da8
 8000fd4:	200000fc 	.word	0x200000fc
 8000fd8:	08006dc0 	.word	0x08006dc0
 8000fdc:	08006dd4 	.word	0x08006dd4
 8000fe0:	08006de8 	.word	0x08006de8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000fe4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d108      	bne.n	8000ffe <printRadioSettings+0x3e6>
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	4ad7      	ldr	r2, [pc, #860]	; (8001350 <printRadioSettings+0x738>)
 8000ff2:	461c      	mov	r4, r3
 8000ff4:	4615      	mov	r5, r2
 8000ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffa:	682b      	ldr	r3, [r5, #0]
 8000ffc:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff f8fc 	bl	8000200 <strlen>
 8001008:	4603      	mov	r3, r0
 800100a:	b29a      	uxth	r2, r3
 800100c:	f107 0108 	add.w	r1, r7, #8
 8001010:	230a      	movs	r3, #10
 8001012:	48d0      	ldr	r0, [pc, #832]	; (8001354 <printRadioSettings+0x73c>)
 8001014:	f003 fcc2 	bl	800499c <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001018:	463b      	mov	r3, r7
 800101a:	2205      	movs	r2, #5
 800101c:	4619      	mov	r1, r3
 800101e:	200a      	movs	r0, #10
 8001020:	f7ff fb2e 	bl	8000680 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001024:	793b      	ldrb	r3, [r7, #4]
 8001026:	461c      	mov	r4, r3
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	461d      	mov	r5, r3
 800102c:	78bb      	ldrb	r3, [r7, #2]
 800102e:	787a      	ldrb	r2, [r7, #1]
 8001030:	7839      	ldrb	r1, [r7, #0]
 8001032:	f107 0008 	add.w	r0, r7, #8
 8001036:	9102      	str	r1, [sp, #8]
 8001038:	9201      	str	r2, [sp, #4]
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	462b      	mov	r3, r5
 800103e:	4622      	mov	r2, r4
 8001040:	49c5      	ldr	r1, [pc, #788]	; (8001358 <printRadioSettings+0x740>)
 8001042:	f005 f9f9 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f8d8 	bl	8000200 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	f107 0108 	add.w	r1, r7, #8
 8001058:	230a      	movs	r3, #10
 800105a:	48be      	ldr	r0, [pc, #760]	; (8001354 <printRadioSettings+0x73c>)
 800105c:	f003 fc9e 	bl	800499c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001060:	463b      	mov	r3, r7
 8001062:	2205      	movs	r2, #5
 8001064:	4619      	mov	r1, r3
 8001066:	200b      	movs	r0, #11
 8001068:	f7ff fb0a 	bl	8000680 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800106c:	793b      	ldrb	r3, [r7, #4]
 800106e:	461c      	mov	r4, r3
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	461d      	mov	r5, r3
 8001074:	78bb      	ldrb	r3, [r7, #2]
 8001076:	787a      	ldrb	r2, [r7, #1]
 8001078:	7839      	ldrb	r1, [r7, #0]
 800107a:	f107 0008 	add.w	r0, r7, #8
 800107e:	9102      	str	r1, [sp, #8]
 8001080:	9201      	str	r2, [sp, #4]
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	462b      	mov	r3, r5
 8001086:	4622      	mov	r2, r4
 8001088:	49b4      	ldr	r1, [pc, #720]	; (800135c <printRadioSettings+0x744>)
 800108a:	f005 f9d5 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f8b4 	bl	8000200 <strlen>
 8001098:	4603      	mov	r3, r0
 800109a:	b29a      	uxth	r2, r3
 800109c:	f107 0108 	add.w	r1, r7, #8
 80010a0:	230a      	movs	r3, #10
 80010a2:	48ac      	ldr	r0, [pc, #688]	; (8001354 <printRadioSettings+0x73c>)
 80010a4:	f003 fc7a 	bl	800499c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80010a8:	463b      	mov	r3, r7
 80010aa:	2201      	movs	r2, #1
 80010ac:	4619      	mov	r1, r3
 80010ae:	200c      	movs	r0, #12
 80010b0:	f7ff fae6 	bl	8000680 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010b4:	783b      	ldrb	r3, [r7, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	49a8      	ldr	r1, [pc, #672]	; (8001360 <printRadioSettings+0x748>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f005 f9ba 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f899 	bl	8000200 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f107 0108 	add.w	r1, r7, #8
 80010d6:	230a      	movs	r3, #10
 80010d8:	489e      	ldr	r0, [pc, #632]	; (8001354 <printRadioSettings+0x73c>)
 80010da:	f003 fc5f 	bl	800499c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80010de:	463b      	mov	r3, r7
 80010e0:	2201      	movs	r2, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	200d      	movs	r0, #13
 80010e6:	f7ff facb 	bl	8000680 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010ea:	783b      	ldrb	r3, [r7, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	499c      	ldr	r1, [pc, #624]	; (8001364 <printRadioSettings+0x74c>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 f99f 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f87e 	bl	8000200 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	b29a      	uxth	r2, r3
 8001108:	f107 0108 	add.w	r1, r7, #8
 800110c:	230a      	movs	r3, #10
 800110e:	4891      	ldr	r0, [pc, #580]	; (8001354 <printRadioSettings+0x73c>)
 8001110:	f003 fc44 	bl	800499c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001114:	463b      	mov	r3, r7
 8001116:	2201      	movs	r2, #1
 8001118:	4619      	mov	r1, r3
 800111a:	200e      	movs	r0, #14
 800111c:	f7ff fab0 	bl	8000680 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001120:	783b      	ldrb	r3, [r7, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	498f      	ldr	r1, [pc, #572]	; (8001368 <printRadioSettings+0x750>)
 800112a:	4618      	mov	r0, r3
 800112c:	f005 f984 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f863 	bl	8000200 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	f107 0108 	add.w	r1, r7, #8
 8001142:	230a      	movs	r3, #10
 8001144:	4883      	ldr	r0, [pc, #524]	; (8001354 <printRadioSettings+0x73c>)
 8001146:	f003 fc29 	bl	800499c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800114a:	463b      	mov	r3, r7
 800114c:	2201      	movs	r2, #1
 800114e:	4619      	mov	r1, r3
 8001150:	200f      	movs	r0, #15
 8001152:	f7ff fa95 	bl	8000680 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001156:	783b      	ldrb	r3, [r7, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4983      	ldr	r1, [pc, #524]	; (800136c <printRadioSettings+0x754>)
 8001160:	4618      	mov	r0, r3
 8001162:	f005 f969 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f848 	bl	8000200 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f107 0108 	add.w	r1, r7, #8
 8001178:	230a      	movs	r3, #10
 800117a:	4876      	ldr	r0, [pc, #472]	; (8001354 <printRadioSettings+0x73c>)
 800117c:	f003 fc0e 	bl	800499c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001180:	463b      	mov	r3, r7
 8001182:	2205      	movs	r2, #5
 8001184:	4619      	mov	r1, r3
 8001186:	2010      	movs	r0, #16
 8001188:	f7ff fa7a 	bl	8000680 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800118c:	793b      	ldrb	r3, [r7, #4]
 800118e:	461c      	mov	r4, r3
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	461d      	mov	r5, r3
 8001194:	78bb      	ldrb	r3, [r7, #2]
 8001196:	787a      	ldrb	r2, [r7, #1]
 8001198:	7839      	ldrb	r1, [r7, #0]
 800119a:	f107 0008 	add.w	r0, r7, #8
 800119e:	9102      	str	r1, [sp, #8]
 80011a0:	9201      	str	r2, [sp, #4]
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	462b      	mov	r3, r5
 80011a6:	4622      	mov	r2, r4
 80011a8:	4971      	ldr	r1, [pc, #452]	; (8001370 <printRadioSettings+0x758>)
 80011aa:	f005 f945 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f824 	bl	8000200 <strlen>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f107 0108 	add.w	r1, r7, #8
 80011c0:	230a      	movs	r3, #10
 80011c2:	4864      	ldr	r0, [pc, #400]	; (8001354 <printRadioSettings+0x73c>)
 80011c4:	f003 fbea 	bl	800499c <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80011c8:	2011      	movs	r0, #17
 80011ca:	f7ff fa31 	bl	8000630 <NRF24_read_register>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	4964      	ldr	r1, [pc, #400]	; (8001374 <printRadioSettings+0x75c>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f005 f928 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f807 	bl	8000200 <strlen>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f107 0108 	add.w	r1, r7, #8
 80011fa:	230a      	movs	r3, #10
 80011fc:	4855      	ldr	r0, [pc, #340]	; (8001354 <printRadioSettings+0x73c>)
 80011fe:	f003 fbcd 	bl	800499c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001202:	2012      	movs	r0, #18
 8001204:	f7ff fa14 	bl	8000630 <NRF24_read_register>
 8001208:	4603      	mov	r3, r0
 800120a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800120e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4957      	ldr	r1, [pc, #348]	; (8001378 <printRadioSettings+0x760>)
 800121c:	4618      	mov	r0, r3
 800121e:	f005 f90b 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	4618      	mov	r0, r3
 8001228:	f7fe ffea 	bl	8000200 <strlen>
 800122c:	4603      	mov	r3, r0
 800122e:	b29a      	uxth	r2, r3
 8001230:	f107 0108 	add.w	r1, r7, #8
 8001234:	230a      	movs	r3, #10
 8001236:	4847      	ldr	r0, [pc, #284]	; (8001354 <printRadioSettings+0x73c>)
 8001238:	f003 fbb0 	bl	800499c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 800123c:	2013      	movs	r0, #19
 800123e:	f7ff f9f7 	bl	8000630 <NRF24_read_register>
 8001242:	4603      	mov	r3, r0
 8001244:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001248:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800124c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4949      	ldr	r1, [pc, #292]	; (800137c <printRadioSettings+0x764>)
 8001256:	4618      	mov	r0, r3
 8001258:	f005 f8ee 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	4618      	mov	r0, r3
 8001262:	f7fe ffcd 	bl	8000200 <strlen>
 8001266:	4603      	mov	r3, r0
 8001268:	b29a      	uxth	r2, r3
 800126a:	f107 0108 	add.w	r1, r7, #8
 800126e:	230a      	movs	r3, #10
 8001270:	4838      	ldr	r0, [pc, #224]	; (8001354 <printRadioSettings+0x73c>)
 8001272:	f003 fb93 	bl	800499c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8001276:	2014      	movs	r0, #20
 8001278:	f7ff f9da 	bl	8000630 <NRF24_read_register>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001282:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	493c      	ldr	r1, [pc, #240]	; (8001380 <printRadioSettings+0x768>)
 8001290:	4618      	mov	r0, r3
 8001292:	f005 f8d1 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	4618      	mov	r0, r3
 800129c:	f7fe ffb0 	bl	8000200 <strlen>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	f107 0108 	add.w	r1, r7, #8
 80012a8:	230a      	movs	r3, #10
 80012aa:	482a      	ldr	r0, [pc, #168]	; (8001354 <printRadioSettings+0x73c>)
 80012ac:	f003 fb76 	bl	800499c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80012b0:	2015      	movs	r0, #21
 80012b2:	f7ff f9bd 	bl	8000630 <NRF24_read_register>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80012bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	492e      	ldr	r1, [pc, #184]	; (8001384 <printRadioSettings+0x76c>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f005 f8b4 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7fe ff93 	bl	8000200 <strlen>
 80012da:	4603      	mov	r3, r0
 80012dc:	b29a      	uxth	r2, r3
 80012de:	f107 0108 	add.w	r1, r7, #8
 80012e2:	230a      	movs	r3, #10
 80012e4:	481b      	ldr	r0, [pc, #108]	; (8001354 <printRadioSettings+0x73c>)
 80012e6:	f003 fb59 	bl	800499c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 80012ea:	2016      	movs	r0, #22
 80012ec:	f7ff f9a0 	bl	8000630 <NRF24_read_register>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80012f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	4921      	ldr	r1, [pc, #132]	; (8001388 <printRadioSettings+0x770>)
 8001304:	4618      	mov	r0, r3
 8001306:	f005 f897 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ff76 	bl	8000200 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	b29a      	uxth	r2, r3
 8001318:	f107 0108 	add.w	r1, r7, #8
 800131c:	230a      	movs	r3, #10
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <printRadioSettings+0x73c>)
 8001320:	f003 fb3c 	bl	800499c <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001324:	201c      	movs	r0, #28
 8001326:	f7ff f983 	bl	8000630 <NRF24_read_register>
 800132a:	4603      	mov	r3, r0
 800132c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001330:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001334:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001338:	2b00      	cmp	r3, #0
 800133a:	bfcc      	ite	gt
 800133c:	2301      	movgt	r3, #1
 800133e:	2300      	movle	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001344:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	e01e      	b.n	800138c <printRadioSettings+0x774>
 800134e:	bf00      	nop
 8001350:	08006dfc 	.word	0x08006dfc
 8001354:	200000fc 	.word	0x200000fc
 8001358:	08006e10 	.word	0x08006e10
 800135c:	08006e40 	.word	0x08006e40
 8001360:	08006e70 	.word	0x08006e70
 8001364:	08006e98 	.word	0x08006e98
 8001368:	08006ec0 	.word	0x08006ec0
 800136c:	08006ee8 	.word	0x08006ee8
 8001370:	08006f10 	.word	0x08006f10
 8001374:	08006f3c 	.word	0x08006f3c
 8001378:	08006f58 	.word	0x08006f58
 800137c:	08006f74 	.word	0x08006f74
 8001380:	08006f90 	.word	0x08006f90
 8001384:	08006fac 	.word	0x08006fac
 8001388:	08006fc8 	.word	0x08006fc8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800138c:	2b00      	cmp	r3, #0
 800138e:	bfcc      	ite	gt
 8001390:	2301      	movgt	r3, #1
 8001392:	2300      	movle	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001398:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800139c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bfcc      	ite	gt
 80013a4:	2301      	movgt	r3, #1
 80013a6:	2300      	movle	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013b0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bfcc      	ite	gt
 80013b8:	2301      	movgt	r3, #1
 80013ba:	2300      	movle	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bfcc      	ite	gt
 80013cc:	2301      	movgt	r3, #1
 80013ce:	2300      	movle	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bfcc      	ite	gt
 80013e0:	2301      	movgt	r3, #1
 80013e2:	2300      	movle	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	f107 0008 	add.w	r0, r7, #8
 80013ea:	9303      	str	r3, [sp, #12]
 80013ec:	9402      	str	r4, [sp, #8]
 80013ee:	9101      	str	r1, [sp, #4]
 80013f0:	9200      	str	r2, [sp, #0]
 80013f2:	4633      	mov	r3, r6
 80013f4:	462a      	mov	r2, r5
 80013f6:	494a      	ldr	r1, [pc, #296]	; (8001520 <printRadioSettings+0x908>)
 80013f8:	f005 f81e 	bl	8006438 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4618      	mov	r0, r3
 8001402:	f7fe fefd 	bl	8000200 <strlen>
 8001406:	4603      	mov	r3, r0
 8001408:	b29a      	uxth	r2, r3
 800140a:	f107 0108 	add.w	r1, r7, #8
 800140e:	230a      	movs	r3, #10
 8001410:	4844      	ldr	r0, [pc, #272]	; (8001524 <printRadioSettings+0x90c>)
 8001412:	f003 fac3 	bl	800499c <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001416:	201d      	movs	r0, #29
 8001418:	f7ff f90a 	bl	8000630 <NRF24_read_register>
 800141c:	4603      	mov	r3, r0
 800141e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001422:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00c      	beq.n	8001448 <printRadioSettings+0x830>
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	4a3d      	ldr	r2, [pc, #244]	; (8001528 <printRadioSettings+0x910>)
 8001434:	461c      	mov	r4, r3
 8001436:	4615      	mov	r5, r2
 8001438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001440:	6020      	str	r0, [r4, #0]
 8001442:	3404      	adds	r4, #4
 8001444:	8021      	strh	r1, [r4, #0]
 8001446:	e00e      	b.n	8001466 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	4a37      	ldr	r2, [pc, #220]	; (800152c <printRadioSettings+0x914>)
 800144e:	461c      	mov	r4, r3
 8001450:	4615      	mov	r5, r2
 8001452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001456:	e895 0003 	ldmia.w	r5, {r0, r1}
 800145a:	6020      	str	r0, [r4, #0]
 800145c:	3404      	adds	r4, #4
 800145e:	8021      	strh	r1, [r4, #0]
 8001460:	3402      	adds	r4, #2
 8001462:	0c0b      	lsrs	r3, r1, #16
 8001464:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe fec8 	bl	8000200 <strlen>
 8001470:	4603      	mov	r3, r0
 8001472:	b29a      	uxth	r2, r3
 8001474:	f107 0108 	add.w	r1, r7, #8
 8001478:	230a      	movs	r3, #10
 800147a:	482a      	ldr	r0, [pc, #168]	; (8001524 <printRadioSettings+0x90c>)
 800147c:	f003 fa8e 	bl	800499c <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001480:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00b      	beq.n	80014a4 <printRadioSettings+0x88c>
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	4a27      	ldr	r2, [pc, #156]	; (8001530 <printRadioSettings+0x918>)
 8001492:	461c      	mov	r4, r3
 8001494:	4615      	mov	r5, r2
 8001496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800149a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800149e:	c403      	stmia	r4!, {r0, r1}
 80014a0:	8022      	strh	r2, [r4, #0]
 80014a2:	e00d      	b.n	80014c0 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	4a22      	ldr	r2, [pc, #136]	; (8001534 <printRadioSettings+0x91c>)
 80014aa:	461c      	mov	r4, r3
 80014ac:	4615      	mov	r5, r2
 80014ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014b6:	c403      	stmia	r4!, {r0, r1}
 80014b8:	8022      	strh	r2, [r4, #0]
 80014ba:	3402      	adds	r4, #2
 80014bc:	0c13      	lsrs	r3, r2, #16
 80014be:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe fe9b 	bl	8000200 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	f107 0108 	add.w	r1, r7, #8
 80014d2:	230a      	movs	r3, #10
 80014d4:	4813      	ldr	r0, [pc, #76]	; (8001524 <printRadioSettings+0x90c>)
 80014d6:	f003 fa61 	bl	800499c <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	4a16      	ldr	r2, [pc, #88]	; (8001538 <printRadioSettings+0x920>)
 80014e0:	461c      	mov	r4, r3
 80014e2:	4615      	mov	r5, r2
 80014e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	8022      	strh	r2, [r4, #0]
 80014f6:	3402      	adds	r4, #2
 80014f8:	0c1b      	lsrs	r3, r3, #16
 80014fa:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe fe7d 	bl	8000200 <strlen>
 8001506:	4603      	mov	r3, r0
 8001508:	b29a      	uxth	r2, r3
 800150a:	f107 0108 	add.w	r1, r7, #8
 800150e:	230a      	movs	r3, #10
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <printRadioSettings+0x90c>)
 8001512:	f003 fa43 	bl	800499c <HAL_UART_Transmit>
}
 8001516:	bf00      	nop
 8001518:	3774      	adds	r7, #116	; 0x74
 800151a:	46bd      	mov	sp, r7
 800151c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151e:	bf00      	nop
 8001520:	08006fe4 	.word	0x08006fe4
 8001524:	200000fc 	.word	0x200000fc
 8001528:	08007030 	.word	0x08007030
 800152c:	08007048 	.word	0x08007048
 8001530:	08007060 	.word	0x08007060
 8001534:	0800707c 	.word	0x0800707c
 8001538:	08006c50 	.word	0x08006c50

0800153c <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 800153c:	b084      	sub	sp, #16
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
 8001542:	f107 0c08 	add.w	ip, r7, #8
 8001546:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <nrf24_DebugUART_Init+0x2c>)
 800154c:	4618      	mov	r0, r3
 800154e:	f107 0108 	add.w	r1, r7, #8
 8001552:	238c      	movs	r3, #140	; 0x8c
 8001554:	461a      	mov	r2, r3
 8001556:	f004 ff5b 	bl	8006410 <memcpy>
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001562:	b004      	add	sp, #16
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200000fc 	.word	0x200000fc

0800156c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b0a1      	sub	sp, #132	; 0x84
 8001570:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001572:	f000 fb02 	bl	8001b7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001576:	f000 f82b 	bl	80015d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157a:	f000 f929 	bl	80017d0 <MX_GPIO_Init>
  MX_SPI2_Init();
 800157e:	f000 f89d 	bl	80016bc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001582:	f000 f8d9 	bl	8001738 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(CEpin_GPIO_Port, CSNpin_Pin, CEpin_Pin, hspi2);
 8001586:	4c10      	ldr	r4, [pc, #64]	; (80015c8 <main+0x5c>)
 8001588:	4668      	mov	r0, sp
 800158a:	1d23      	adds	r3, r4, #4
 800158c:	2260      	movs	r2, #96	; 0x60
 800158e:	4619      	mov	r1, r3
 8001590:	f004 ff3e 	bl	8006410 <memcpy>
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	2201      	movs	r2, #1
 8001598:	2120      	movs	r1, #32
 800159a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159e:	f7ff f921 	bl	80007e4 <NRF24_begin>
  nrf24_DebugUART_Init(huart2);
 80015a2:	4c0a      	ldr	r4, [pc, #40]	; (80015cc <main+0x60>)
 80015a4:	4668      	mov	r0, sp
 80015a6:	f104 0310 	add.w	r3, r4, #16
 80015aa:	227c      	movs	r2, #124	; 0x7c
 80015ac:	4619      	mov	r1, r3
 80015ae:	f004 ff2f 	bl	8006410 <memcpy>
 80015b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015b6:	f7ff ffc1 	bl	800153c <nrf24_DebugUART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(NRF24_Check()){
 80015ba:	f7ff f8e3 	bl	8000784 <NRF24_Check>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d000      	beq.n	80015c6 <main+0x5a>
		  //Success!
		  while(1){};
 80015c4:	e7fe      	b.n	80015c4 <main+0x58>
	  }//end if
	  else{
		  //Failure
		  while(1){};
 80015c6:	e7fe      	b.n	80015c6 <main+0x5a>
 80015c8:	20000194 	.word	0x20000194
 80015cc:	200001f8 	.word	0x200001f8

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0be      	sub	sp, #248	; 0xf8
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015da:	2244      	movs	r2, #68	; 0x44
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f004 ff21 	bl	8006426 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	229c      	movs	r2, #156	; 0x9c
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 ff13 	bl	8006426 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001600:	2000      	movs	r0, #0
 8001602:	f000 fdfd 	bl	8002200 <HAL_PWREx_ControlVoltageScaling>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800160c:	f000 f92a 	bl	8001864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001610:	2310      	movs	r3, #16
 8001612:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001616:	2301      	movs	r3, #1
 8001618:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001622:	2360      	movs	r3, #96	; 0x60
 8001624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001628:	2302      	movs	r3, #2
 800162a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800162e:	2301      	movs	r3, #1
 8001630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001634:	2301      	movs	r3, #1
 8001636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 60;
 800163a:	233c      	movs	r3, #60	; 0x3c
 800163c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8001640:	2305      	movs	r3, #5
 8001642:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800164c:	2302      	movs	r3, #2
 800164e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001652:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fe76 	bl	8002348 <HAL_RCC_OscConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001662:	f000 f8ff 	bl	8001864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001666:	230f      	movs	r3, #15
 8001668:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166c:	2303      	movs	r3, #3
 800166e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001684:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001688:	2105      	movs	r1, #5
 800168a:	4618      	mov	r0, r3
 800168c:	f001 fa82 	bl	8002b94 <HAL_RCC_ClockConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001696:	f000 f8e5 	bl	8001864 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800169a:	2302      	movs	r3, #2
 800169c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800169e:	2300      	movs	r3, #0
 80016a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 fd21 	bl	80030ec <HAL_RCCEx_PeriphCLKConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80016b0:	f000 f8d8 	bl	8001864 <Error_Handler>
  }
}
 80016b4:	bf00      	nop
 80016b6:	37f8      	adds	r7, #248	; 0xf8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_SPI2_Init+0x74>)
 80016c2:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <MX_SPI2_Init+0x78>)
 80016c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_SPI2_Init+0x74>)
 80016c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_SPI2_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_SPI2_Init+0x74>)
 80016d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_SPI2_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_SPI2_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_SPI2_Init+0x74>)
 80016ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_SPI2_Init+0x74>)
 80016f2:	2220      	movs	r2, #32
 80016f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_SPI2_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_SPI2_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_SPI2_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_SPI2_Init+0x74>)
 800170a:	2207      	movs	r2, #7
 800170c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_SPI2_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_SPI2_Init+0x74>)
 8001716:	2208      	movs	r2, #8
 8001718:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_SPI2_Init+0x74>)
 800171c:	f002 fa4e 	bl	8003bbc <HAL_SPI_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001726:	f000 f89d 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000194 	.word	0x20000194
 8001734:	40003800 	.word	0x40003800

08001738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <MX_USART2_UART_Init+0x90>)
 800173e:	4a23      	ldr	r2, [pc, #140]	; (80017cc <MX_USART2_UART_Init+0x94>)
 8001740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <MX_USART2_UART_Init+0x90>)
 8001744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <MX_USART2_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_USART2_UART_Init+0x90>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_USART2_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_USART2_UART_Init+0x90>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <MX_USART2_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_USART2_UART_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_USART2_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_USART2_UART_Init+0x90>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <MX_USART2_UART_Init+0x90>)
 800177c:	2200      	movs	r2, #0
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001780:	4811      	ldr	r0, [pc, #68]	; (80017c8 <MX_USART2_UART_Init+0x90>)
 8001782:	f003 f8bb 	bl	80048fc <HAL_UART_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800178c:	f000 f86a 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001790:	2100      	movs	r1, #0
 8001792:	480d      	ldr	r0, [pc, #52]	; (80017c8 <MX_USART2_UART_Init+0x90>)
 8001794:	f004 fd2d 	bl	80061f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800179e:	f000 f861 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a2:	2100      	movs	r1, #0
 80017a4:	4808      	ldr	r0, [pc, #32]	; (80017c8 <MX_USART2_UART_Init+0x90>)
 80017a6:	f004 fd62 	bl	800626e <HAL_UARTEx_SetRxFifoThreshold>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80017b0:	f000 f858 	bl	8001864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_USART2_UART_Init+0x90>)
 80017b6:	f004 fce3 	bl	8006180 <HAL_UARTEx_DisableFifoMode>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017c0:	f000 f850 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200001f8 	.word	0x200001f8
 80017cc:	40004400 	.word	0x40004400

080017d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <MX_GPIO_Init+0x90>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <MX_GPIO_Init+0x90>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <MX_GPIO_Init+0x90>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_GPIO_Init+0x90>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a17      	ldr	r2, [pc, #92]	; (8001860 <MX_GPIO_Init+0x90>)
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <MX_GPIO_Init+0x90>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_GPIO_Init+0x90>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	4a11      	ldr	r2, [pc, #68]	; (8001860 <MX_GPIO_Init+0x90>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_GPIO_Init+0x90>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CEpin_Pin|CSNpin_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2121      	movs	r1, #33	; 0x21
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f000 fcab 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CEpin_Pin CSNpin_Pin */
  GPIO_InitStruct.Pin = CEpin_Pin|CSNpin_Pin;
 800183a:	2321      	movs	r3, #33	; 0x21
 800183c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001854:	f000 fb0a 	bl	8001e6c <HAL_GPIO_Init>

}
 8001858:	bf00      	nop
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_MspInit+0x44>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_MspInit+0x44>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6613      	str	r3, [r2, #96]	; 0x60
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_MspInit+0x44>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_MspInit+0x44>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_MspInit+0x44>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	6593      	str	r3, [r2, #88]	; 0x58
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_MspInit+0x44>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000

080018bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a17      	ldr	r2, [pc, #92]	; (8001938 <HAL_SPI_MspInit+0x7c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d128      	bne.n	8001930 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_SPI_MspInit+0x80>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e2:	4a16      	ldr	r2, [pc, #88]	; (800193c <HAL_SPI_MspInit+0x80>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_SPI_MspInit+0x80>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_SPI_MspInit+0x80>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	4a10      	ldr	r2, [pc, #64]	; (800193c <HAL_SPI_MspInit+0x80>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_SPI_MspInit+0x80>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13;
 800190e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001920:	2305      	movs	r3, #5
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <HAL_SPI_MspInit+0x84>)
 800192c:	f000 fa9e 	bl	8001e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001930:	bf00      	nop
 8001932:	3728      	adds	r7, #40	; 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40003800 	.word	0x40003800
 800193c:	40021000 	.word	0x40021000
 8001940:	48000400 	.word	0x48000400

08001944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a26      	ldr	r2, [pc, #152]	; (80019fc <HAL_UART_MspInit+0xb8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d145      	bne.n	80019f2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <HAL_UART_MspInit+0xbc>)
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	4a25      	ldr	r2, [pc, #148]	; (8001a00 <HAL_UART_MspInit+0xbc>)
 800196c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001970:	6593      	str	r3, [r2, #88]	; 0x58
 8001972:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <HAL_UART_MspInit+0xbc>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_UART_MspInit+0xbc>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <HAL_UART_MspInit+0xbc>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198a:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_UART_MspInit+0xbc>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HAL_UART_MspInit+0xbc>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199a:	4a19      	ldr	r2, [pc, #100]	; (8001a00 <HAL_UART_MspInit+0xbc>)
 800199c:	f043 0308 	orr.w	r3, r3, #8
 80019a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_UART_MspInit+0xbc>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA15 (JTDI)     ------> USART2_RX
    PD5     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80019c0:	2303      	movs	r3, #3
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ce:	f000 fa4d 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019d2:	2320      	movs	r3, #32
 80019d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019e2:	2307      	movs	r3, #7
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4805      	ldr	r0, [pc, #20]	; (8001a04 <HAL_UART_MspInit+0xc0>)
 80019ee:	f000 fa3d 	bl	8001e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019f2:	bf00      	nop
 80019f4:	3728      	adds	r7, #40	; 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40004400 	.word	0x40004400
 8001a00:	40021000 	.word	0x40021000
 8001a04:	48000c00 	.word	0x48000c00

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <MemManage_Handler+0x4>

08001a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <BusFault_Handler+0x4>

08001a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <UsageFault_Handler+0x4>

08001a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5c:	f000 f8e0 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <_sbrk+0x50>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d102      	bne.n	8001a7a <_sbrk+0x16>
		heap_end = &end;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <_sbrk+0x50>)
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <_sbrk+0x54>)
 8001a78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <_sbrk+0x50>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <_sbrk+0x50>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	466a      	mov	r2, sp
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d907      	bls.n	8001a9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a8e:	f004 fc95 	bl	80063bc <__errno>
 8001a92:	4602      	mov	r2, r0
 8001a94:	230c      	movs	r3, #12
 8001a96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	e006      	b.n	8001aac <_sbrk+0x48>
	}

	heap_end += incr;
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <_sbrk+0x50>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a03      	ldr	r2, [pc, #12]	; (8001ab4 <_sbrk+0x50>)
 8001aa8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000188 	.word	0x20000188
 8001ab8:	20000290 	.word	0x20000290

08001abc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <SystemInit+0x64>)
 8001ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac6:	4a16      	ldr	r2, [pc, #88]	; (8001b20 <SystemInit+0x64>)
 8001ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <SystemInit+0x68>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <SystemInit+0x68>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <SystemInit+0x68>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <SystemInit+0x68>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <SystemInit+0x68>)
 8001ae8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001aec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001af0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <SystemInit+0x68>)
 8001af4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001af8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <SystemInit+0x68>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <SystemInit+0x68>)
 8001b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <SystemInit+0x68>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SystemInit+0x64>)
 8001b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b12:	609a      	str	r2, [r3, #8]
#endif
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00
 8001b24:	40021000 	.word	0x40021000

08001b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b60 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b2e:	e003      	b.n	8001b38 <LoopCopyDataInit>

08001b30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b36:	3104      	adds	r1, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b38:	480b      	ldr	r0, [pc, #44]	; (8001b68 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b40:	d3f6      	bcc.n	8001b30 <CopyDataInit>
	ldr	r2, =_sbss
 8001b42:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b44:	e002      	b.n	8001b4c <LoopFillZerobss>

08001b46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b48:	f842 3b04 	str.w	r3, [r2], #4

08001b4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <LoopForever+0x16>)
	cmp	r2, r3
 8001b4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b50:	d3f9      	bcc.n	8001b46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b52:	f7ff ffb3 	bl	8001abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b56:	f004 fc37 	bl	80063c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b5a:	f7ff fd07 	bl	800156c <main>

08001b5e <LoopForever>:

LoopForever:
    b LoopForever
 8001b5e:	e7fe      	b.n	8001b5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b60:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001b64:	08007230 	.word	0x08007230
	ldr	r0, =_sdata
 8001b68:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b6c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001b70:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001b74:	2000028c 	.word	0x2000028c

08001b78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC1_IRQHandler>

08001b7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f93d 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f000 f80e 	bl	8001bac <HAL_InitTick>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	e001      	b.n	8001ba0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b9c:	f7ff fe6a 	bl	8001874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bb8:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <HAL_InitTick+0x68>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d022      	beq.n	8001c06 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_InitTick+0x6c>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <HAL_InitTick+0x68>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 f93c 	bl	8001e52 <HAL_SYSTICK_Config>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10f      	bne.n	8001c00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b0f      	cmp	r3, #15
 8001be4:	d809      	bhi.n	8001bfa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be6:	2200      	movs	r2, #0
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	f04f 30ff 	mov.w	r0, #4294967295
 8001bee:	f000 f914 	bl	8001e1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_InitTick+0x70>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e007      	b.n	8001c0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	e004      	b.n	8001c0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	e001      	b.n	8001c0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000008 	.word	0x20000008
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_IncTick+0x1c>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_IncTick+0x20>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a03      	ldr	r2, [pc, #12]	; (8001c3c <HAL_IncTick+0x1c>)
 8001c30:	6013      	str	r3, [r2, #0]
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	20000284 	.word	0x20000284
 8001c40:	20000008 	.word	0x20000008

08001c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_GetTick+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000284 	.word	0x20000284

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff ffee 	bl	8001c44 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d004      	beq.n	8001c80 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_Delay+0x40>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c80:	bf00      	nop
 8001c82:	f7ff ffdf 	bl	8001c44 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d8f7      	bhi.n	8001c82 <HAL_Delay+0x26>
  {
  }
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000008 	.word	0x20000008

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
         );
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd0:	d301      	bcc.n	8001dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <SysTick_Config+0x40>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dde:	210f      	movs	r1, #15
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f7ff ff8e 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <SysTick_Config+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SysTick_Config+0x40>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	e000e010 	.word	0xe000e010

08001e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff47 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2c:	f7ff ff5c 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff ff8e 	bl	8001d58 <NVIC_EncodePriority>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5d 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffb0 	bl	8001dc0 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7a:	e166      	b.n	800214a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8158 	beq.w	8002144 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d00b      	beq.n	8001eb4 <HAL_GPIO_Init+0x48>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d007      	beq.n	8001eb4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ea8:	2b11      	cmp	r3, #17
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b12      	cmp	r3, #18
 8001eb2:	d130      	bne.n	8001f16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eea:	2201      	movs	r2, #1
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f003 0201 	and.w	r2, r3, #1
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	2203      	movs	r2, #3
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0xea>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b12      	cmp	r3, #18
 8001f54:	d123      	bne.n	8001f9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	08da      	lsrs	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3208      	adds	r2, #8
 8001f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	08da      	lsrs	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3208      	adds	r2, #8
 8001f98:	6939      	ldr	r1, [r7, #16]
 8001f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0203 	and.w	r2, r3, #3
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80b2 	beq.w	8002144 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe0:	4b61      	ldr	r3, [pc, #388]	; (8002168 <HAL_GPIO_Init+0x2fc>)
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe4:	4a60      	ldr	r2, [pc, #384]	; (8002168 <HAL_GPIO_Init+0x2fc>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6613      	str	r3, [r2, #96]	; 0x60
 8001fec:	4b5e      	ldr	r3, [pc, #376]	; (8002168 <HAL_GPIO_Init+0x2fc>)
 8001fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ff8:	4a5c      	ldr	r2, [pc, #368]	; (800216c <HAL_GPIO_Init+0x300>)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	220f      	movs	r2, #15
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002022:	d02b      	beq.n	800207c <HAL_GPIO_Init+0x210>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a52      	ldr	r2, [pc, #328]	; (8002170 <HAL_GPIO_Init+0x304>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d025      	beq.n	8002078 <HAL_GPIO_Init+0x20c>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a51      	ldr	r2, [pc, #324]	; (8002174 <HAL_GPIO_Init+0x308>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d01f      	beq.n	8002074 <HAL_GPIO_Init+0x208>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a50      	ldr	r2, [pc, #320]	; (8002178 <HAL_GPIO_Init+0x30c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d019      	beq.n	8002070 <HAL_GPIO_Init+0x204>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a4f      	ldr	r2, [pc, #316]	; (800217c <HAL_GPIO_Init+0x310>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d013      	beq.n	800206c <HAL_GPIO_Init+0x200>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a4e      	ldr	r2, [pc, #312]	; (8002180 <HAL_GPIO_Init+0x314>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00d      	beq.n	8002068 <HAL_GPIO_Init+0x1fc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a4d      	ldr	r2, [pc, #308]	; (8002184 <HAL_GPIO_Init+0x318>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <HAL_GPIO_Init+0x1f8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a4c      	ldr	r2, [pc, #304]	; (8002188 <HAL_GPIO_Init+0x31c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_GPIO_Init+0x1f4>
 800205c:	2307      	movs	r3, #7
 800205e:	e00e      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002060:	2308      	movs	r3, #8
 8002062:	e00c      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002064:	2306      	movs	r3, #6
 8002066:	e00a      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002068:	2305      	movs	r3, #5
 800206a:	e008      	b.n	800207e <HAL_GPIO_Init+0x212>
 800206c:	2304      	movs	r3, #4
 800206e:	e006      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002070:	2303      	movs	r3, #3
 8002072:	e004      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002074:	2302      	movs	r3, #2
 8002076:	e002      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_GPIO_Init+0x212>
 800207c:	2300      	movs	r3, #0
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	f002 0203 	and.w	r2, r2, #3
 8002084:	0092      	lsls	r2, r2, #2
 8002086:	4093      	lsls	r3, r2
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800208e:	4937      	ldr	r1, [pc, #220]	; (800216c <HAL_GPIO_Init+0x300>)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800209c:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_GPIO_Init+0x320>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020c0:	4a32      	ldr	r2, [pc, #200]	; (800218c <HAL_GPIO_Init+0x320>)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80020c6:	4b31      	ldr	r3, [pc, #196]	; (800218c <HAL_GPIO_Init+0x320>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020ea:	4a28      	ldr	r2, [pc, #160]	; (800218c <HAL_GPIO_Init+0x320>)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020f0:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_GPIO_Init+0x320>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002114:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_GPIO_Init+0x320>)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_GPIO_Init+0x320>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	43db      	mvns	r3, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800213e:	4a13      	ldr	r2, [pc, #76]	; (800218c <HAL_GPIO_Init+0x320>)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3301      	adds	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	f47f ae91 	bne.w	8001e7c <HAL_GPIO_Init+0x10>
  }
}
 800215a:	bf00      	nop
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	40010000 	.word	0x40010000
 8002170:	48000400 	.word	0x48000400
 8002174:	48000800 	.word	0x48000800
 8002178:	48000c00 	.word	0x48000c00
 800217c:	48001000 	.word	0x48001000
 8002180:	48001400 	.word	0x48001400
 8002184:	48001800 	.word	0x48001800
 8002188:	48001c00 	.word	0x48001c00
 800218c:	40010400 	.word	0x40010400

08002190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
 800219c:	4613      	mov	r3, r2
 800219e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a0:	787b      	ldrb	r3, [r7, #1]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021ac:	e002      	b.n	80021b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ae:	887a      	ldrh	r2, [r7, #2]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d0:	d102      	bne.n	80021d8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80021d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d6:	e00b      	b.n	80021f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80021da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021e6:	d102      	bne.n	80021ee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80021e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ec:	e000      	b.n	80021f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80021ee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40007000 	.word	0x40007000

08002200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d141      	bne.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800220e:	4b4b      	ldr	r3, [pc, #300]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221a:	d131      	bne.n	8002280 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800221c:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002222:	4a46      	ldr	r2, [pc, #280]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002228:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800222c:	4b43      	ldr	r3, [pc, #268]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002234:	4a41      	ldr	r2, [pc, #260]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800223a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800223c:	4b40      	ldr	r3, [pc, #256]	; (8002340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2232      	movs	r2, #50	; 0x32
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	4a3f      	ldr	r2, [pc, #252]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	0c9b      	lsrs	r3, r3, #18
 800224e:	3301      	adds	r3, #1
 8002250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002252:	e002      	b.n	800225a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3b01      	subs	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800225a:	4b38      	ldr	r3, [pc, #224]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002266:	d102      	bne.n	800226e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f2      	bne.n	8002254 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800226e:	4b33      	ldr	r3, [pc, #204]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227a:	d158      	bne.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e057      	b.n	8002330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002286:	4a2d      	ldr	r2, [pc, #180]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800228c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002290:	e04d      	b.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002298:	d141      	bne.n	800231e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800229a:	4b28      	ldr	r3, [pc, #160]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a6:	d131      	bne.n	800230c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ae:	4a23      	ldr	r2, [pc, #140]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022b8:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022c0:	4a1e      	ldr	r2, [pc, #120]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2232      	movs	r2, #50	; 0x32
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	0c9b      	lsrs	r3, r3, #18
 80022da:	3301      	adds	r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022de:	e002      	b.n	80022e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f2:	d102      	bne.n	80022fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f2      	bne.n	80022e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002306:	d112      	bne.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e011      	b.n	8002330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002318:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800231c:	e007      	b.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002326:	4a05      	ldr	r2, [pc, #20]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002328:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800232c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40007000 	.word	0x40007000
 8002340:	20000000 	.word	0x20000000
 8002344:	431bde83 	.word	0x431bde83

08002348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	f000 bc16 	b.w	8002b88 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235c:	4ba0      	ldr	r3, [pc, #640]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002366:	4b9e      	ldr	r3, [pc, #632]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80e4 	beq.w	8002546 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <HAL_RCC_OscConfig+0x4c>
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	f040 808b 	bne.w	80024a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2b01      	cmp	r3, #1
 8002390:	f040 8087 	bne.w	80024a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002394:	4b92      	ldr	r3, [pc, #584]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_OscConfig+0x64>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e3ed      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1a      	ldr	r2, [r3, #32]
 80023b0:	4b8b      	ldr	r3, [pc, #556]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d004      	beq.n	80023c6 <HAL_RCC_OscConfig+0x7e>
 80023bc:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c4:	e005      	b.n	80023d2 <HAL_RCC_OscConfig+0x8a>
 80023c6:	4b86      	ldr	r3, [pc, #536]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80023c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d223      	bcs.n	800241e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fdc6 	bl	8002f6c <RCC_SetFlashLatencyFromMSIRange>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e3ce      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ea:	4b7d      	ldr	r3, [pc, #500]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a7c      	ldr	r2, [pc, #496]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b7a      	ldr	r3, [pc, #488]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4977      	ldr	r1, [pc, #476]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002408:	4b75      	ldr	r3, [pc, #468]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	4972      	ldr	r1, [pc, #456]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002418:	4313      	orrs	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
 800241c:	e025      	b.n	800246a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800241e:	4b70      	ldr	r3, [pc, #448]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a6f      	ldr	r2, [pc, #444]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002424:	f043 0308 	orr.w	r3, r3, #8
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b6d      	ldr	r3, [pc, #436]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	496a      	ldr	r1, [pc, #424]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800243c:	4b68      	ldr	r3, [pc, #416]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	4965      	ldr	r1, [pc, #404]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fd86 	bl	8002f6c <RCC_SetFlashLatencyFromMSIRange>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e38e      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800246a:	f000 fcbf 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 800246e:	4601      	mov	r1, r0
 8002470:	4b5b      	ldr	r3, [pc, #364]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	4a5a      	ldr	r2, [pc, #360]	; (80025e4 <HAL_RCC_OscConfig+0x29c>)
 800247c:	5cd3      	ldrb	r3, [r2, r3]
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	fa21 f303 	lsr.w	r3, r1, r3
 8002486:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCC_OscConfig+0x2a0>)
 8002488:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800248a:	4b58      	ldr	r3, [pc, #352]	; (80025ec <HAL_RCC_OscConfig+0x2a4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fb8c 	bl	8001bac <HAL_InitTick>
 8002494:	4603      	mov	r3, r0
 8002496:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d052      	beq.n	8002544 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	e372      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d032      	beq.n	8002510 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024aa:	4b4d      	ldr	r3, [pc, #308]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a4c      	ldr	r2, [pc, #304]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024b6:	f7ff fbc5 	bl	8001c44 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024be:	f7ff fbc1 	bl	8001c44 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e35b      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024d0:	4b43      	ldr	r3, [pc, #268]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024dc:	4b40      	ldr	r3, [pc, #256]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a3f      	ldr	r2, [pc, #252]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024e2:	f043 0308 	orr.w	r3, r3, #8
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	493a      	ldr	r1, [pc, #232]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024fa:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	4935      	ldr	r1, [pc, #212]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
 800250e:	e01a      	b.n	8002546 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002510:	4b33      	ldr	r3, [pc, #204]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a32      	ldr	r2, [pc, #200]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800251c:	f7ff fb92 	bl	8001c44 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002524:	f7ff fb8e 	bl	8001c44 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e328      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002536:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x1dc>
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002544:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d073      	beq.n	800263a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b08      	cmp	r3, #8
 8002556:	d005      	beq.n	8002564 <HAL_RCC_OscConfig+0x21c>
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b0c      	cmp	r3, #12
 800255c:	d10e      	bne.n	800257c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d10b      	bne.n	800257c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d063      	beq.n	8002638 <HAL_RCC_OscConfig+0x2f0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d15f      	bne.n	8002638 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e305      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d106      	bne.n	8002594 <HAL_RCC_OscConfig+0x24c>
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0x288>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x270>
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0x288>
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a08      	ldr	r2, [pc, #32]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <HAL_RCC_OscConfig+0x298>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01b      	beq.n	8002610 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7ff fb34 	bl	8001c44 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025de:	e010      	b.n	8002602 <HAL_RCC_OscConfig+0x2ba>
 80025e0:	40021000 	.word	0x40021000
 80025e4:	080071a4 	.word	0x080071a4
 80025e8:	20000000 	.word	0x20000000
 80025ec:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f0:	f7ff fb28 	bl	8001c44 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e2c2      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002602:	4baf      	ldr	r3, [pc, #700]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x2a8>
 800260e:	e014      	b.n	800263a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7ff fb18 	bl	8001c44 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002618:	f7ff fb14 	bl	8001c44 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e2ae      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800262a:	4ba5      	ldr	r3, [pc, #660]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x2d0>
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d060      	beq.n	8002708 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b04      	cmp	r3, #4
 800264a:	d005      	beq.n	8002658 <HAL_RCC_OscConfig+0x310>
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b0c      	cmp	r3, #12
 8002650:	d119      	bne.n	8002686 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d116      	bne.n	8002686 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002658:	4b99      	ldr	r3, [pc, #612]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_OscConfig+0x328>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e28b      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4b93      	ldr	r3, [pc, #588]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	061b      	lsls	r3, r3, #24
 800267e:	4990      	ldr	r1, [pc, #576]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002684:	e040      	b.n	8002708 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d023      	beq.n	80026d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800268e:	4b8c      	ldr	r3, [pc, #560]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a8b      	ldr	r2, [pc, #556]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7ff fad3 	bl	8001c44 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a2:	f7ff facf 	bl	8001c44 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e269      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b4:	4b82      	ldr	r3, [pc, #520]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c0:	4b7f      	ldr	r3, [pc, #508]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	497c      	ldr	r1, [pc, #496]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
 80026d4:	e018      	b.n	8002708 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d6:	4b7a      	ldr	r3, [pc, #488]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a79      	ldr	r2, [pc, #484]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80026dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e2:	f7ff faaf 	bl	8001c44 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ea:	f7ff faab 	bl	8001c44 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e245      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026fc:	4b70      	ldr	r3, [pc, #448]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f0      	bne.n	80026ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d03c      	beq.n	800278e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d01c      	beq.n	8002756 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271c:	4b68      	ldr	r3, [pc, #416]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800271e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002722:	4a67      	ldr	r2, [pc, #412]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7ff fa8a 	bl	8001c44 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002734:	f7ff fa86 	bl	8001c44 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e220      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002746:	4b5e      	ldr	r3, [pc, #376]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0ef      	beq.n	8002734 <HAL_RCC_OscConfig+0x3ec>
 8002754:	e01b      	b.n	800278e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002756:	4b5a      	ldr	r3, [pc, #360]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275c:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7ff fa6d 	bl	8001c44 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276e:	f7ff fa69 	bl	8001c44 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e203      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002780:	4b4f      	ldr	r3, [pc, #316]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1ef      	bne.n	800276e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80a6 	beq.w	80028e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279c:	2300      	movs	r3, #0
 800279e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027a0:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10d      	bne.n	80027c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ac:	4b44      	ldr	r3, [pc, #272]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	4a43      	ldr	r2, [pc, #268]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80027b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b6:	6593      	str	r3, [r2, #88]	; 0x58
 80027b8:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c4:	2301      	movs	r3, #1
 80027c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c8:	4b3e      	ldr	r3, [pc, #248]	; (80028c4 <HAL_RCC_OscConfig+0x57c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d118      	bne.n	8002806 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d4:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_RCC_OscConfig+0x57c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a3a      	ldr	r2, [pc, #232]	; (80028c4 <HAL_RCC_OscConfig+0x57c>)
 80027da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e0:	f7ff fa30 	bl	8001c44 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e8:	f7ff fa2c 	bl	8001c44 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1c6      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027fa:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <HAL_RCC_OscConfig+0x57c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d108      	bne.n	8002820 <HAL_RCC_OscConfig+0x4d8>
 800280e:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	4a2a      	ldr	r2, [pc, #168]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800281e:	e024      	b.n	800286a <HAL_RCC_OscConfig+0x522>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b05      	cmp	r3, #5
 8002826:	d110      	bne.n	800284a <HAL_RCC_OscConfig+0x502>
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	4a24      	ldr	r2, [pc, #144]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002838:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002848:	e00f      	b.n	800286a <HAL_RCC_OscConfig+0x522>
 800284a:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800285a:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	4a17      	ldr	r2, [pc, #92]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002862:	f023 0304 	bic.w	r3, r3, #4
 8002866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002872:	f7ff f9e7 	bl	8001c44 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002878:	e00a      	b.n	8002890 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7ff f9e3 	bl	8001c44 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	; 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e17b      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_OscConfig+0x578>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0ed      	beq.n	800287a <HAL_RCC_OscConfig+0x532>
 800289e:	e01a      	b.n	80028d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7ff f9d0 	bl	8001c44 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028a6:	e00f      	b.n	80028c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a8:	f7ff f9cc 	bl	8001c44 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d906      	bls.n	80028c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e164      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c8:	4ba8      	ldr	r3, [pc, #672]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1e8      	bne.n	80028a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d6:	7ffb      	ldrb	r3, [r7, #31]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028dc:	4ba3      	ldr	r3, [pc, #652]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	4aa2      	ldr	r2, [pc, #648]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 80028e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d03c      	beq.n	800296e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01c      	beq.n	8002936 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028fc:	4b9b      	ldr	r3, [pc, #620]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 80028fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002902:	4a9a      	ldr	r2, [pc, #616]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7ff f99a 	bl	8001c44 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002914:	f7ff f996 	bl	8001c44 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e130      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002926:	4b91      	ldr	r3, [pc, #580]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002928:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ef      	beq.n	8002914 <HAL_RCC_OscConfig+0x5cc>
 8002934:	e01b      	b.n	800296e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002936:	4b8d      	ldr	r3, [pc, #564]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002938:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800293c:	4a8b      	ldr	r2, [pc, #556]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7ff f97d 	bl	8001c44 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800294e:	f7ff f979 	bl	8001c44 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e113      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002960:	4b82      	ldr	r3, [pc, #520]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002962:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1ef      	bne.n	800294e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8107 	beq.w	8002b86 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	2b02      	cmp	r3, #2
 800297e:	f040 80cb 	bne.w	8002b18 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002982:	4b7a      	ldr	r3, [pc, #488]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f003 0203 	and.w	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	429a      	cmp	r2, r3
 8002994:	d12c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	3b01      	subs	r3, #1
 80029a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d123      	bne.n	80029f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d11b      	bne.n	80029f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d113      	bne.n	80029f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	085b      	lsrs	r3, r3, #1
 80029d4:	3b01      	subs	r3, #1
 80029d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d109      	bne.n	80029f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	085b      	lsrs	r3, r3, #1
 80029e8:	3b01      	subs	r3, #1
 80029ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d06d      	beq.n	8002acc <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	d068      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029f6:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d105      	bne.n	8002a0e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a02:	4b5a      	ldr	r3, [pc, #360]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0ba      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a12:	4b56      	ldr	r3, [pc, #344]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a55      	ldr	r2, [pc, #340]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a1e:	f7ff f911 	bl	8001c44 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a26:	f7ff f90d 	bl	8001c44 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0a7      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a38:	4b4c      	ldr	r3, [pc, #304]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a44:	4b49      	ldr	r3, [pc, #292]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	4b49      	ldr	r3, [pc, #292]	; (8002b70 <HAL_RCC_OscConfig+0x828>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a54:	3a01      	subs	r2, #1
 8002a56:	0112      	lsls	r2, r2, #4
 8002a58:	4311      	orrs	r1, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a5e:	0212      	lsls	r2, r2, #8
 8002a60:	4311      	orrs	r1, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a66:	0852      	lsrs	r2, r2, #1
 8002a68:	3a01      	subs	r2, #1
 8002a6a:	0552      	lsls	r2, r2, #21
 8002a6c:	4311      	orrs	r1, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a72:	0852      	lsrs	r2, r2, #1
 8002a74:	3a01      	subs	r2, #1
 8002a76:	0652      	lsls	r2, r2, #25
 8002a78:	4311      	orrs	r1, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a7e:	06d2      	lsls	r2, r2, #27
 8002a80:	430a      	orrs	r2, r1
 8002a82:	493a      	ldr	r1, [pc, #232]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a88:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a37      	ldr	r2, [pc, #220]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a94:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a34      	ldr	r2, [pc, #208]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aa0:	f7ff f8d0 	bl	8001c44 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7ff f8cc 	bl	8001c44 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e066      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aba:	4b2c      	ldr	r3, [pc, #176]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac6:	e05e      	b.n	8002b86 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e05d      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d156      	bne.n	8002b86 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ad8:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a23      	ldr	r2, [pc, #140]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ae2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ae4:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a20      	ldr	r2, [pc, #128]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002af0:	f7ff f8a8 	bl	8001c44 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7ff f8a4 	bl	8001c44 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e03e      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0a:	4b18      	ldr	r3, [pc, #96]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x7b0>
 8002b16:	e036      	b.n	8002b86 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	d031      	beq.n	8002b82 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a12      	ldr	r2, [pc, #72]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002b24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b28:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d105      	bne.n	8002b42 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002b3c:	f023 0303 	bic.w	r3, r3, #3
 8002b40:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <HAL_RCC_OscConfig+0x824>)
 8002b48:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b50:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7ff f877 	bl	8001c44 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b58:	e00c      	b.n	8002b74 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7ff f873 	bl	8001c44 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d905      	bls.n	8002b74 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e00d      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_RCC_OscConfig+0x848>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1ec      	bne.n	8002b5a <HAL_RCC_OscConfig+0x812>
 8002b80:	e001      	b.n	8002b86 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000

08002b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e10f      	b.n	8002dcc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bac:	4b89      	ldr	r3, [pc, #548]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d910      	bls.n	8002bdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b86      	ldr	r3, [pc, #536]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 020f 	bic.w	r2, r3, #15
 8002bc2:	4984      	ldr	r1, [pc, #528]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b82      	ldr	r3, [pc, #520]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0f7      	b.n	8002dcc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8089 	beq.w	8002cfc <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d133      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf2:	4b79      	ldr	r3, [pc, #484]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e0e4      	b.n	8002dcc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002c02:	f000 fa0d 	bl	8003020 <RCC_GetSysClockFreqFromPLLSource>
 8002c06:	4602      	mov	r2, r0
 8002c08:	4b74      	ldr	r3, [pc, #464]	; (8002ddc <HAL_RCC_ClockConfig+0x248>)
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d955      	bls.n	8002cba <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c0e:	4b72      	ldr	r3, [pc, #456]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10a      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c1a:	4b6f      	ldr	r3, [pc, #444]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c22:	4a6d      	ldr	r2, [pc, #436]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	e044      	b.n	8002cba <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d03e      	beq.n	8002cba <HAL_RCC_ClockConfig+0x126>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d13a      	bne.n	8002cba <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c44:	4b64      	ldr	r3, [pc, #400]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c4c:	4a62      	ldr	r2, [pc, #392]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c52:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	e02f      	b.n	8002cba <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c62:	4b5d      	ldr	r3, [pc, #372]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d115      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0ac      	b.n	8002dcc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c7a:	4b57      	ldr	r3, [pc, #348]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e0a0      	b.n	8002dcc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c8a:	4b53      	ldr	r3, [pc, #332]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e098      	b.n	8002dcc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002c9a:	f000 f8a7 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	4b4e      	ldr	r3, [pc, #312]	; (8002ddc <HAL_RCC_ClockConfig+0x248>)
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d909      	bls.n	8002cba <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ca6:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cae:	4a4a      	ldr	r2, [pc, #296]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cba:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f023 0203 	bic.w	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4944      	ldr	r1, [pc, #272]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ccc:	f7fe ffba 	bl	8001c44 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd4:	f7fe ffb6 	bl	8001c44 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e070      	b.n	8002dcc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 020c 	and.w	r2, r3, #12
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d1eb      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d009      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d08:	4b33      	ldr	r3, [pc, #204]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4930      	ldr	r1, [pc, #192]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b80      	cmp	r3, #128	; 0x80
 8002d20:	d105      	bne.n	8002d2e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d22:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	4a2c      	ldr	r2, [pc, #176]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002d28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d2e:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d210      	bcs.n	8002d5e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3c:	4b25      	ldr	r3, [pc, #148]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 020f 	bic.w	r2, r3, #15
 8002d44:	4923      	ldr	r1, [pc, #140]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4c:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e036      	b.n	8002dcc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4918      	ldr	r1, [pc, #96]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d009      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4910      	ldr	r1, [pc, #64]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d9c:	f000 f826 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8002da0:	4601      	mov	r1, r0
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	4a0c      	ldr	r2, [pc, #48]	; (8002de0 <HAL_RCC_ClockConfig+0x24c>)
 8002dae:	5cd3      	ldrb	r3, [r2, r3]
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	fa21 f303 	lsr.w	r3, r1, r3
 8002db8:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <HAL_RCC_ClockConfig+0x250>)
 8002dba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_RCC_ClockConfig+0x254>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe fef3 	bl	8001bac <HAL_InitTick>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	73fb      	strb	r3, [r7, #15]

  return status;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40022000 	.word	0x40022000
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	04c4b400 	.word	0x04c4b400
 8002de0:	080071a4 	.word	0x080071a4
 8002de4:	20000000 	.word	0x20000000
 8002de8:	20000004 	.word	0x20000004

08002dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dfa:	4b3d      	ldr	r3, [pc, #244]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e04:	4b3a      	ldr	r3, [pc, #232]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x34>
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d121      	bne.n	8002e5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d11e      	bne.n	8002e5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e20:	4b33      	ldr	r3, [pc, #204]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e2c:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	f003 030f 	and.w	r3, r3, #15
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	e005      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e3c:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e48:	4a2a      	ldr	r2, [pc, #168]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10d      	bne.n	8002e74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d102      	bne.n	8002e6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e64:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	e004      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e70:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	2b0c      	cmp	r3, #12
 8002e78:	d133      	bne.n	8002ee2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d002      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0xa4>
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d003      	beq.n	8002e96 <HAL_RCC_GetSysClockFreq+0xaa>
 8002e8e:	e005      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e92:	617b      	str	r3, [r7, #20]
      break;
 8002e94:	e005      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e96:	4b18      	ldr	r3, [pc, #96]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e98:	617b      	str	r3, [r7, #20]
      break;
 8002e9a:	e002      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	617b      	str	r3, [r7, #20]
      break;
 8002ea0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ea2:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	3301      	adds	r3, #1
 8002eae:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	fb02 f203 	mul.w	r2, r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	0e5b      	lsrs	r3, r3, #25
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3724      	adds	r7, #36	; 0x24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	080071bc 	.word	0x080071bc
 8002ef8:	00f42400 	.word	0x00f42400

08002efc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20000000 	.word	0x20000000

08002f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f18:	f7ff fff0 	bl	8002efc <HAL_RCC_GetHCLKFreq>
 8002f1c:	4601      	mov	r1, r0
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4a04      	ldr	r2, [pc, #16]	; (8002f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f2a:	5cd3      	ldrb	r3, [r2, r3]
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	080071b4 	.word	0x080071b4

08002f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f44:	f7ff ffda 	bl	8002efc <HAL_RCC_GetHCLKFreq>
 8002f48:	4601      	mov	r1, r0
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	0adb      	lsrs	r3, r3, #11
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f56:	5cd3      	ldrb	r3, [r2, r3]
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	080071b4 	.word	0x080071b4

08002f6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f78:	4b27      	ldr	r3, [pc, #156]	; (8003018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f84:	f7ff f91c 	bl	80021c0 <HAL_PWREx_GetVoltageRange>
 8002f88:	6178      	str	r0, [r7, #20]
 8002f8a:	e014      	b.n	8002fb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f8c:	4b22      	ldr	r3, [pc, #136]	; (8003018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	4a21      	ldr	r2, [pc, #132]	; (8003018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f96:	6593      	str	r3, [r2, #88]	; 0x58
 8002f98:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fa4:	f7ff f90c 	bl	80021c0 <HAL_PWREx_GetVoltageRange>
 8002fa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002faa:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fbc:	d10b      	bne.n	8002fd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b80      	cmp	r3, #128	; 0x80
 8002fc2:	d913      	bls.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2ba0      	cmp	r3, #160	; 0xa0
 8002fc8:	d902      	bls.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fca:	2302      	movs	r3, #2
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	e00d      	b.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	e00a      	b.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8002fda:	d902      	bls.n	8002fe2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002fdc:	2302      	movs	r3, #2
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	e004      	b.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b70      	cmp	r3, #112	; 0x70
 8002fe6:	d101      	bne.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fe8:	2301      	movs	r3, #1
 8002fea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 020f 	bic.w	r2, r3, #15
 8002ff4:	4909      	ldr	r1, [pc, #36]	; (800301c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	429a      	cmp	r2, r3
 8003008:	d001      	beq.n	800300e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	40022000 	.word	0x40022000

08003020 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800302a:	4b2d      	ldr	r3, [pc, #180]	; (80030e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d118      	bne.n	8003068 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003036:	4b2a      	ldr	r3, [pc, #168]	; (80030e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d107      	bne.n	8003052 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003042:	4b27      	ldr	r3, [pc, #156]	; (80030e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	e005      	b.n	800305e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003052:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800305e:	4a21      	ldr	r2, [pc, #132]	; (80030e4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003066:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003068:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d002      	beq.n	800307e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003078:	2b03      	cmp	r3, #3
 800307a:	d003      	beq.n	8003084 <RCC_GetSysClockFreqFromPLLSource+0x64>
 800307c:	e005      	b.n	800308a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003080:	613b      	str	r3, [r7, #16]
    break;
 8003082:	e005      	b.n	8003090 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003084:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003086:	613b      	str	r3, [r7, #16]
    break;
 8003088:	e002      	b.n	8003090 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	613b      	str	r3, [r7, #16]
    break;
 800308e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003090:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	3301      	adds	r3, #1
 800309c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800309e:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	0a1b      	lsrs	r3, r3, #8
 80030a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	fb02 f203 	mul.w	r2, r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	0e5b      	lsrs	r3, r3, #25
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	3301      	adds	r3, #1
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ce:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80030d0:	683b      	ldr	r3, [r7, #0]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40021000 	.word	0x40021000
 80030e4:	080071bc 	.word	0x080071bc
 80030e8:	00f42400 	.word	0x00f42400

080030ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030f4:	2300      	movs	r3, #0
 80030f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030f8:	2300      	movs	r3, #0
 80030fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003104:	2b00      	cmp	r3, #0
 8003106:	d03d      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d00b      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003110:	2b40      	cmp	r3, #64	; 0x40
 8003112:	d804      	bhi.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00e      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003118:	2b20      	cmp	r3, #32
 800311a:	d015      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800311c:	e01d      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800311e:	2b60      	cmp	r3, #96	; 0x60
 8003120:	d01e      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003122:	2b80      	cmp	r3, #128	; 0x80
 8003124:	d01c      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003126:	e018      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003128:	4b86      	ldr	r3, [pc, #536]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a85      	ldr	r2, [pc, #532]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800312e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003132:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003134:	e015      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	2100      	movs	r1, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fb5d 	bl	80037fc <RCCEx_PLLSAI1_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003146:	e00c      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3320      	adds	r3, #32
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fc44 	bl	80039dc <RCCEx_PLLSAI2_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003158:	e003      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	74fb      	strb	r3, [r7, #19]
      break;
 800315e:	e000      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10b      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003168:	4b76      	ldr	r3, [pc, #472]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800316a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800316e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003176:	4973      	ldr	r1, [pc, #460]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800317e:	e001      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	7cfb      	ldrb	r3, [r7, #19]
 8003182:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d042      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003198:	d00f      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xce>
 800319a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800319e:	d805      	bhi.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d011      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80031a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a8:	d017      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xee>
 80031aa:	e01f      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x100>
 80031ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031b0:	d01f      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b6:	d01c      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031b8:	e018      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031ba:	4b62      	ldr	r3, [pc, #392]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	4a61      	ldr	r2, [pc, #388]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031c6:	e015      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3304      	adds	r3, #4
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fb14 	bl	80037fc <RCCEx_PLLSAI1_Config>
 80031d4:	4603      	mov	r3, r0
 80031d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031d8:	e00c      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3320      	adds	r3, #32
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fbfb 	bl	80039dc <RCCEx_PLLSAI2_Config>
 80031e6:	4603      	mov	r3, r0
 80031e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031ea:	e003      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	74fb      	strb	r3, [r7, #19]
      break;
 80031f0:	e000      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80031f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031f4:	7cfb      	ldrb	r3, [r7, #19]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10b      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031fa:	4b52      	ldr	r3, [pc, #328]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	494e      	ldr	r1, [pc, #312]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003210:	e001      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 809f 	beq.w	8003362 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003224:	2300      	movs	r3, #0
 8003226:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003228:	4b46      	ldr	r3, [pc, #280]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800322a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003238:	2300      	movs	r3, #0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00d      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	4b41      	ldr	r3, [pc, #260]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	4a40      	ldr	r2, [pc, #256]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003248:	6593      	str	r3, [r2, #88]	; 0x58
 800324a:	4b3e      	ldr	r3, [pc, #248]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003256:	2301      	movs	r3, #1
 8003258:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a3a      	ldr	r2, [pc, #232]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003264:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003266:	f7fe fced 	bl	8001c44 <HAL_GetTick>
 800326a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800326c:	e009      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326e:	f7fe fce9 	bl	8001c44 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d902      	bls.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	74fb      	strb	r3, [r7, #19]
        break;
 8003280:	e005      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003282:	4b31      	ldr	r3, [pc, #196]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ef      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d15b      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003294:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d01f      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d019      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032b2:	4b24      	ldr	r3, [pc, #144]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032be:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c4:	4a1f      	ldr	r2, [pc, #124]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ce:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d4:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032de:	4a19      	ldr	r2, [pc, #100]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d016      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fe fca8 	bl	8001c44 <HAL_GetTick>
 80032f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f6:	e00b      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f8:	f7fe fca4 	bl	8001c44 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	; 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d902      	bls.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	74fb      	strb	r3, [r7, #19]
            break;
 800330e:	e006      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0ec      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800331e:	7cfb      	ldrb	r3, [r7, #19]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10c      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003324:	4b07      	ldr	r3, [pc, #28]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003334:	4903      	ldr	r1, [pc, #12]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800333c:	e008      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800333e:	7cfb      	ldrb	r3, [r7, #19]
 8003340:	74bb      	strb	r3, [r7, #18]
 8003342:	e005      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003344:	40021000 	.word	0x40021000
 8003348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003350:	7c7b      	ldrb	r3, [r7, #17]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d105      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003356:	4ba0      	ldr	r3, [pc, #640]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	4a9f      	ldr	r2, [pc, #636]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003360:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800336e:	4b9a      	ldr	r3, [pc, #616]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003374:	f023 0203 	bic.w	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337c:	4996      	ldr	r1, [pc, #600]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003390:	4b91      	ldr	r3, [pc, #580]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	f023 020c 	bic.w	r2, r3, #12
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	498e      	ldr	r1, [pc, #568]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033b2:	4b89      	ldr	r3, [pc, #548]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c0:	4985      	ldr	r1, [pc, #532]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033d4:	4b80      	ldr	r3, [pc, #512]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e2:	497d      	ldr	r1, [pc, #500]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033f6:	4b78      	ldr	r3, [pc, #480]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003404:	4974      	ldr	r1, [pc, #464]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003418:	4b6f      	ldr	r3, [pc, #444]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003426:	496c      	ldr	r1, [pc, #432]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800343a:	4b67      	ldr	r3, [pc, #412]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003448:	4963      	ldr	r1, [pc, #396]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800345c:	4b5e      	ldr	r3, [pc, #376]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800346a:	495b      	ldr	r1, [pc, #364]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800347e:	4b56      	ldr	r3, [pc, #344]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348c:	4952      	ldr	r1, [pc, #328]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034a0:	4b4d      	ldr	r3, [pc, #308]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	494a      	ldr	r1, [pc, #296]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034c2:	4b45      	ldr	r3, [pc, #276]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d0:	4941      	ldr	r1, [pc, #260]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034e4:	4b3c      	ldr	r3, [pc, #240]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ea:	f023 0203 	bic.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f2:	4939      	ldr	r1, [pc, #228]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d028      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003506:	4b34      	ldr	r3, [pc, #208]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003514:	4930      	ldr	r1, [pc, #192]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003524:	d106      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003526:	4b2c      	ldr	r3, [pc, #176]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	4a2b      	ldr	r2, [pc, #172]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003530:	60d3      	str	r3, [r2, #12]
 8003532:	e011      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800353c:	d10c      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	2101      	movs	r1, #1
 8003544:	4618      	mov	r0, r3
 8003546:	f000 f959 	bl	80037fc <RCCEx_PLLSAI1_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d04d      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800356c:	d108      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800356e:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003570:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003574:	4a18      	ldr	r2, [pc, #96]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800357a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800357e:	e012      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003580:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003586:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800358c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800359e:	490e      	ldr	r1, [pc, #56]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ae:	d106      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035b0:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ba:	60d3      	str	r3, [r2, #12]
 80035bc:	e020      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035c6:	d109      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035c8:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4a02      	ldr	r2, [pc, #8]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d2:	60d3      	str	r3, [r2, #12]
 80035d4:	e014      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035e4:	d10c      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3304      	adds	r3, #4
 80035ea:	2101      	movs	r1, #1
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 f905 	bl	80037fc <RCCEx_PLLSAI1_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035f6:	7cfb      	ldrb	r3, [r7, #19]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d028      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800360c:	4b7a      	ldr	r3, [pc, #488]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800361a:	4977      	ldr	r1, [pc, #476]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800362a:	d106      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800362c:	4b72      	ldr	r3, [pc, #456]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a71      	ldr	r2, [pc, #452]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003636:	60d3      	str	r3, [r2, #12]
 8003638:	e011      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800363e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003642:	d10c      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	2101      	movs	r1, #1
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f8d6 	bl	80037fc <RCCEx_PLLSAI1_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d01e      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800366a:	4b63      	ldr	r3, [pc, #396]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367a:	495f      	ldr	r1, [pc, #380]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003688:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800368c:	d10c      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3304      	adds	r3, #4
 8003692:	2102      	movs	r1, #2
 8003694:	4618      	mov	r0, r3
 8003696:	f000 f8b1 	bl	80037fc <RCCEx_PLLSAI1_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036b4:	4b50      	ldr	r3, [pc, #320]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80036b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ba:	f023 0204 	bic.w	r2, r3, #4
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c4:	494c      	ldr	r1, [pc, #304]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00b      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036d8:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80036da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036de:	f023 0218 	bic.w	r2, r3, #24
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e8:	4943      	ldr	r1, [pc, #268]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d035      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036fc:	4b3e      	ldr	r3, [pc, #248]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a3d      	ldr	r2, [pc, #244]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003708:	f7fe fa9c 	bl	8001c44 <HAL_GetTick>
 800370c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800370e:	e009      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003710:	f7fe fa98 	bl	8001c44 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d902      	bls.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	74fb      	strb	r3, [r7, #19]
        break;
 8003722:	e005      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003724:	4b34      	ldr	r3, [pc, #208]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ef      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d113      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003736:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003738:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800373c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003746:	492c      	ldr	r1, [pc, #176]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3320      	adds	r3, #32
 8003752:	2102      	movs	r1, #2
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f941 	bl	80039dc <RCCEx_PLLSAI2_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01e      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003774:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003776:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800377a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	491c      	ldr	r1, [pc, #112]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003796:	d10c      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3320      	adds	r3, #32
 800379c:	2101      	movs	r1, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 f91c 	bl	80039dc <RCCEx_PLLSAI2_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      {
        /* set overall return value */
        status = ret;
 80037ae:	7cfb      	ldrb	r3, [r7, #19]
 80037b0:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d017      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80037be:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80037c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ce:	490a      	ldr	r1, [pc, #40]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037e0:	d105      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x702>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80037e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ec:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40021000 	.word	0x40021000

080037fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800380a:	4b70      	ldr	r3, [pc, #448]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00e      	beq.n	8003834 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003816:	4b6d      	ldr	r3, [pc, #436]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0203 	and.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d103      	bne.n	800382e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
       ||
 800382a:	2b00      	cmp	r3, #0
 800382c:	d13f      	bne.n	80038ae <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	e03c      	b.n	80038ae <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d00c      	beq.n	8003856 <RCCEx_PLLSAI1_Config+0x5a>
 800383c:	2b03      	cmp	r3, #3
 800383e:	d013      	beq.n	8003868 <RCCEx_PLLSAI1_Config+0x6c>
 8003840:	2b01      	cmp	r3, #1
 8003842:	d120      	bne.n	8003886 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003844:	4b61      	ldr	r3, [pc, #388]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11d      	bne.n	800388c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003854:	e01a      	b.n	800388c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003856:	4b5d      	ldr	r3, [pc, #372]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385e:	2b00      	cmp	r3, #0
 8003860:	d116      	bne.n	8003890 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003866:	e013      	b.n	8003890 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003868:	4b58      	ldr	r3, [pc, #352]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10f      	bne.n	8003894 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003874:	4b55      	ldr	r3, [pc, #340]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003884:	e006      	b.n	8003894 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]
      break;
 800388a:	e004      	b.n	8003896 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800388c:	bf00      	nop
 800388e:	e002      	b.n	8003896 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003890:	bf00      	nop
 8003892:	e000      	b.n	8003896 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003894:	bf00      	nop
    }

    if(status == HAL_OK)
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d108      	bne.n	80038ae <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800389c:	4b4b      	ldr	r3, [pc, #300]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f023 0203 	bic.w	r2, r3, #3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4948      	ldr	r1, [pc, #288]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f040 8086 	bne.w	80039c2 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038b6:	4b45      	ldr	r3, [pc, #276]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a44      	ldr	r2, [pc, #272]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80038bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c2:	f7fe f9bf 	bl	8001c44 <HAL_GetTick>
 80038c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038c8:	e009      	b.n	80038de <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ca:	f7fe f9bb 	bl	8001c44 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d902      	bls.n	80038de <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	73fb      	strb	r3, [r7, #15]
        break;
 80038dc:	e005      	b.n	80038ea <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038de:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ef      	bne.n	80038ca <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d168      	bne.n	80039c2 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d113      	bne.n	800391e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038f6:	4b35      	ldr	r3, [pc, #212]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	4b35      	ldr	r3, [pc, #212]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1d4>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6892      	ldr	r2, [r2, #8]
 8003902:	0211      	lsls	r1, r2, #8
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	68d2      	ldr	r2, [r2, #12]
 8003908:	06d2      	lsls	r2, r2, #27
 800390a:	4311      	orrs	r1, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6852      	ldr	r2, [r2, #4]
 8003910:	3a01      	subs	r2, #1
 8003912:	0112      	lsls	r2, r2, #4
 8003914:	430a      	orrs	r2, r1
 8003916:	492d      	ldr	r1, [pc, #180]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003918:	4313      	orrs	r3, r2
 800391a:	610b      	str	r3, [r1, #16]
 800391c:	e02d      	b.n	800397a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d115      	bne.n	8003950 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003924:	4b29      	ldr	r3, [pc, #164]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800392a:	4013      	ands	r3, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6892      	ldr	r2, [r2, #8]
 8003930:	0211      	lsls	r1, r2, #8
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6912      	ldr	r2, [r2, #16]
 8003936:	0852      	lsrs	r2, r2, #1
 8003938:	3a01      	subs	r2, #1
 800393a:	0552      	lsls	r2, r2, #21
 800393c:	4311      	orrs	r1, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6852      	ldr	r2, [r2, #4]
 8003942:	3a01      	subs	r2, #1
 8003944:	0112      	lsls	r2, r2, #4
 8003946:	430a      	orrs	r2, r1
 8003948:	4920      	ldr	r1, [pc, #128]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 800394a:	4313      	orrs	r3, r2
 800394c:	610b      	str	r3, [r1, #16]
 800394e:	e014      	b.n	800397a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003950:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003956:	4013      	ands	r3, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6892      	ldr	r2, [r2, #8]
 800395c:	0211      	lsls	r1, r2, #8
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6952      	ldr	r2, [r2, #20]
 8003962:	0852      	lsrs	r2, r2, #1
 8003964:	3a01      	subs	r2, #1
 8003966:	0652      	lsls	r2, r2, #25
 8003968:	4311      	orrs	r1, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6852      	ldr	r2, [r2, #4]
 800396e:	3a01      	subs	r2, #1
 8003970:	0112      	lsls	r2, r2, #4
 8003972:	430a      	orrs	r2, r1
 8003974:	4915      	ldr	r1, [pc, #84]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003976:	4313      	orrs	r3, r2
 8003978:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a13      	ldr	r2, [pc, #76]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003980:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003984:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7fe f95d 	bl	8001c44 <HAL_GetTick>
 800398a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800398c:	e009      	b.n	80039a2 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800398e:	f7fe f959 	bl	8001c44 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d902      	bls.n	80039a2 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	73fb      	strb	r3, [r7, #15]
          break;
 80039a0:	e005      	b.n	80039ae <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039a2:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0ef      	beq.n	800398e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	4903      	ldr	r1, [pc, #12]	; (80039cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000
 80039d0:	07ff800f 	.word	0x07ff800f
 80039d4:	ff9f800f 	.word	0xff9f800f
 80039d8:	f9ff800f 	.word	0xf9ff800f

080039dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039ea:	4b70      	ldr	r3, [pc, #448]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00e      	beq.n	8003a14 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039f6:	4b6d      	ldr	r3, [pc, #436]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0203 	and.w	r2, r3, #3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d103      	bne.n	8003a0e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
       ||
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d13f      	bne.n	8003a8e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	e03c      	b.n	8003a8e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d00c      	beq.n	8003a36 <RCCEx_PLLSAI2_Config+0x5a>
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d013      	beq.n	8003a48 <RCCEx_PLLSAI2_Config+0x6c>
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d120      	bne.n	8003a66 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a24:	4b61      	ldr	r3, [pc, #388]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d11d      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a34:	e01a      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a36:	4b5d      	ldr	r3, [pc, #372]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d116      	bne.n	8003a70 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a46:	e013      	b.n	8003a70 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a48:	4b58      	ldr	r3, [pc, #352]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10f      	bne.n	8003a74 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a54:	4b55      	ldr	r3, [pc, #340]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d109      	bne.n	8003a74 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a64:	e006      	b.n	8003a74 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
      break;
 8003a6a:	e004      	b.n	8003a76 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003a6c:	bf00      	nop
 8003a6e:	e002      	b.n	8003a76 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003a70:	bf00      	nop
 8003a72:	e000      	b.n	8003a76 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003a74:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d108      	bne.n	8003a8e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003a7c:	4b4b      	ldr	r3, [pc, #300]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f023 0203 	bic.w	r2, r3, #3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4948      	ldr	r1, [pc, #288]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f040 8086 	bne.w	8003ba2 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a96:	4b45      	ldr	r3, [pc, #276]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a44      	ldr	r2, [pc, #272]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa2:	f7fe f8cf 	bl	8001c44 <HAL_GetTick>
 8003aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aa8:	e009      	b.n	8003abe <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aaa:	f7fe f8cb 	bl	8001c44 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d902      	bls.n	8003abe <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	73fb      	strb	r3, [r7, #15]
        break;
 8003abc:	e005      	b.n	8003aca <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003abe:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1ef      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d168      	bne.n	8003ba2 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d113      	bne.n	8003afe <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ad6:	4b35      	ldr	r3, [pc, #212]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	4b35      	ldr	r3, [pc, #212]	; (8003bb0 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6892      	ldr	r2, [r2, #8]
 8003ae2:	0211      	lsls	r1, r2, #8
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	68d2      	ldr	r2, [r2, #12]
 8003ae8:	06d2      	lsls	r2, r2, #27
 8003aea:	4311      	orrs	r1, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6852      	ldr	r2, [r2, #4]
 8003af0:	3a01      	subs	r2, #1
 8003af2:	0112      	lsls	r2, r2, #4
 8003af4:	430a      	orrs	r2, r1
 8003af6:	492d      	ldr	r1, [pc, #180]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	614b      	str	r3, [r1, #20]
 8003afc:	e02d      	b.n	8003b5a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d115      	bne.n	8003b30 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b04:	4b29      	ldr	r3, [pc, #164]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	4b2a      	ldr	r3, [pc, #168]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6892      	ldr	r2, [r2, #8]
 8003b10:	0211      	lsls	r1, r2, #8
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6912      	ldr	r2, [r2, #16]
 8003b16:	0852      	lsrs	r2, r2, #1
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	0552      	lsls	r2, r2, #21
 8003b1c:	4311      	orrs	r1, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6852      	ldr	r2, [r2, #4]
 8003b22:	3a01      	subs	r2, #1
 8003b24:	0112      	lsls	r2, r2, #4
 8003b26:	430a      	orrs	r2, r1
 8003b28:	4920      	ldr	r1, [pc, #128]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	614b      	str	r3, [r1, #20]
 8003b2e:	e014      	b.n	8003b5a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b30:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6892      	ldr	r2, [r2, #8]
 8003b3c:	0211      	lsls	r1, r2, #8
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6952      	ldr	r2, [r2, #20]
 8003b42:	0852      	lsrs	r2, r2, #1
 8003b44:	3a01      	subs	r2, #1
 8003b46:	0652      	lsls	r2, r2, #25
 8003b48:	4311      	orrs	r1, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6852      	ldr	r2, [r2, #4]
 8003b4e:	3a01      	subs	r2, #1
 8003b50:	0112      	lsls	r2, r2, #4
 8003b52:	430a      	orrs	r2, r1
 8003b54:	4915      	ldr	r1, [pc, #84]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b5a:	4b14      	ldr	r3, [pc, #80]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a13      	ldr	r2, [pc, #76]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b66:	f7fe f86d 	bl	8001c44 <HAL_GetTick>
 8003b6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b6c:	e009      	b.n	8003b82 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b6e:	f7fe f869 	bl	8001c44 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d902      	bls.n	8003b82 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	73fb      	strb	r3, [r7, #15]
          break;
 8003b80:	e005      	b.n	8003b8e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0ef      	beq.n	8003b6e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d106      	bne.n	8003ba2 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	4903      	ldr	r1, [pc, #12]	; (8003bac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	07ff800f 	.word	0x07ff800f
 8003bb4:	ff9f800f 	.word	0xff9f800f
 8003bb8:	f9ff800f 	.word	0xf9ff800f

08003bbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e07c      	b.n	8003cc8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7fd fe67 	bl	80018bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c04:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c0e:	d902      	bls.n	8003c16 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e002      	b.n	8003c1c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c1a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c24:	d007      	beq.n	8003c36 <HAL_SPI_Init+0x7a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c2e:	d002      	beq.n	8003c36 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10b      	bne.n	8003c56 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c46:	d903      	bls.n	8003c50 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c4e:	e002      	b.n	8003c56 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	ea42 0103 	orr.w	r1, r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	f003 0204 	and.w	r2, r3, #4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	ea42 0103 	orr.w	r1, r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_SPI_Transmit+0x22>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e150      	b.n	8003f94 <HAL_SPI_Transmit+0x2c4>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cfa:	f7fd ffa3 	bl	8001c44 <HAL_GetTick>
 8003cfe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d00:	88fb      	ldrh	r3, [r7, #6]
 8003d02:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d002      	beq.n	8003d16 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
 8003d12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d14:	e135      	b.n	8003f82 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_SPI_Transmit+0x52>
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d102      	bne.n	8003d28 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d26:	e12c      	b.n	8003f82 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	88fa      	ldrh	r2, [r7, #6]
 8003d40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	88fa      	ldrh	r2, [r7, #6]
 8003d46:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d72:	d107      	bne.n	8003d84 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d007      	beq.n	8003da2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003daa:	d94b      	bls.n	8003e44 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_SPI_Transmit+0xea>
 8003db4:	8afb      	ldrh	r3, [r7, #22]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d13e      	bne.n	8003e38 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	1c9a      	adds	r2, r3, #2
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dde:	e02b      	b.n	8003e38 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d112      	bne.n	8003e14 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	881a      	ldrh	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	1c9a      	adds	r2, r3, #2
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e12:	e011      	b.n	8003e38 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e14:	f7fd ff16 	bl	8001c44 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d803      	bhi.n	8003e2c <HAL_SPI_Transmit+0x15c>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	d102      	bne.n	8003e32 <HAL_SPI_Transmit+0x162>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e36:	e0a4      	b.n	8003f82 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1ce      	bne.n	8003de0 <HAL_SPI_Transmit+0x110>
 8003e42:	e07c      	b.n	8003f3e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_SPI_Transmit+0x182>
 8003e4c:	8afb      	ldrh	r3, [r7, #22]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d170      	bne.n	8003f34 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d912      	bls.n	8003e82 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	881a      	ldrh	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	1c9a      	adds	r2, r3, #2
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b02      	subs	r3, #2
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e80:	e058      	b.n	8003f34 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	330c      	adds	r3, #12
 8003e8c:	7812      	ldrb	r2, [r2, #0]
 8003e8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ea8:	e044      	b.n	8003f34 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d12b      	bne.n	8003f10 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d912      	bls.n	8003ee8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	881a      	ldrh	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	1c9a      	adds	r2, r3, #2
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b02      	subs	r3, #2
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ee6:	e025      	b.n	8003f34 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	7812      	ldrb	r2, [r2, #0]
 8003ef4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f0e:	e011      	b.n	8003f34 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f10:	f7fd fe98 	bl	8001c44 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d803      	bhi.n	8003f28 <HAL_SPI_Transmit+0x258>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d102      	bne.n	8003f2e <HAL_SPI_Transmit+0x25e>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d102      	bne.n	8003f34 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f32:	e026      	b.n	8003f82 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1b5      	bne.n	8003eaa <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	6839      	ldr	r1, [r7, #0]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fc94 	bl	8004870 <SPI_EndRxTxTransaction>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	77fb      	strb	r3, [r7, #31]
 8003f7e:	e000      	b.n	8003f82 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003f80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f92:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb8:	d112      	bne.n	8003fe0 <HAL_SPI_Receive+0x44>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10e      	bne.n	8003fe0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003fca:	88fa      	ldrh	r2, [r7, #6]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f908 	bl	80041ec <HAL_SPI_TransmitReceive>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	e101      	b.n	80041e4 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_SPI_Receive+0x52>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e0fa      	b.n	80041e4 <HAL_SPI_Receive+0x248>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ff6:	f7fd fe25 	bl	8001c44 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d002      	beq.n	800400e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004008:	2302      	movs	r3, #2
 800400a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800400c:	e0e1      	b.n	80041d2 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_SPI_Receive+0x7e>
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800401e:	e0d8      	b.n	80041d2 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2204      	movs	r2, #4
 8004024:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	88fa      	ldrh	r2, [r7, #6]
 8004038:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	88fa      	ldrh	r2, [r7, #6]
 8004040:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800406a:	d908      	bls.n	800407e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	e007      	b.n	800408e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800408c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004096:	d107      	bne.n	80040a8 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	d007      	beq.n	80040c6 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040ce:	d867      	bhi.n	80041a0 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80040d0:	e030      	b.n	8004134 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d117      	bne.n	8004110 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f103 020c 	add.w	r2, r3, #12
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	7812      	ldrb	r2, [r2, #0]
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800410e:	e011      	b.n	8004134 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004110:	f7fd fd98 	bl	8001c44 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d803      	bhi.n	8004128 <HAL_SPI_Receive+0x18c>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004126:	d102      	bne.n	800412e <HAL_SPI_Receive+0x192>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d102      	bne.n	8004134 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004132:	e04e      	b.n	80041d2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1c8      	bne.n	80040d2 <HAL_SPI_Receive+0x136>
 8004140:	e034      	b.n	80041ac <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b01      	cmp	r3, #1
 800414e:	d115      	bne.n	800417c <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	b292      	uxth	r2, r2
 800415c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	1c9a      	adds	r2, r3, #2
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800417a:	e011      	b.n	80041a0 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800417c:	f7fd fd62 	bl	8001c44 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d803      	bhi.n	8004194 <HAL_SPI_Receive+0x1f8>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004192:	d102      	bne.n	800419a <HAL_SPI_Receive+0x1fe>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800419e:	e018      	b.n	80041d2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1ca      	bne.n	8004142 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	6839      	ldr	r1, [r7, #0]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fb05 	bl	80047c0 <SPI_EndRxTransaction>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	75fb      	strb	r3, [r7, #23]
 80041ce:	e000      	b.n	80041d2 <HAL_SPI_Receive+0x236>
  }

error :
 80041d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	; 0x28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041fa:	2301      	movs	r3, #1
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_SPI_TransmitReceive+0x26>
 800420e:	2302      	movs	r3, #2
 8004210:	e1fb      	b.n	800460a <HAL_SPI_TransmitReceive+0x41e>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800421a:	f7fd fd13 	bl	8001c44 <HAL_GetTick>
 800421e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004226:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800422e:	887b      	ldrh	r3, [r7, #2]
 8004230:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004236:	7efb      	ldrb	r3, [r7, #27]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d00e      	beq.n	800425a <HAL_SPI_TransmitReceive+0x6e>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004242:	d106      	bne.n	8004252 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d102      	bne.n	8004252 <HAL_SPI_TransmitReceive+0x66>
 800424c:	7efb      	ldrb	r3, [r7, #27]
 800424e:	2b04      	cmp	r3, #4
 8004250:	d003      	beq.n	800425a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004252:	2302      	movs	r3, #2
 8004254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004258:	e1cd      	b.n	80045f6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_SPI_TransmitReceive+0x80>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_SPI_TransmitReceive+0x80>
 8004266:	887b      	ldrh	r3, [r7, #2]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d103      	bne.n	8004274 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004272:	e1c0      	b.n	80045f6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b04      	cmp	r3, #4
 800427e:	d003      	beq.n	8004288 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2205      	movs	r2, #5
 8004284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	887a      	ldrh	r2, [r7, #2]
 8004298:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	887a      	ldrh	r2, [r7, #2]
 80042a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	887a      	ldrh	r2, [r7, #2]
 80042ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	887a      	ldrh	r2, [r7, #2]
 80042b4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042ca:	d802      	bhi.n	80042d2 <HAL_SPI_TransmitReceive+0xe6>
 80042cc:	8a3b      	ldrh	r3, [r7, #16]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d908      	bls.n	80042e4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042e0:	605a      	str	r2, [r3, #4]
 80042e2:	e007      	b.n	80042f4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042f2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b40      	cmp	r3, #64	; 0x40
 8004300:	d007      	beq.n	8004312 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004310:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800431a:	d97c      	bls.n	8004416 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <HAL_SPI_TransmitReceive+0x13e>
 8004324:	8a7b      	ldrh	r3, [r7, #18]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d169      	bne.n	80043fe <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	881a      	ldrh	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433a:	1c9a      	adds	r2, r3, #2
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800434e:	e056      	b.n	80043fe <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b02      	cmp	r3, #2
 800435c:	d11b      	bne.n	8004396 <HAL_SPI_TransmitReceive+0x1aa>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d016      	beq.n	8004396 <HAL_SPI_TransmitReceive+0x1aa>
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	2b01      	cmp	r3, #1
 800436c:	d113      	bne.n	8004396 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	881a      	ldrh	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	1c9a      	adds	r2, r3, #2
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d11c      	bne.n	80043de <HAL_SPI_TransmitReceive+0x1f2>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d016      	beq.n	80043de <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	b292      	uxth	r2, r2
 80043bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	1c9a      	adds	r2, r3, #2
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043da:	2301      	movs	r3, #1
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043de:	f7fd fc31 	bl	8001c44 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d807      	bhi.n	80043fe <HAL_SPI_TransmitReceive+0x212>
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d003      	beq.n	80043fe <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043fc:	e0fb      	b.n	80045f6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1a3      	bne.n	8004350 <HAL_SPI_TransmitReceive+0x164>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d19d      	bne.n	8004350 <HAL_SPI_TransmitReceive+0x164>
 8004414:	e0df      	b.n	80045d6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_SPI_TransmitReceive+0x23a>
 800441e:	8a7b      	ldrh	r3, [r7, #18]
 8004420:	2b01      	cmp	r3, #1
 8004422:	f040 80cb 	bne.w	80045bc <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	d912      	bls.n	8004456 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	881a      	ldrh	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	1c9a      	adds	r2, r3, #2
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b02      	subs	r3, #2
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004454:	e0b2      	b.n	80045bc <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	330c      	adds	r3, #12
 8004460:	7812      	ldrb	r2, [r2, #0]
 8004462:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800447c:	e09e      	b.n	80045bc <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b02      	cmp	r3, #2
 800448a:	d134      	bne.n	80044f6 <HAL_SPI_TransmitReceive+0x30a>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d02f      	beq.n	80044f6 <HAL_SPI_TransmitReceive+0x30a>
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	2b01      	cmp	r3, #1
 800449a:	d12c      	bne.n	80044f6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d912      	bls.n	80044cc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	881a      	ldrh	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	1c9a      	adds	r2, r3, #2
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b02      	subs	r3, #2
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044ca:	e012      	b.n	80044f2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	7812      	ldrb	r2, [r2, #0]
 80044d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b01      	cmp	r3, #1
 8004502:	d148      	bne.n	8004596 <HAL_SPI_TransmitReceive+0x3aa>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d042      	beq.n	8004596 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	d923      	bls.n	8004564 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	b292      	uxth	r2, r2
 8004528:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	1c9a      	adds	r2, r3, #2
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b02      	subs	r3, #2
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b01      	cmp	r3, #1
 8004550:	d81f      	bhi.n	8004592 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004560:	605a      	str	r2, [r3, #4]
 8004562:	e016      	b.n	8004592 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f103 020c 	add.w	r2, r3, #12
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	7812      	ldrb	r2, [r2, #0]
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004592:	2301      	movs	r3, #1
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004596:	f7fd fb55 	bl	8001c44 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d803      	bhi.n	80045ae <HAL_SPI_TransmitReceive+0x3c2>
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d102      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x3c8>
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d103      	bne.n	80045bc <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80045ba:	e01c      	b.n	80045f6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f47f af5b 	bne.w	800447e <HAL_SPI_TransmitReceive+0x292>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f47f af54 	bne.w	800447e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f948 	bl	8004870 <SPI_EndRxTxTransaction>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d006      	beq.n	80045f4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	661a      	str	r2, [r3, #96]	; 0x60
 80045f2:	e000      	b.n	80045f6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80045f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800460a:	4618      	mov	r0, r3
 800460c:	3728      	adds	r7, #40	; 0x28
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	4613      	mov	r3, r2
 8004620:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004622:	e04c      	b.n	80046be <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d048      	beq.n	80046be <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800462c:	f7fd fb0a 	bl	8001c44 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d902      	bls.n	8004642 <SPI_WaitFlagStateUntilTimeout+0x30>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d13d      	bne.n	80046be <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004650:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800465a:	d111      	bne.n	8004680 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004664:	d004      	beq.n	8004670 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466e:	d107      	bne.n	8004680 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800467e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004688:	d10f      	bne.n	80046aa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e00f      	b.n	80046de <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4013      	ands	r3, r2
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	bf0c      	ite	eq
 80046ce:	2301      	moveq	r3, #1
 80046d0:	2300      	movne	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d1a3      	bne.n	8004624 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80046f4:	e057      	b.n	80047a6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046fc:	d106      	bne.n	800470c <SPI_WaitFifoStateUntilTimeout+0x26>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d103      	bne.n	800470c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004712:	d048      	beq.n	80047a6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004714:	f7fd fa96 	bl	8001c44 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d902      	bls.n	800472a <SPI_WaitFifoStateUntilTimeout+0x44>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d13d      	bne.n	80047a6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004738:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004742:	d111      	bne.n	8004768 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800474c:	d004      	beq.n	8004758 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004756:	d107      	bne.n	8004768 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004766:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004770:	d10f      	bne.n	8004792 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004790:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e008      	b.n	80047b8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4013      	ands	r3, r2
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d19f      	bne.n	80046f6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d4:	d111      	bne.n	80047fa <SPI_EndRxTransaction+0x3a>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047de:	d004      	beq.n	80047ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e8:	d107      	bne.n	80047fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2200      	movs	r2, #0
 8004802:	2180      	movs	r1, #128	; 0x80
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7ff ff04 	bl	8004612 <SPI_WaitFlagStateUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	f043 0220 	orr.w	r2, r3, #32
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e023      	b.n	8004868 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004828:	d11d      	bne.n	8004866 <SPI_EndRxTransaction+0xa6>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004832:	d004      	beq.n	800483e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483c:	d113      	bne.n	8004866 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2200      	movs	r2, #0
 8004846:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7ff ff4b 	bl	80046e6 <SPI_WaitFifoStateUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485a:	f043 0220 	orr.w	r2, r3, #32
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e000      	b.n	8004868 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2200      	movs	r2, #0
 8004884:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7ff ff2c 	bl	80046e6 <SPI_WaitFifoStateUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004898:	f043 0220 	orr.w	r2, r3, #32
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e027      	b.n	80048f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2200      	movs	r2, #0
 80048ac:	2180      	movs	r1, #128	; 0x80
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f7ff feaf 	bl	8004612 <SPI_WaitFlagStateUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048be:	f043 0220 	orr.w	r2, r3, #32
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e014      	b.n	80048f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f7ff ff05 	bl	80046e6 <SPI_WaitFifoStateUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e000      	b.n	80048f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e042      	b.n	8004994 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7fd f80f 	bl	8001944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2224      	movs	r2, #36	; 0x24
 800492a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0201 	bic.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8c6 	bl	8004ad0 <UART_SetConfig>
 8004944:	4603      	mov	r3, r0
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e022      	b.n	8004994 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f001 faa8 	bl	8005eac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800496a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800497a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f001 fb2f 	bl	8005ff0 <UART_CheckIdleState>
 8004992:	4603      	mov	r3, r0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	; 0x28
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	f040 8084 	bne.w	8004ac0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <HAL_UART_Transmit+0x28>
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e07c      	b.n	8004ac2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_UART_Transmit+0x3a>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e075      	b.n	8004ac2 <HAL_UART_Transmit+0x126>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2221      	movs	r2, #33	; 0x21
 80049ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80049ee:	f7fd f929 	bl	8001c44 <HAL_GetTick>
 80049f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	88fa      	ldrh	r2, [r7, #6]
 80049f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0c:	d108      	bne.n	8004a20 <HAL_UART_Transmit+0x84>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	e003      	b.n	8004a28 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004a30:	e02d      	b.n	8004a8e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2180      	movs	r1, #128	; 0x80
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f001 fb1f 	bl	8006080 <UART_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e03a      	b.n	8004ac2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10b      	bne.n	8004a6a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	881a      	ldrh	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a5e:	b292      	uxth	r2, r2
 8004a60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	3302      	adds	r3, #2
 8004a66:	61bb      	str	r3, [r7, #24]
 8004a68:	e008      	b.n	8004a7c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	781a      	ldrb	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	b292      	uxth	r2, r2
 8004a74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1cb      	bne.n	8004a32 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2140      	movs	r1, #64	; 0x40
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f001 faeb 	bl	8006080 <UART_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e006      	b.n	8004ac2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	e000      	b.n	8004ac2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004ac0:	2302      	movs	r3, #2
  }
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	0000      	movs	r0, r0
 8004acc:	0000      	movs	r0, r0
	...

08004ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004ad4:	b08a      	sub	sp, #40	; 0x28
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b04:	4313      	orrs	r3, r2
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4baa      	ldr	r3, [pc, #680]	; (8004db8 <UART_SetConfig+0x2e8>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a9f      	ldr	r2, [pc, #636]	; (8004dbc <UART_SetConfig+0x2ec>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d004      	beq.n	8004b4c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6812      	ldr	r2, [r2, #0]
 8004b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	f023 010f 	bic.w	r1, r3, #15
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a90      	ldr	r2, [pc, #576]	; (8004dc0 <UART_SetConfig+0x2f0>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d126      	bne.n	8004bd2 <UART_SetConfig+0x102>
 8004b84:	4b8f      	ldr	r3, [pc, #572]	; (8004dc4 <UART_SetConfig+0x2f4>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d81a      	bhi.n	8004bc8 <UART_SetConfig+0xf8>
 8004b92:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <UART_SetConfig+0xc8>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004ba9 	.word	0x08004ba9
 8004b9c:	08004bb9 	.word	0x08004bb9
 8004ba0:	08004bb1 	.word	0x08004bb1
 8004ba4:	08004bc1 	.word	0x08004bc1
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bae:	e116      	b.n	8004dde <UART_SetConfig+0x30e>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb6:	e112      	b.n	8004dde <UART_SetConfig+0x30e>
 8004bb8:	2304      	movs	r3, #4
 8004bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bbe:	e10e      	b.n	8004dde <UART_SetConfig+0x30e>
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc6:	e10a      	b.n	8004dde <UART_SetConfig+0x30e>
 8004bc8:	2310      	movs	r3, #16
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bce:	bf00      	nop
 8004bd0:	e105      	b.n	8004dde <UART_SetConfig+0x30e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a7c      	ldr	r2, [pc, #496]	; (8004dc8 <UART_SetConfig+0x2f8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d138      	bne.n	8004c4e <UART_SetConfig+0x17e>
 8004bdc:	4b79      	ldr	r3, [pc, #484]	; (8004dc4 <UART_SetConfig+0x2f4>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b0c      	cmp	r3, #12
 8004be8:	d82c      	bhi.n	8004c44 <UART_SetConfig+0x174>
 8004bea:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <UART_SetConfig+0x120>)
 8004bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf0:	08004c25 	.word	0x08004c25
 8004bf4:	08004c45 	.word	0x08004c45
 8004bf8:	08004c45 	.word	0x08004c45
 8004bfc:	08004c45 	.word	0x08004c45
 8004c00:	08004c35 	.word	0x08004c35
 8004c04:	08004c45 	.word	0x08004c45
 8004c08:	08004c45 	.word	0x08004c45
 8004c0c:	08004c45 	.word	0x08004c45
 8004c10:	08004c2d 	.word	0x08004c2d
 8004c14:	08004c45 	.word	0x08004c45
 8004c18:	08004c45 	.word	0x08004c45
 8004c1c:	08004c45 	.word	0x08004c45
 8004c20:	08004c3d 	.word	0x08004c3d
 8004c24:	2300      	movs	r3, #0
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2a:	e0d8      	b.n	8004dde <UART_SetConfig+0x30e>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c32:	e0d4      	b.n	8004dde <UART_SetConfig+0x30e>
 8004c34:	2304      	movs	r3, #4
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3a:	e0d0      	b.n	8004dde <UART_SetConfig+0x30e>
 8004c3c:	2308      	movs	r3, #8
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c42:	e0cc      	b.n	8004dde <UART_SetConfig+0x30e>
 8004c44:	2310      	movs	r3, #16
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4a:	bf00      	nop
 8004c4c:	e0c7      	b.n	8004dde <UART_SetConfig+0x30e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a5e      	ldr	r2, [pc, #376]	; (8004dcc <UART_SetConfig+0x2fc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d125      	bne.n	8004ca4 <UART_SetConfig+0x1d4>
 8004c58:	4b5a      	ldr	r3, [pc, #360]	; (8004dc4 <UART_SetConfig+0x2f4>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c62:	2b10      	cmp	r3, #16
 8004c64:	d011      	beq.n	8004c8a <UART_SetConfig+0x1ba>
 8004c66:	2b10      	cmp	r3, #16
 8004c68:	d802      	bhi.n	8004c70 <UART_SetConfig+0x1a0>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <UART_SetConfig+0x1aa>
 8004c6e:	e014      	b.n	8004c9a <UART_SetConfig+0x1ca>
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d006      	beq.n	8004c82 <UART_SetConfig+0x1b2>
 8004c74:	2b30      	cmp	r3, #48	; 0x30
 8004c76:	d00c      	beq.n	8004c92 <UART_SetConfig+0x1c2>
 8004c78:	e00f      	b.n	8004c9a <UART_SetConfig+0x1ca>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c80:	e0ad      	b.n	8004dde <UART_SetConfig+0x30e>
 8004c82:	2302      	movs	r3, #2
 8004c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c88:	e0a9      	b.n	8004dde <UART_SetConfig+0x30e>
 8004c8a:	2304      	movs	r3, #4
 8004c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c90:	e0a5      	b.n	8004dde <UART_SetConfig+0x30e>
 8004c92:	2308      	movs	r3, #8
 8004c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c98:	e0a1      	b.n	8004dde <UART_SetConfig+0x30e>
 8004c9a:	2310      	movs	r3, #16
 8004c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca0:	bf00      	nop
 8004ca2:	e09c      	b.n	8004dde <UART_SetConfig+0x30e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a49      	ldr	r2, [pc, #292]	; (8004dd0 <UART_SetConfig+0x300>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d125      	bne.n	8004cfa <UART_SetConfig+0x22a>
 8004cae:	4b45      	ldr	r3, [pc, #276]	; (8004dc4 <UART_SetConfig+0x2f4>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	d011      	beq.n	8004ce0 <UART_SetConfig+0x210>
 8004cbc:	2b40      	cmp	r3, #64	; 0x40
 8004cbe:	d802      	bhi.n	8004cc6 <UART_SetConfig+0x1f6>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <UART_SetConfig+0x200>
 8004cc4:	e014      	b.n	8004cf0 <UART_SetConfig+0x220>
 8004cc6:	2b80      	cmp	r3, #128	; 0x80
 8004cc8:	d006      	beq.n	8004cd8 <UART_SetConfig+0x208>
 8004cca:	2bc0      	cmp	r3, #192	; 0xc0
 8004ccc:	d00c      	beq.n	8004ce8 <UART_SetConfig+0x218>
 8004cce:	e00f      	b.n	8004cf0 <UART_SetConfig+0x220>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd6:	e082      	b.n	8004dde <UART_SetConfig+0x30e>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cde:	e07e      	b.n	8004dde <UART_SetConfig+0x30e>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce6:	e07a      	b.n	8004dde <UART_SetConfig+0x30e>
 8004ce8:	2308      	movs	r3, #8
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cee:	e076      	b.n	8004dde <UART_SetConfig+0x30e>
 8004cf0:	2310      	movs	r3, #16
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf6:	bf00      	nop
 8004cf8:	e071      	b.n	8004dde <UART_SetConfig+0x30e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a35      	ldr	r2, [pc, #212]	; (8004dd4 <UART_SetConfig+0x304>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d129      	bne.n	8004d58 <UART_SetConfig+0x288>
 8004d04:	4b2f      	ldr	r3, [pc, #188]	; (8004dc4 <UART_SetConfig+0x2f4>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d12:	d014      	beq.n	8004d3e <UART_SetConfig+0x26e>
 8004d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d18:	d802      	bhi.n	8004d20 <UART_SetConfig+0x250>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <UART_SetConfig+0x25e>
 8004d1e:	e016      	b.n	8004d4e <UART_SetConfig+0x27e>
 8004d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d24:	d007      	beq.n	8004d36 <UART_SetConfig+0x266>
 8004d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d2a:	d00c      	beq.n	8004d46 <UART_SetConfig+0x276>
 8004d2c:	e00f      	b.n	8004d4e <UART_SetConfig+0x27e>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d34:	e053      	b.n	8004dde <UART_SetConfig+0x30e>
 8004d36:	2302      	movs	r3, #2
 8004d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3c:	e04f      	b.n	8004dde <UART_SetConfig+0x30e>
 8004d3e:	2304      	movs	r3, #4
 8004d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d44:	e04b      	b.n	8004dde <UART_SetConfig+0x30e>
 8004d46:	2308      	movs	r3, #8
 8004d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4c:	e047      	b.n	8004dde <UART_SetConfig+0x30e>
 8004d4e:	2310      	movs	r3, #16
 8004d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d54:	bf00      	nop
 8004d56:	e042      	b.n	8004dde <UART_SetConfig+0x30e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a17      	ldr	r2, [pc, #92]	; (8004dbc <UART_SetConfig+0x2ec>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d13a      	bne.n	8004dd8 <UART_SetConfig+0x308>
 8004d62:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <UART_SetConfig+0x2f4>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d70:	d014      	beq.n	8004d9c <UART_SetConfig+0x2cc>
 8004d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d76:	d802      	bhi.n	8004d7e <UART_SetConfig+0x2ae>
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d007      	beq.n	8004d8c <UART_SetConfig+0x2bc>
 8004d7c:	e016      	b.n	8004dac <UART_SetConfig+0x2dc>
 8004d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d82:	d007      	beq.n	8004d94 <UART_SetConfig+0x2c4>
 8004d84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d88:	d00c      	beq.n	8004da4 <UART_SetConfig+0x2d4>
 8004d8a:	e00f      	b.n	8004dac <UART_SetConfig+0x2dc>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e024      	b.n	8004dde <UART_SetConfig+0x30e>
 8004d94:	2302      	movs	r3, #2
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e020      	b.n	8004dde <UART_SetConfig+0x30e>
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da2:	e01c      	b.n	8004dde <UART_SetConfig+0x30e>
 8004da4:	2308      	movs	r3, #8
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004daa:	e018      	b.n	8004dde <UART_SetConfig+0x30e>
 8004dac:	2310      	movs	r3, #16
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db2:	bf00      	nop
 8004db4:	e013      	b.n	8004dde <UART_SetConfig+0x30e>
 8004db6:	bf00      	nop
 8004db8:	cfff69f3 	.word	0xcfff69f3
 8004dbc:	40008000 	.word	0x40008000
 8004dc0:	40013800 	.word	0x40013800
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	40004400 	.word	0x40004400
 8004dcc:	40004800 	.word	0x40004800
 8004dd0:	40004c00 	.word	0x40004c00
 8004dd4:	40005000 	.word	0x40005000
 8004dd8:	2310      	movs	r3, #16
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a86      	ldr	r2, [pc, #536]	; (8004ffc <UART_SetConfig+0x52c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	f040 8422 	bne.w	800562e <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	f200 8173 	bhi.w	80050da <UART_SetConfig+0x60a>
 8004df4:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <UART_SetConfig+0x32c>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	080050db 	.word	0x080050db
 8004e04:	08004ec3 	.word	0x08004ec3
 8004e08:	080050db 	.word	0x080050db
 8004e0c:	08004f5b 	.word	0x08004f5b
 8004e10:	080050db 	.word	0x080050db
 8004e14:	080050db 	.word	0x080050db
 8004e18:	080050db 	.word	0x080050db
 8004e1c:	0800502d 	.word	0x0800502d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004e20:	f7fe f878 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 8004e24:	4602      	mov	r2, r0
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d044      	beq.n	8004eb8 <UART_SetConfig+0x3e8>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d03e      	beq.n	8004eb4 <UART_SetConfig+0x3e4>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d038      	beq.n	8004eb0 <UART_SetConfig+0x3e0>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d032      	beq.n	8004eac <UART_SetConfig+0x3dc>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d02c      	beq.n	8004ea8 <UART_SetConfig+0x3d8>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	2b05      	cmp	r3, #5
 8004e54:	d026      	beq.n	8004ea4 <UART_SetConfig+0x3d4>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	2b06      	cmp	r3, #6
 8004e5c:	d020      	beq.n	8004ea0 <UART_SetConfig+0x3d0>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2b07      	cmp	r3, #7
 8004e64:	d01a      	beq.n	8004e9c <UART_SetConfig+0x3cc>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d014      	beq.n	8004e98 <UART_SetConfig+0x3c8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	2b09      	cmp	r3, #9
 8004e74:	d00e      	beq.n	8004e94 <UART_SetConfig+0x3c4>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	2b0a      	cmp	r3, #10
 8004e7c:	d008      	beq.n	8004e90 <UART_SetConfig+0x3c0>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	2b0b      	cmp	r3, #11
 8004e84:	d102      	bne.n	8004e8c <UART_SetConfig+0x3bc>
 8004e86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e8a:	e016      	b.n	8004eba <UART_SetConfig+0x3ea>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e014      	b.n	8004eba <UART_SetConfig+0x3ea>
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	e012      	b.n	8004eba <UART_SetConfig+0x3ea>
 8004e94:	2340      	movs	r3, #64	; 0x40
 8004e96:	e010      	b.n	8004eba <UART_SetConfig+0x3ea>
 8004e98:	2320      	movs	r3, #32
 8004e9a:	e00e      	b.n	8004eba <UART_SetConfig+0x3ea>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	e00c      	b.n	8004eba <UART_SetConfig+0x3ea>
 8004ea0:	230c      	movs	r3, #12
 8004ea2:	e00a      	b.n	8004eba <UART_SetConfig+0x3ea>
 8004ea4:	230a      	movs	r3, #10
 8004ea6:	e008      	b.n	8004eba <UART_SetConfig+0x3ea>
 8004ea8:	2308      	movs	r3, #8
 8004eaa:	e006      	b.n	8004eba <UART_SetConfig+0x3ea>
 8004eac:	2306      	movs	r3, #6
 8004eae:	e004      	b.n	8004eba <UART_SetConfig+0x3ea>
 8004eb0:	2304      	movs	r3, #4
 8004eb2:	e002      	b.n	8004eba <UART_SetConfig+0x3ea>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e000      	b.n	8004eba <UART_SetConfig+0x3ea>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebe:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ec0:	e10e      	b.n	80050e0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d044      	beq.n	8004f54 <UART_SetConfig+0x484>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d03e      	beq.n	8004f50 <UART_SetConfig+0x480>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d038      	beq.n	8004f4c <UART_SetConfig+0x47c>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d032      	beq.n	8004f48 <UART_SetConfig+0x478>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d02c      	beq.n	8004f44 <UART_SetConfig+0x474>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	2b05      	cmp	r3, #5
 8004ef0:	d026      	beq.n	8004f40 <UART_SetConfig+0x470>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	2b06      	cmp	r3, #6
 8004ef8:	d020      	beq.n	8004f3c <UART_SetConfig+0x46c>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	2b07      	cmp	r3, #7
 8004f00:	d01a      	beq.n	8004f38 <UART_SetConfig+0x468>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d014      	beq.n	8004f34 <UART_SetConfig+0x464>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	2b09      	cmp	r3, #9
 8004f10:	d00e      	beq.n	8004f30 <UART_SetConfig+0x460>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	2b0a      	cmp	r3, #10
 8004f18:	d008      	beq.n	8004f2c <UART_SetConfig+0x45c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	2b0b      	cmp	r3, #11
 8004f20:	d102      	bne.n	8004f28 <UART_SetConfig+0x458>
 8004f22:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004f26:	e016      	b.n	8004f56 <UART_SetConfig+0x486>
 8004f28:	4b35      	ldr	r3, [pc, #212]	; (8005000 <UART_SetConfig+0x530>)
 8004f2a:	e014      	b.n	8004f56 <UART_SetConfig+0x486>
 8004f2c:	4b35      	ldr	r3, [pc, #212]	; (8005004 <UART_SetConfig+0x534>)
 8004f2e:	e012      	b.n	8004f56 <UART_SetConfig+0x486>
 8004f30:	4b35      	ldr	r3, [pc, #212]	; (8005008 <UART_SetConfig+0x538>)
 8004f32:	e010      	b.n	8004f56 <UART_SetConfig+0x486>
 8004f34:	4b35      	ldr	r3, [pc, #212]	; (800500c <UART_SetConfig+0x53c>)
 8004f36:	e00e      	b.n	8004f56 <UART_SetConfig+0x486>
 8004f38:	4b35      	ldr	r3, [pc, #212]	; (8005010 <UART_SetConfig+0x540>)
 8004f3a:	e00c      	b.n	8004f56 <UART_SetConfig+0x486>
 8004f3c:	4b35      	ldr	r3, [pc, #212]	; (8005014 <UART_SetConfig+0x544>)
 8004f3e:	e00a      	b.n	8004f56 <UART_SetConfig+0x486>
 8004f40:	4b35      	ldr	r3, [pc, #212]	; (8005018 <UART_SetConfig+0x548>)
 8004f42:	e008      	b.n	8004f56 <UART_SetConfig+0x486>
 8004f44:	4b35      	ldr	r3, [pc, #212]	; (800501c <UART_SetConfig+0x54c>)
 8004f46:	e006      	b.n	8004f56 <UART_SetConfig+0x486>
 8004f48:	4b35      	ldr	r3, [pc, #212]	; (8005020 <UART_SetConfig+0x550>)
 8004f4a:	e004      	b.n	8004f56 <UART_SetConfig+0x486>
 8004f4c:	4b35      	ldr	r3, [pc, #212]	; (8005024 <UART_SetConfig+0x554>)
 8004f4e:	e002      	b.n	8004f56 <UART_SetConfig+0x486>
 8004f50:	4b35      	ldr	r3, [pc, #212]	; (8005028 <UART_SetConfig+0x558>)
 8004f52:	e000      	b.n	8004f56 <UART_SetConfig+0x486>
 8004f54:	4b2a      	ldr	r3, [pc, #168]	; (8005000 <UART_SetConfig+0x530>)
 8004f56:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f58:	e0c2      	b.n	80050e0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004f5a:	f7fd ff47 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d044      	beq.n	8004ff2 <UART_SetConfig+0x522>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d03e      	beq.n	8004fee <UART_SetConfig+0x51e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d038      	beq.n	8004fea <UART_SetConfig+0x51a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d032      	beq.n	8004fe6 <UART_SetConfig+0x516>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d02c      	beq.n	8004fe2 <UART_SetConfig+0x512>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	2b05      	cmp	r3, #5
 8004f8e:	d026      	beq.n	8004fde <UART_SetConfig+0x50e>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	2b06      	cmp	r3, #6
 8004f96:	d020      	beq.n	8004fda <UART_SetConfig+0x50a>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	2b07      	cmp	r3, #7
 8004f9e:	d01a      	beq.n	8004fd6 <UART_SetConfig+0x506>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d014      	beq.n	8004fd2 <UART_SetConfig+0x502>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	2b09      	cmp	r3, #9
 8004fae:	d00e      	beq.n	8004fce <UART_SetConfig+0x4fe>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	2b0a      	cmp	r3, #10
 8004fb6:	d008      	beq.n	8004fca <UART_SetConfig+0x4fa>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	2b0b      	cmp	r3, #11
 8004fbe:	d102      	bne.n	8004fc6 <UART_SetConfig+0x4f6>
 8004fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fc4:	e016      	b.n	8004ff4 <UART_SetConfig+0x524>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e014      	b.n	8004ff4 <UART_SetConfig+0x524>
 8004fca:	2380      	movs	r3, #128	; 0x80
 8004fcc:	e012      	b.n	8004ff4 <UART_SetConfig+0x524>
 8004fce:	2340      	movs	r3, #64	; 0x40
 8004fd0:	e010      	b.n	8004ff4 <UART_SetConfig+0x524>
 8004fd2:	2320      	movs	r3, #32
 8004fd4:	e00e      	b.n	8004ff4 <UART_SetConfig+0x524>
 8004fd6:	2310      	movs	r3, #16
 8004fd8:	e00c      	b.n	8004ff4 <UART_SetConfig+0x524>
 8004fda:	230c      	movs	r3, #12
 8004fdc:	e00a      	b.n	8004ff4 <UART_SetConfig+0x524>
 8004fde:	230a      	movs	r3, #10
 8004fe0:	e008      	b.n	8004ff4 <UART_SetConfig+0x524>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	e006      	b.n	8004ff4 <UART_SetConfig+0x524>
 8004fe6:	2306      	movs	r3, #6
 8004fe8:	e004      	b.n	8004ff4 <UART_SetConfig+0x524>
 8004fea:	2304      	movs	r3, #4
 8004fec:	e002      	b.n	8004ff4 <UART_SetConfig+0x524>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e000      	b.n	8004ff4 <UART_SetConfig+0x524>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff8:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ffa:	e071      	b.n	80050e0 <UART_SetConfig+0x610>
 8004ffc:	40008000 	.word	0x40008000
 8005000:	00f42400 	.word	0x00f42400
 8005004:	0001e848 	.word	0x0001e848
 8005008:	0003d090 	.word	0x0003d090
 800500c:	0007a120 	.word	0x0007a120
 8005010:	000f4240 	.word	0x000f4240
 8005014:	00145855 	.word	0x00145855
 8005018:	00186a00 	.word	0x00186a00
 800501c:	001e8480 	.word	0x001e8480
 8005020:	0028b0aa 	.word	0x0028b0aa
 8005024:	003d0900 	.word	0x003d0900
 8005028:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	2b00      	cmp	r3, #0
 8005032:	d04e      	beq.n	80050d2 <UART_SetConfig+0x602>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	2b01      	cmp	r3, #1
 800503a:	d047      	beq.n	80050cc <UART_SetConfig+0x5fc>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	2b02      	cmp	r3, #2
 8005042:	d040      	beq.n	80050c6 <UART_SetConfig+0x5f6>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	2b03      	cmp	r3, #3
 800504a:	d039      	beq.n	80050c0 <UART_SetConfig+0x5f0>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2b04      	cmp	r3, #4
 8005052:	d032      	beq.n	80050ba <UART_SetConfig+0x5ea>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	2b05      	cmp	r3, #5
 800505a:	d02b      	beq.n	80050b4 <UART_SetConfig+0x5e4>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	2b06      	cmp	r3, #6
 8005062:	d024      	beq.n	80050ae <UART_SetConfig+0x5de>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	2b07      	cmp	r3, #7
 800506a:	d01d      	beq.n	80050a8 <UART_SetConfig+0x5d8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	2b08      	cmp	r3, #8
 8005072:	d016      	beq.n	80050a2 <UART_SetConfig+0x5d2>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	2b09      	cmp	r3, #9
 800507a:	d00f      	beq.n	800509c <UART_SetConfig+0x5cc>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	2b0a      	cmp	r3, #10
 8005082:	d008      	beq.n	8005096 <UART_SetConfig+0x5c6>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2b0b      	cmp	r3, #11
 800508a:	d101      	bne.n	8005090 <UART_SetConfig+0x5c0>
 800508c:	2380      	movs	r3, #128	; 0x80
 800508e:	e022      	b.n	80050d6 <UART_SetConfig+0x606>
 8005090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005094:	e01f      	b.n	80050d6 <UART_SetConfig+0x606>
 8005096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800509a:	e01c      	b.n	80050d6 <UART_SetConfig+0x606>
 800509c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050a0:	e019      	b.n	80050d6 <UART_SetConfig+0x606>
 80050a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050a6:	e016      	b.n	80050d6 <UART_SetConfig+0x606>
 80050a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050ac:	e013      	b.n	80050d6 <UART_SetConfig+0x606>
 80050ae:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80050b2:	e010      	b.n	80050d6 <UART_SetConfig+0x606>
 80050b4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80050b8:	e00d      	b.n	80050d6 <UART_SetConfig+0x606>
 80050ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050be:	e00a      	b.n	80050d6 <UART_SetConfig+0x606>
 80050c0:	f241 5355 	movw	r3, #5461	; 0x1555
 80050c4:	e007      	b.n	80050d6 <UART_SetConfig+0x606>
 80050c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050ca:	e004      	b.n	80050d6 <UART_SetConfig+0x606>
 80050cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050d0:	e001      	b.n	80050d6 <UART_SetConfig+0x606>
 80050d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050d6:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 80050d8:	e002      	b.n	80050e0 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	76fb      	strb	r3, [r7, #27]
        break;
 80050de:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 86b7 	beq.w	8005e56 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	4413      	add	r3, r2
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d305      	bcc.n	8005104 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	429a      	cmp	r2, r3
 8005102:	d903      	bls.n	800510c <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	76fb      	strb	r3, [r7, #27]
 8005108:	f000 bea5 	b.w	8005e56 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 800510c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005110:	2b08      	cmp	r3, #8
 8005112:	f200 8277 	bhi.w	8005604 <UART_SetConfig+0xb34>
 8005116:	a201      	add	r2, pc, #4	; (adr r2, 800511c <UART_SetConfig+0x64c>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	08005141 	.word	0x08005141
 8005120:	08005605 	.word	0x08005605
 8005124:	0800527f 	.word	0x0800527f
 8005128:	08005605 	.word	0x08005605
 800512c:	08005375 	.word	0x08005375
 8005130:	08005605 	.word	0x08005605
 8005134:	08005605 	.word	0x08005605
 8005138:	08005605 	.word	0x08005605
 800513c:	080054b3 	.word	0x080054b3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005140:	f7fd fee8 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 8005144:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	4618      	mov	r0, r3
 800514a:	f04f 0100 	mov.w	r1, #0
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d067      	beq.n	8005226 <UART_SetConfig+0x756>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	2b01      	cmp	r3, #1
 800515c:	d05e      	beq.n	800521c <UART_SetConfig+0x74c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	2b02      	cmp	r3, #2
 8005164:	d055      	beq.n	8005212 <UART_SetConfig+0x742>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b03      	cmp	r3, #3
 800516c:	d04c      	beq.n	8005208 <UART_SetConfig+0x738>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	2b04      	cmp	r3, #4
 8005174:	d043      	beq.n	80051fe <UART_SetConfig+0x72e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	2b05      	cmp	r3, #5
 800517c:	d03a      	beq.n	80051f4 <UART_SetConfig+0x724>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	2b06      	cmp	r3, #6
 8005184:	d031      	beq.n	80051ea <UART_SetConfig+0x71a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	2b07      	cmp	r3, #7
 800518c:	d028      	beq.n	80051e0 <UART_SetConfig+0x710>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	2b08      	cmp	r3, #8
 8005194:	d01f      	beq.n	80051d6 <UART_SetConfig+0x706>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	2b09      	cmp	r3, #9
 800519c:	d016      	beq.n	80051cc <UART_SetConfig+0x6fc>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	2b0a      	cmp	r3, #10
 80051a4:	d00d      	beq.n	80051c2 <UART_SetConfig+0x6f2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	2b0b      	cmp	r3, #11
 80051ac:	d104      	bne.n	80051b8 <UART_SetConfig+0x6e8>
 80051ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051b2:	f04f 0400 	mov.w	r4, #0
 80051b6:	e03a      	b.n	800522e <UART_SetConfig+0x75e>
 80051b8:	f04f 0301 	mov.w	r3, #1
 80051bc:	f04f 0400 	mov.w	r4, #0
 80051c0:	e035      	b.n	800522e <UART_SetConfig+0x75e>
 80051c2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80051c6:	f04f 0400 	mov.w	r4, #0
 80051ca:	e030      	b.n	800522e <UART_SetConfig+0x75e>
 80051cc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80051d0:	f04f 0400 	mov.w	r4, #0
 80051d4:	e02b      	b.n	800522e <UART_SetConfig+0x75e>
 80051d6:	f04f 0320 	mov.w	r3, #32
 80051da:	f04f 0400 	mov.w	r4, #0
 80051de:	e026      	b.n	800522e <UART_SetConfig+0x75e>
 80051e0:	f04f 0310 	mov.w	r3, #16
 80051e4:	f04f 0400 	mov.w	r4, #0
 80051e8:	e021      	b.n	800522e <UART_SetConfig+0x75e>
 80051ea:	f04f 030c 	mov.w	r3, #12
 80051ee:	f04f 0400 	mov.w	r4, #0
 80051f2:	e01c      	b.n	800522e <UART_SetConfig+0x75e>
 80051f4:	f04f 030a 	mov.w	r3, #10
 80051f8:	f04f 0400 	mov.w	r4, #0
 80051fc:	e017      	b.n	800522e <UART_SetConfig+0x75e>
 80051fe:	f04f 0308 	mov.w	r3, #8
 8005202:	f04f 0400 	mov.w	r4, #0
 8005206:	e012      	b.n	800522e <UART_SetConfig+0x75e>
 8005208:	f04f 0306 	mov.w	r3, #6
 800520c:	f04f 0400 	mov.w	r4, #0
 8005210:	e00d      	b.n	800522e <UART_SetConfig+0x75e>
 8005212:	f04f 0304 	mov.w	r3, #4
 8005216:	f04f 0400 	mov.w	r4, #0
 800521a:	e008      	b.n	800522e <UART_SetConfig+0x75e>
 800521c:	f04f 0302 	mov.w	r3, #2
 8005220:	f04f 0400 	mov.w	r4, #0
 8005224:	e003      	b.n	800522e <UART_SetConfig+0x75e>
 8005226:	f04f 0301 	mov.w	r3, #1
 800522a:	f04f 0400 	mov.w	r4, #0
 800522e:	461a      	mov	r2, r3
 8005230:	4623      	mov	r3, r4
 8005232:	f7fb f83d 	bl	80002b0 <__aeabi_uldivmod>
 8005236:	4603      	mov	r3, r0
 8005238:	460c      	mov	r4, r1
 800523a:	4619      	mov	r1, r3
 800523c:	4622      	mov	r2, r4
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	f04f 0400 	mov.w	r4, #0
 8005246:	0214      	lsls	r4, r2, #8
 8005248:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800524c:	020b      	lsls	r3, r1, #8
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6852      	ldr	r2, [r2, #4]
 8005252:	0852      	lsrs	r2, r2, #1
 8005254:	4611      	mov	r1, r2
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	eb13 0b01 	adds.w	fp, r3, r1
 800525e:	eb44 0c02 	adc.w	ip, r4, r2
 8005262:	4658      	mov	r0, fp
 8005264:	4661      	mov	r1, ip
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f04f 0400 	mov.w	r4, #0
 800526e:	461a      	mov	r2, r3
 8005270:	4623      	mov	r3, r4
 8005272:	f7fb f81d 	bl	80002b0 <__aeabi_uldivmod>
 8005276:	4603      	mov	r3, r0
 8005278:	460c      	mov	r4, r1
 800527a:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800527c:	e1c5      	b.n	800560a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	2b00      	cmp	r3, #0
 8005284:	d05b      	beq.n	800533e <UART_SetConfig+0x86e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	2b01      	cmp	r3, #1
 800528c:	d053      	beq.n	8005336 <UART_SetConfig+0x866>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	2b02      	cmp	r3, #2
 8005294:	d04b      	beq.n	800532e <UART_SetConfig+0x85e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	2b03      	cmp	r3, #3
 800529c:	d043      	beq.n	8005326 <UART_SetConfig+0x856>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d03b      	beq.n	800531e <UART_SetConfig+0x84e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	2b05      	cmp	r3, #5
 80052ac:	d033      	beq.n	8005316 <UART_SetConfig+0x846>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	2b06      	cmp	r3, #6
 80052b4:	d02b      	beq.n	800530e <UART_SetConfig+0x83e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	2b07      	cmp	r3, #7
 80052bc:	d023      	beq.n	8005306 <UART_SetConfig+0x836>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d01b      	beq.n	80052fe <UART_SetConfig+0x82e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	2b09      	cmp	r3, #9
 80052cc:	d013      	beq.n	80052f6 <UART_SetConfig+0x826>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	2b0a      	cmp	r3, #10
 80052d4:	d00b      	beq.n	80052ee <UART_SetConfig+0x81e>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	2b0b      	cmp	r3, #11
 80052dc:	d103      	bne.n	80052e6 <UART_SetConfig+0x816>
 80052de:	4bae      	ldr	r3, [pc, #696]	; (8005598 <UART_SetConfig+0xac8>)
 80052e0:	f04f 0400 	mov.w	r4, #0
 80052e4:	e02e      	b.n	8005344 <UART_SetConfig+0x874>
 80052e6:	4bad      	ldr	r3, [pc, #692]	; (800559c <UART_SetConfig+0xacc>)
 80052e8:	f04f 0400 	mov.w	r4, #0
 80052ec:	e02a      	b.n	8005344 <UART_SetConfig+0x874>
 80052ee:	4bac      	ldr	r3, [pc, #688]	; (80055a0 <UART_SetConfig+0xad0>)
 80052f0:	f04f 0400 	mov.w	r4, #0
 80052f4:	e026      	b.n	8005344 <UART_SetConfig+0x874>
 80052f6:	4bab      	ldr	r3, [pc, #684]	; (80055a4 <UART_SetConfig+0xad4>)
 80052f8:	f04f 0400 	mov.w	r4, #0
 80052fc:	e022      	b.n	8005344 <UART_SetConfig+0x874>
 80052fe:	4baa      	ldr	r3, [pc, #680]	; (80055a8 <UART_SetConfig+0xad8>)
 8005300:	f04f 0400 	mov.w	r4, #0
 8005304:	e01e      	b.n	8005344 <UART_SetConfig+0x874>
 8005306:	4ba9      	ldr	r3, [pc, #676]	; (80055ac <UART_SetConfig+0xadc>)
 8005308:	f04f 0400 	mov.w	r4, #0
 800530c:	e01a      	b.n	8005344 <UART_SetConfig+0x874>
 800530e:	a49e      	add	r4, pc, #632	; (adr r4, 8005588 <UART_SetConfig+0xab8>)
 8005310:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005314:	e016      	b.n	8005344 <UART_SetConfig+0x874>
 8005316:	4ba6      	ldr	r3, [pc, #664]	; (80055b0 <UART_SetConfig+0xae0>)
 8005318:	f04f 0400 	mov.w	r4, #0
 800531c:	e012      	b.n	8005344 <UART_SetConfig+0x874>
 800531e:	4ba5      	ldr	r3, [pc, #660]	; (80055b4 <UART_SetConfig+0xae4>)
 8005320:	f04f 0400 	mov.w	r4, #0
 8005324:	e00e      	b.n	8005344 <UART_SetConfig+0x874>
 8005326:	a49a      	add	r4, pc, #616	; (adr r4, 8005590 <UART_SetConfig+0xac0>)
 8005328:	e9d4 3400 	ldrd	r3, r4, [r4]
 800532c:	e00a      	b.n	8005344 <UART_SetConfig+0x874>
 800532e:	4ba2      	ldr	r3, [pc, #648]	; (80055b8 <UART_SetConfig+0xae8>)
 8005330:	f04f 0400 	mov.w	r4, #0
 8005334:	e006      	b.n	8005344 <UART_SetConfig+0x874>
 8005336:	4ba1      	ldr	r3, [pc, #644]	; (80055bc <UART_SetConfig+0xaec>)
 8005338:	f04f 0400 	mov.w	r4, #0
 800533c:	e002      	b.n	8005344 <UART_SetConfig+0x874>
 800533e:	4b97      	ldr	r3, [pc, #604]	; (800559c <UART_SetConfig+0xacc>)
 8005340:	f04f 0400 	mov.w	r4, #0
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6852      	ldr	r2, [r2, #4]
 8005348:	0852      	lsrs	r2, r2, #1
 800534a:	4611      	mov	r1, r2
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	eb13 0b01 	adds.w	fp, r3, r1
 8005354:	eb44 0c02 	adc.w	ip, r4, r2
 8005358:	4658      	mov	r0, fp
 800535a:	4661      	mov	r1, ip
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f04f 0400 	mov.w	r4, #0
 8005364:	461a      	mov	r2, r3
 8005366:	4623      	mov	r3, r4
 8005368:	f7fa ffa2 	bl	80002b0 <__aeabi_uldivmod>
 800536c:	4603      	mov	r3, r0
 800536e:	460c      	mov	r4, r1
 8005370:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005372:	e14a      	b.n	800560a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005374:	f7fd fd3a 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8005378:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4618      	mov	r0, r3
 800537e:	f04f 0100 	mov.w	r1, #0
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	2b00      	cmp	r3, #0
 8005388:	d067      	beq.n	800545a <UART_SetConfig+0x98a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	2b01      	cmp	r3, #1
 8005390:	d05e      	beq.n	8005450 <UART_SetConfig+0x980>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	2b02      	cmp	r3, #2
 8005398:	d055      	beq.n	8005446 <UART_SetConfig+0x976>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d04c      	beq.n	800543c <UART_SetConfig+0x96c>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d043      	beq.n	8005432 <UART_SetConfig+0x962>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	d03a      	beq.n	8005428 <UART_SetConfig+0x958>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	2b06      	cmp	r3, #6
 80053b8:	d031      	beq.n	800541e <UART_SetConfig+0x94e>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	2b07      	cmp	r3, #7
 80053c0:	d028      	beq.n	8005414 <UART_SetConfig+0x944>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d01f      	beq.n	800540a <UART_SetConfig+0x93a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	2b09      	cmp	r3, #9
 80053d0:	d016      	beq.n	8005400 <UART_SetConfig+0x930>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	2b0a      	cmp	r3, #10
 80053d8:	d00d      	beq.n	80053f6 <UART_SetConfig+0x926>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	2b0b      	cmp	r3, #11
 80053e0:	d104      	bne.n	80053ec <UART_SetConfig+0x91c>
 80053e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053e6:	f04f 0400 	mov.w	r4, #0
 80053ea:	e03a      	b.n	8005462 <UART_SetConfig+0x992>
 80053ec:	f04f 0301 	mov.w	r3, #1
 80053f0:	f04f 0400 	mov.w	r4, #0
 80053f4:	e035      	b.n	8005462 <UART_SetConfig+0x992>
 80053f6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80053fa:	f04f 0400 	mov.w	r4, #0
 80053fe:	e030      	b.n	8005462 <UART_SetConfig+0x992>
 8005400:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005404:	f04f 0400 	mov.w	r4, #0
 8005408:	e02b      	b.n	8005462 <UART_SetConfig+0x992>
 800540a:	f04f 0320 	mov.w	r3, #32
 800540e:	f04f 0400 	mov.w	r4, #0
 8005412:	e026      	b.n	8005462 <UART_SetConfig+0x992>
 8005414:	f04f 0310 	mov.w	r3, #16
 8005418:	f04f 0400 	mov.w	r4, #0
 800541c:	e021      	b.n	8005462 <UART_SetConfig+0x992>
 800541e:	f04f 030c 	mov.w	r3, #12
 8005422:	f04f 0400 	mov.w	r4, #0
 8005426:	e01c      	b.n	8005462 <UART_SetConfig+0x992>
 8005428:	f04f 030a 	mov.w	r3, #10
 800542c:	f04f 0400 	mov.w	r4, #0
 8005430:	e017      	b.n	8005462 <UART_SetConfig+0x992>
 8005432:	f04f 0308 	mov.w	r3, #8
 8005436:	f04f 0400 	mov.w	r4, #0
 800543a:	e012      	b.n	8005462 <UART_SetConfig+0x992>
 800543c:	f04f 0306 	mov.w	r3, #6
 8005440:	f04f 0400 	mov.w	r4, #0
 8005444:	e00d      	b.n	8005462 <UART_SetConfig+0x992>
 8005446:	f04f 0304 	mov.w	r3, #4
 800544a:	f04f 0400 	mov.w	r4, #0
 800544e:	e008      	b.n	8005462 <UART_SetConfig+0x992>
 8005450:	f04f 0302 	mov.w	r3, #2
 8005454:	f04f 0400 	mov.w	r4, #0
 8005458:	e003      	b.n	8005462 <UART_SetConfig+0x992>
 800545a:	f04f 0301 	mov.w	r3, #1
 800545e:	f04f 0400 	mov.w	r4, #0
 8005462:	461a      	mov	r2, r3
 8005464:	4623      	mov	r3, r4
 8005466:	f7fa ff23 	bl	80002b0 <__aeabi_uldivmod>
 800546a:	4603      	mov	r3, r0
 800546c:	460c      	mov	r4, r1
 800546e:	4619      	mov	r1, r3
 8005470:	4622      	mov	r2, r4
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	f04f 0400 	mov.w	r4, #0
 800547a:	0214      	lsls	r4, r2, #8
 800547c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005480:	020b      	lsls	r3, r1, #8
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6852      	ldr	r2, [r2, #4]
 8005486:	0852      	lsrs	r2, r2, #1
 8005488:	4611      	mov	r1, r2
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	eb13 0b01 	adds.w	fp, r3, r1
 8005492:	eb44 0c02 	adc.w	ip, r4, r2
 8005496:	4658      	mov	r0, fp
 8005498:	4661      	mov	r1, ip
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f04f 0400 	mov.w	r4, #0
 80054a2:	461a      	mov	r2, r3
 80054a4:	4623      	mov	r3, r4
 80054a6:	f7fa ff03 	bl	80002b0 <__aeabi_uldivmod>
 80054aa:	4603      	mov	r3, r0
 80054ac:	460c      	mov	r4, r1
 80054ae:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80054b0:	e0ab      	b.n	800560a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 8088 	beq.w	80055cc <UART_SetConfig+0xafc>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d05b      	beq.n	800557c <UART_SetConfig+0xaac>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d052      	beq.n	8005572 <UART_SetConfig+0xaa2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d04a      	beq.n	800556a <UART_SetConfig+0xa9a>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d041      	beq.n	8005560 <UART_SetConfig+0xa90>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	2b05      	cmp	r3, #5
 80054e2:	d039      	beq.n	8005558 <UART_SetConfig+0xa88>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	2b06      	cmp	r3, #6
 80054ea:	d031      	beq.n	8005550 <UART_SetConfig+0xa80>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	2b07      	cmp	r3, #7
 80054f2:	d028      	beq.n	8005546 <UART_SetConfig+0xa76>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d01f      	beq.n	800553c <UART_SetConfig+0xa6c>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	2b09      	cmp	r3, #9
 8005502:	d016      	beq.n	8005532 <UART_SetConfig+0xa62>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	2b0a      	cmp	r3, #10
 800550a:	d00d      	beq.n	8005528 <UART_SetConfig+0xa58>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	2b0b      	cmp	r3, #11
 8005512:	d104      	bne.n	800551e <UART_SetConfig+0xa4e>
 8005514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005518:	f04f 0400 	mov.w	r4, #0
 800551c:	e05a      	b.n	80055d4 <UART_SetConfig+0xb04>
 800551e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005522:	f04f 0400 	mov.w	r4, #0
 8005526:	e055      	b.n	80055d4 <UART_SetConfig+0xb04>
 8005528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800552c:	f04f 0400 	mov.w	r4, #0
 8005530:	e050      	b.n	80055d4 <UART_SetConfig+0xb04>
 8005532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005536:	f04f 0400 	mov.w	r4, #0
 800553a:	e04b      	b.n	80055d4 <UART_SetConfig+0xb04>
 800553c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005540:	f04f 0400 	mov.w	r4, #0
 8005544:	e046      	b.n	80055d4 <UART_SetConfig+0xb04>
 8005546:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800554a:	f04f 0400 	mov.w	r4, #0
 800554e:	e041      	b.n	80055d4 <UART_SetConfig+0xb04>
 8005550:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <UART_SetConfig+0xaf0>)
 8005552:	f04f 0400 	mov.w	r4, #0
 8005556:	e03d      	b.n	80055d4 <UART_SetConfig+0xb04>
 8005558:	4b1a      	ldr	r3, [pc, #104]	; (80055c4 <UART_SetConfig+0xaf4>)
 800555a:	f04f 0400 	mov.w	r4, #0
 800555e:	e039      	b.n	80055d4 <UART_SetConfig+0xb04>
 8005560:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005564:	f04f 0400 	mov.w	r4, #0
 8005568:	e034      	b.n	80055d4 <UART_SetConfig+0xb04>
 800556a:	4b17      	ldr	r3, [pc, #92]	; (80055c8 <UART_SetConfig+0xaf8>)
 800556c:	f04f 0400 	mov.w	r4, #0
 8005570:	e030      	b.n	80055d4 <UART_SetConfig+0xb04>
 8005572:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005576:	f04f 0400 	mov.w	r4, #0
 800557a:	e02b      	b.n	80055d4 <UART_SetConfig+0xb04>
 800557c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005580:	f04f 0400 	mov.w	r4, #0
 8005584:	e026      	b.n	80055d4 <UART_SetConfig+0xb04>
 8005586:	bf00      	nop
 8005588:	14585500 	.word	0x14585500
 800558c:	00000000 	.word	0x00000000
 8005590:	28b0aa00 	.word	0x28b0aa00
 8005594:	00000000 	.word	0x00000000
 8005598:	00f42400 	.word	0x00f42400
 800559c:	f4240000 	.word	0xf4240000
 80055a0:	01e84800 	.word	0x01e84800
 80055a4:	03d09000 	.word	0x03d09000
 80055a8:	07a12000 	.word	0x07a12000
 80055ac:	0f424000 	.word	0x0f424000
 80055b0:	186a0000 	.word	0x186a0000
 80055b4:	1e848000 	.word	0x1e848000
 80055b8:	3d090000 	.word	0x3d090000
 80055bc:	7a120000 	.word	0x7a120000
 80055c0:	000aaa00 	.word	0x000aaa00
 80055c4:	000ccc00 	.word	0x000ccc00
 80055c8:	00155500 	.word	0x00155500
 80055cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80055d0:	f04f 0400 	mov.w	r4, #0
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6852      	ldr	r2, [r2, #4]
 80055d8:	0852      	lsrs	r2, r2, #1
 80055da:	4611      	mov	r1, r2
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	eb13 0b01 	adds.w	fp, r3, r1
 80055e4:	eb44 0c02 	adc.w	ip, r4, r2
 80055e8:	4658      	mov	r0, fp
 80055ea:	4661      	mov	r1, ip
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f04f 0400 	mov.w	r4, #0
 80055f4:	461a      	mov	r2, r3
 80055f6:	4623      	mov	r3, r4
 80055f8:	f7fa fe5a 	bl	80002b0 <__aeabi_uldivmod>
 80055fc:	4603      	mov	r3, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005602:	e002      	b.n	800560a <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	76fb      	strb	r3, [r7, #27]
            break;
 8005608:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005610:	d309      	bcc.n	8005626 <UART_SetConfig+0xb56>
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005618:	d205      	bcs.n	8005626 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	60da      	str	r2, [r3, #12]
 8005622:	f000 bc18 	b.w	8005e56 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	76fb      	strb	r3, [r7, #27]
 800562a:	f000 bc14 	b.w	8005e56 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005636:	f040 8204 	bne.w	8005a42 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 800563a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800563e:	2b08      	cmp	r3, #8
 8005640:	f200 81df 	bhi.w	8005a02 <UART_SetConfig+0xf32>
 8005644:	a201      	add	r2, pc, #4	; (adr r2, 800564c <UART_SetConfig+0xb7c>)
 8005646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564a:	bf00      	nop
 800564c:	08005671 	.word	0x08005671
 8005650:	08005729 	.word	0x08005729
 8005654:	080057e1 	.word	0x080057e1
 8005658:	08005a03 	.word	0x08005a03
 800565c:	08005889 	.word	0x08005889
 8005660:	08005a03 	.word	0x08005a03
 8005664:	08005a03 	.word	0x08005a03
 8005668:	08005a03 	.word	0x08005a03
 800566c:	08005941 	.word	0x08005941
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005670:	f7fd fc50 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 8005674:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	2b00      	cmp	r3, #0
 800567c:	d044      	beq.n	8005708 <UART_SetConfig+0xc38>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	2b01      	cmp	r3, #1
 8005684:	d03e      	beq.n	8005704 <UART_SetConfig+0xc34>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	2b02      	cmp	r3, #2
 800568c:	d038      	beq.n	8005700 <UART_SetConfig+0xc30>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	2b03      	cmp	r3, #3
 8005694:	d032      	beq.n	80056fc <UART_SetConfig+0xc2c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	2b04      	cmp	r3, #4
 800569c:	d02c      	beq.n	80056f8 <UART_SetConfig+0xc28>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	2b05      	cmp	r3, #5
 80056a4:	d026      	beq.n	80056f4 <UART_SetConfig+0xc24>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	2b06      	cmp	r3, #6
 80056ac:	d020      	beq.n	80056f0 <UART_SetConfig+0xc20>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	2b07      	cmp	r3, #7
 80056b4:	d01a      	beq.n	80056ec <UART_SetConfig+0xc1c>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d014      	beq.n	80056e8 <UART_SetConfig+0xc18>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	2b09      	cmp	r3, #9
 80056c4:	d00e      	beq.n	80056e4 <UART_SetConfig+0xc14>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	2b0a      	cmp	r3, #10
 80056cc:	d008      	beq.n	80056e0 <UART_SetConfig+0xc10>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	2b0b      	cmp	r3, #11
 80056d4:	d102      	bne.n	80056dc <UART_SetConfig+0xc0c>
 80056d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056da:	e016      	b.n	800570a <UART_SetConfig+0xc3a>
 80056dc:	2301      	movs	r3, #1
 80056de:	e014      	b.n	800570a <UART_SetConfig+0xc3a>
 80056e0:	2380      	movs	r3, #128	; 0x80
 80056e2:	e012      	b.n	800570a <UART_SetConfig+0xc3a>
 80056e4:	2340      	movs	r3, #64	; 0x40
 80056e6:	e010      	b.n	800570a <UART_SetConfig+0xc3a>
 80056e8:	2320      	movs	r3, #32
 80056ea:	e00e      	b.n	800570a <UART_SetConfig+0xc3a>
 80056ec:	2310      	movs	r3, #16
 80056ee:	e00c      	b.n	800570a <UART_SetConfig+0xc3a>
 80056f0:	230c      	movs	r3, #12
 80056f2:	e00a      	b.n	800570a <UART_SetConfig+0xc3a>
 80056f4:	230a      	movs	r3, #10
 80056f6:	e008      	b.n	800570a <UART_SetConfig+0xc3a>
 80056f8:	2308      	movs	r3, #8
 80056fa:	e006      	b.n	800570a <UART_SetConfig+0xc3a>
 80056fc:	2306      	movs	r3, #6
 80056fe:	e004      	b.n	800570a <UART_SetConfig+0xc3a>
 8005700:	2304      	movs	r3, #4
 8005702:	e002      	b.n	800570a <UART_SetConfig+0xc3a>
 8005704:	2302      	movs	r3, #2
 8005706:	e000      	b.n	800570a <UART_SetConfig+0xc3a>
 8005708:	2301      	movs	r3, #1
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005710:	005a      	lsls	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	441a      	add	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005722:	b29b      	uxth	r3, r3
 8005724:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005726:	e16f      	b.n	8005a08 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005728:	f7fd fc0a 	bl	8002f40 <HAL_RCC_GetPCLK2Freq>
 800572c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	2b00      	cmp	r3, #0
 8005734:	d044      	beq.n	80057c0 <UART_SetConfig+0xcf0>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	2b01      	cmp	r3, #1
 800573c:	d03e      	beq.n	80057bc <UART_SetConfig+0xcec>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b02      	cmp	r3, #2
 8005744:	d038      	beq.n	80057b8 <UART_SetConfig+0xce8>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	2b03      	cmp	r3, #3
 800574c:	d032      	beq.n	80057b4 <UART_SetConfig+0xce4>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	2b04      	cmp	r3, #4
 8005754:	d02c      	beq.n	80057b0 <UART_SetConfig+0xce0>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	2b05      	cmp	r3, #5
 800575c:	d026      	beq.n	80057ac <UART_SetConfig+0xcdc>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	2b06      	cmp	r3, #6
 8005764:	d020      	beq.n	80057a8 <UART_SetConfig+0xcd8>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	2b07      	cmp	r3, #7
 800576c:	d01a      	beq.n	80057a4 <UART_SetConfig+0xcd4>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	2b08      	cmp	r3, #8
 8005774:	d014      	beq.n	80057a0 <UART_SetConfig+0xcd0>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b09      	cmp	r3, #9
 800577c:	d00e      	beq.n	800579c <UART_SetConfig+0xccc>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	2b0a      	cmp	r3, #10
 8005784:	d008      	beq.n	8005798 <UART_SetConfig+0xcc8>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	2b0b      	cmp	r3, #11
 800578c:	d102      	bne.n	8005794 <UART_SetConfig+0xcc4>
 800578e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005792:	e016      	b.n	80057c2 <UART_SetConfig+0xcf2>
 8005794:	2301      	movs	r3, #1
 8005796:	e014      	b.n	80057c2 <UART_SetConfig+0xcf2>
 8005798:	2380      	movs	r3, #128	; 0x80
 800579a:	e012      	b.n	80057c2 <UART_SetConfig+0xcf2>
 800579c:	2340      	movs	r3, #64	; 0x40
 800579e:	e010      	b.n	80057c2 <UART_SetConfig+0xcf2>
 80057a0:	2320      	movs	r3, #32
 80057a2:	e00e      	b.n	80057c2 <UART_SetConfig+0xcf2>
 80057a4:	2310      	movs	r3, #16
 80057a6:	e00c      	b.n	80057c2 <UART_SetConfig+0xcf2>
 80057a8:	230c      	movs	r3, #12
 80057aa:	e00a      	b.n	80057c2 <UART_SetConfig+0xcf2>
 80057ac:	230a      	movs	r3, #10
 80057ae:	e008      	b.n	80057c2 <UART_SetConfig+0xcf2>
 80057b0:	2308      	movs	r3, #8
 80057b2:	e006      	b.n	80057c2 <UART_SetConfig+0xcf2>
 80057b4:	2306      	movs	r3, #6
 80057b6:	e004      	b.n	80057c2 <UART_SetConfig+0xcf2>
 80057b8:	2304      	movs	r3, #4
 80057ba:	e002      	b.n	80057c2 <UART_SetConfig+0xcf2>
 80057bc:	2302      	movs	r3, #2
 80057be:	e000      	b.n	80057c2 <UART_SetConfig+0xcf2>
 80057c0:	2301      	movs	r3, #1
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c8:	005a      	lsls	r2, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	085b      	lsrs	r3, r3, #1
 80057d0:	441a      	add	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057da:	b29b      	uxth	r3, r3
 80057dc:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80057de:	e113      	b.n	8005a08 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d043      	beq.n	8005870 <UART_SetConfig+0xda0>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d03d      	beq.n	800586c <UART_SetConfig+0xd9c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d037      	beq.n	8005868 <UART_SetConfig+0xd98>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d031      	beq.n	8005864 <UART_SetConfig+0xd94>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	2b04      	cmp	r3, #4
 8005806:	d02b      	beq.n	8005860 <UART_SetConfig+0xd90>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	2b05      	cmp	r3, #5
 800580e:	d025      	beq.n	800585c <UART_SetConfig+0xd8c>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	2b06      	cmp	r3, #6
 8005816:	d01f      	beq.n	8005858 <UART_SetConfig+0xd88>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	2b07      	cmp	r3, #7
 800581e:	d019      	beq.n	8005854 <UART_SetConfig+0xd84>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	2b08      	cmp	r3, #8
 8005826:	d013      	beq.n	8005850 <UART_SetConfig+0xd80>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	2b09      	cmp	r3, #9
 800582e:	d00d      	beq.n	800584c <UART_SetConfig+0xd7c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	2b0a      	cmp	r3, #10
 8005836:	d007      	beq.n	8005848 <UART_SetConfig+0xd78>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	2b0b      	cmp	r3, #11
 800583e:	d101      	bne.n	8005844 <UART_SetConfig+0xd74>
 8005840:	4b8d      	ldr	r3, [pc, #564]	; (8005a78 <UART_SetConfig+0xfa8>)
 8005842:	e016      	b.n	8005872 <UART_SetConfig+0xda2>
 8005844:	4b8d      	ldr	r3, [pc, #564]	; (8005a7c <UART_SetConfig+0xfac>)
 8005846:	e014      	b.n	8005872 <UART_SetConfig+0xda2>
 8005848:	4b8d      	ldr	r3, [pc, #564]	; (8005a80 <UART_SetConfig+0xfb0>)
 800584a:	e012      	b.n	8005872 <UART_SetConfig+0xda2>
 800584c:	4b8d      	ldr	r3, [pc, #564]	; (8005a84 <UART_SetConfig+0xfb4>)
 800584e:	e010      	b.n	8005872 <UART_SetConfig+0xda2>
 8005850:	4b8d      	ldr	r3, [pc, #564]	; (8005a88 <UART_SetConfig+0xfb8>)
 8005852:	e00e      	b.n	8005872 <UART_SetConfig+0xda2>
 8005854:	4b8d      	ldr	r3, [pc, #564]	; (8005a8c <UART_SetConfig+0xfbc>)
 8005856:	e00c      	b.n	8005872 <UART_SetConfig+0xda2>
 8005858:	4b8d      	ldr	r3, [pc, #564]	; (8005a90 <UART_SetConfig+0xfc0>)
 800585a:	e00a      	b.n	8005872 <UART_SetConfig+0xda2>
 800585c:	4b8d      	ldr	r3, [pc, #564]	; (8005a94 <UART_SetConfig+0xfc4>)
 800585e:	e008      	b.n	8005872 <UART_SetConfig+0xda2>
 8005860:	4b8d      	ldr	r3, [pc, #564]	; (8005a98 <UART_SetConfig+0xfc8>)
 8005862:	e006      	b.n	8005872 <UART_SetConfig+0xda2>
 8005864:	4b8d      	ldr	r3, [pc, #564]	; (8005a9c <UART_SetConfig+0xfcc>)
 8005866:	e004      	b.n	8005872 <UART_SetConfig+0xda2>
 8005868:	4b8d      	ldr	r3, [pc, #564]	; (8005aa0 <UART_SetConfig+0xfd0>)
 800586a:	e002      	b.n	8005872 <UART_SetConfig+0xda2>
 800586c:	4b8d      	ldr	r3, [pc, #564]	; (8005aa4 <UART_SetConfig+0xfd4>)
 800586e:	e000      	b.n	8005872 <UART_SetConfig+0xda2>
 8005870:	4b82      	ldr	r3, [pc, #520]	; (8005a7c <UART_SetConfig+0xfac>)
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6852      	ldr	r2, [r2, #4]
 8005876:	0852      	lsrs	r2, r2, #1
 8005878:	441a      	add	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005882:	b29b      	uxth	r3, r3
 8005884:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005886:	e0bf      	b.n	8005a08 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005888:	f7fd fab0 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 800588c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	2b00      	cmp	r3, #0
 8005894:	d044      	beq.n	8005920 <UART_SetConfig+0xe50>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2b01      	cmp	r3, #1
 800589c:	d03e      	beq.n	800591c <UART_SetConfig+0xe4c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d038      	beq.n	8005918 <UART_SetConfig+0xe48>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d032      	beq.n	8005914 <UART_SetConfig+0xe44>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d02c      	beq.n	8005910 <UART_SetConfig+0xe40>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	2b05      	cmp	r3, #5
 80058bc:	d026      	beq.n	800590c <UART_SetConfig+0xe3c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	2b06      	cmp	r3, #6
 80058c4:	d020      	beq.n	8005908 <UART_SetConfig+0xe38>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	2b07      	cmp	r3, #7
 80058cc:	d01a      	beq.n	8005904 <UART_SetConfig+0xe34>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d014      	beq.n	8005900 <UART_SetConfig+0xe30>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2b09      	cmp	r3, #9
 80058dc:	d00e      	beq.n	80058fc <UART_SetConfig+0xe2c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	2b0a      	cmp	r3, #10
 80058e4:	d008      	beq.n	80058f8 <UART_SetConfig+0xe28>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	2b0b      	cmp	r3, #11
 80058ec:	d102      	bne.n	80058f4 <UART_SetConfig+0xe24>
 80058ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058f2:	e016      	b.n	8005922 <UART_SetConfig+0xe52>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e014      	b.n	8005922 <UART_SetConfig+0xe52>
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	e012      	b.n	8005922 <UART_SetConfig+0xe52>
 80058fc:	2340      	movs	r3, #64	; 0x40
 80058fe:	e010      	b.n	8005922 <UART_SetConfig+0xe52>
 8005900:	2320      	movs	r3, #32
 8005902:	e00e      	b.n	8005922 <UART_SetConfig+0xe52>
 8005904:	2310      	movs	r3, #16
 8005906:	e00c      	b.n	8005922 <UART_SetConfig+0xe52>
 8005908:	230c      	movs	r3, #12
 800590a:	e00a      	b.n	8005922 <UART_SetConfig+0xe52>
 800590c:	230a      	movs	r3, #10
 800590e:	e008      	b.n	8005922 <UART_SetConfig+0xe52>
 8005910:	2308      	movs	r3, #8
 8005912:	e006      	b.n	8005922 <UART_SetConfig+0xe52>
 8005914:	2306      	movs	r3, #6
 8005916:	e004      	b.n	8005922 <UART_SetConfig+0xe52>
 8005918:	2304      	movs	r3, #4
 800591a:	e002      	b.n	8005922 <UART_SetConfig+0xe52>
 800591c:	2302      	movs	r3, #2
 800591e:	e000      	b.n	8005922 <UART_SetConfig+0xe52>
 8005920:	2301      	movs	r3, #1
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	fbb2 f3f3 	udiv	r3, r2, r3
 8005928:	005a      	lsls	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	085b      	lsrs	r3, r3, #1
 8005930:	441a      	add	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	fbb2 f3f3 	udiv	r3, r2, r3
 800593a:	b29b      	uxth	r3, r3
 800593c:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800593e:	e063      	b.n	8005a08 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	2b00      	cmp	r3, #0
 8005946:	d04f      	beq.n	80059e8 <UART_SetConfig+0xf18>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	2b01      	cmp	r3, #1
 800594e:	d048      	beq.n	80059e2 <UART_SetConfig+0xf12>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	2b02      	cmp	r3, #2
 8005956:	d041      	beq.n	80059dc <UART_SetConfig+0xf0c>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	2b03      	cmp	r3, #3
 800595e:	d03a      	beq.n	80059d6 <UART_SetConfig+0xf06>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	2b04      	cmp	r3, #4
 8005966:	d033      	beq.n	80059d0 <UART_SetConfig+0xf00>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	2b05      	cmp	r3, #5
 800596e:	d02c      	beq.n	80059ca <UART_SetConfig+0xefa>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	2b06      	cmp	r3, #6
 8005976:	d025      	beq.n	80059c4 <UART_SetConfig+0xef4>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	2b07      	cmp	r3, #7
 800597e:	d01e      	beq.n	80059be <UART_SetConfig+0xeee>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	2b08      	cmp	r3, #8
 8005986:	d017      	beq.n	80059b8 <UART_SetConfig+0xee8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	2b09      	cmp	r3, #9
 800598e:	d010      	beq.n	80059b2 <UART_SetConfig+0xee2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	2b0a      	cmp	r3, #10
 8005996:	d009      	beq.n	80059ac <UART_SetConfig+0xedc>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	2b0b      	cmp	r3, #11
 800599e:	d102      	bne.n	80059a6 <UART_SetConfig+0xed6>
 80059a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059a4:	e022      	b.n	80059ec <UART_SetConfig+0xf1c>
 80059a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059aa:	e01f      	b.n	80059ec <UART_SetConfig+0xf1c>
 80059ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059b0:	e01c      	b.n	80059ec <UART_SetConfig+0xf1c>
 80059b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059b6:	e019      	b.n	80059ec <UART_SetConfig+0xf1c>
 80059b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059bc:	e016      	b.n	80059ec <UART_SetConfig+0xf1c>
 80059be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059c2:	e013      	b.n	80059ec <UART_SetConfig+0xf1c>
 80059c4:	f241 5354 	movw	r3, #5460	; 0x1554
 80059c8:	e010      	b.n	80059ec <UART_SetConfig+0xf1c>
 80059ca:	f641 1398 	movw	r3, #6552	; 0x1998
 80059ce:	e00d      	b.n	80059ec <UART_SetConfig+0xf1c>
 80059d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059d4:	e00a      	b.n	80059ec <UART_SetConfig+0xf1c>
 80059d6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80059da:	e007      	b.n	80059ec <UART_SetConfig+0xf1c>
 80059dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059e0:	e004      	b.n	80059ec <UART_SetConfig+0xf1c>
 80059e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e6:	e001      	b.n	80059ec <UART_SetConfig+0xf1c>
 80059e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6852      	ldr	r2, [r2, #4]
 80059f0:	0852      	lsrs	r2, r2, #1
 80059f2:	441a      	add	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a00:	e002      	b.n	8005a08 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	76fb      	strb	r3, [r7, #27]
        break;
 8005a06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	2b0f      	cmp	r3, #15
 8005a0c:	d916      	bls.n	8005a3c <UART_SetConfig+0xf6c>
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a14:	d212      	bcs.n	8005a3c <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f023 030f 	bic.w	r3, r3, #15
 8005a1e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	085b      	lsrs	r3, r3, #1
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	89fb      	ldrh	r3, [r7, #14]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	89fa      	ldrh	r2, [r7, #14]
 8005a38:	60da      	str	r2, [r3, #12]
 8005a3a:	e20c      	b.n	8005e56 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	76fb      	strb	r3, [r7, #27]
 8005a40:	e209      	b.n	8005e56 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8005a42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	f200 81f4 	bhi.w	8005e34 <UART_SetConfig+0x1364>
 8005a4c:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <UART_SetConfig+0xf84>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005aa9 	.word	0x08005aa9
 8005a58:	08005b5f 	.word	0x08005b5f
 8005a5c:	08005c15 	.word	0x08005c15
 8005a60:	08005e35 	.word	0x08005e35
 8005a64:	08005cbf 	.word	0x08005cbf
 8005a68:	08005e35 	.word	0x08005e35
 8005a6c:	08005e35 	.word	0x08005e35
 8005a70:	08005e35 	.word	0x08005e35
 8005a74:	08005d75 	.word	0x08005d75
 8005a78:	0001e848 	.word	0x0001e848
 8005a7c:	01e84800 	.word	0x01e84800
 8005a80:	0003d090 	.word	0x0003d090
 8005a84:	0007a120 	.word	0x0007a120
 8005a88:	000f4240 	.word	0x000f4240
 8005a8c:	001e8480 	.word	0x001e8480
 8005a90:	0028b0aa 	.word	0x0028b0aa
 8005a94:	0030d400 	.word	0x0030d400
 8005a98:	003d0900 	.word	0x003d0900
 8005a9c:	00516154 	.word	0x00516154
 8005aa0:	007a1200 	.word	0x007a1200
 8005aa4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aa8:	f7fd fa34 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 8005aac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d044      	beq.n	8005b40 <UART_SetConfig+0x1070>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d03e      	beq.n	8005b3c <UART_SetConfig+0x106c>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d038      	beq.n	8005b38 <UART_SetConfig+0x1068>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d032      	beq.n	8005b34 <UART_SetConfig+0x1064>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d02c      	beq.n	8005b30 <UART_SetConfig+0x1060>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	2b05      	cmp	r3, #5
 8005adc:	d026      	beq.n	8005b2c <UART_SetConfig+0x105c>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	2b06      	cmp	r3, #6
 8005ae4:	d020      	beq.n	8005b28 <UART_SetConfig+0x1058>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	2b07      	cmp	r3, #7
 8005aec:	d01a      	beq.n	8005b24 <UART_SetConfig+0x1054>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d014      	beq.n	8005b20 <UART_SetConfig+0x1050>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	2b09      	cmp	r3, #9
 8005afc:	d00e      	beq.n	8005b1c <UART_SetConfig+0x104c>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	2b0a      	cmp	r3, #10
 8005b04:	d008      	beq.n	8005b18 <UART_SetConfig+0x1048>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	2b0b      	cmp	r3, #11
 8005b0c:	d102      	bne.n	8005b14 <UART_SetConfig+0x1044>
 8005b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b12:	e016      	b.n	8005b42 <UART_SetConfig+0x1072>
 8005b14:	2301      	movs	r3, #1
 8005b16:	e014      	b.n	8005b42 <UART_SetConfig+0x1072>
 8005b18:	2380      	movs	r3, #128	; 0x80
 8005b1a:	e012      	b.n	8005b42 <UART_SetConfig+0x1072>
 8005b1c:	2340      	movs	r3, #64	; 0x40
 8005b1e:	e010      	b.n	8005b42 <UART_SetConfig+0x1072>
 8005b20:	2320      	movs	r3, #32
 8005b22:	e00e      	b.n	8005b42 <UART_SetConfig+0x1072>
 8005b24:	2310      	movs	r3, #16
 8005b26:	e00c      	b.n	8005b42 <UART_SetConfig+0x1072>
 8005b28:	230c      	movs	r3, #12
 8005b2a:	e00a      	b.n	8005b42 <UART_SetConfig+0x1072>
 8005b2c:	230a      	movs	r3, #10
 8005b2e:	e008      	b.n	8005b42 <UART_SetConfig+0x1072>
 8005b30:	2308      	movs	r3, #8
 8005b32:	e006      	b.n	8005b42 <UART_SetConfig+0x1072>
 8005b34:	2306      	movs	r3, #6
 8005b36:	e004      	b.n	8005b42 <UART_SetConfig+0x1072>
 8005b38:	2304      	movs	r3, #4
 8005b3a:	e002      	b.n	8005b42 <UART_SetConfig+0x1072>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e000      	b.n	8005b42 <UART_SetConfig+0x1072>
 8005b40:	2301      	movs	r3, #1
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	085b      	lsrs	r3, r3, #1
 8005b4e:	441a      	add	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b5c:	e16d      	b.n	8005e3a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b5e:	f7fd f9ef 	bl	8002f40 <HAL_RCC_GetPCLK2Freq>
 8005b62:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d044      	beq.n	8005bf6 <UART_SetConfig+0x1126>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d03e      	beq.n	8005bf2 <UART_SetConfig+0x1122>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d038      	beq.n	8005bee <UART_SetConfig+0x111e>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d032      	beq.n	8005bea <UART_SetConfig+0x111a>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d02c      	beq.n	8005be6 <UART_SetConfig+0x1116>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	2b05      	cmp	r3, #5
 8005b92:	d026      	beq.n	8005be2 <UART_SetConfig+0x1112>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	2b06      	cmp	r3, #6
 8005b9a:	d020      	beq.n	8005bde <UART_SetConfig+0x110e>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	2b07      	cmp	r3, #7
 8005ba2:	d01a      	beq.n	8005bda <UART_SetConfig+0x110a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d014      	beq.n	8005bd6 <UART_SetConfig+0x1106>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	2b09      	cmp	r3, #9
 8005bb2:	d00e      	beq.n	8005bd2 <UART_SetConfig+0x1102>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	2b0a      	cmp	r3, #10
 8005bba:	d008      	beq.n	8005bce <UART_SetConfig+0x10fe>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	2b0b      	cmp	r3, #11
 8005bc2:	d102      	bne.n	8005bca <UART_SetConfig+0x10fa>
 8005bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bc8:	e016      	b.n	8005bf8 <UART_SetConfig+0x1128>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e014      	b.n	8005bf8 <UART_SetConfig+0x1128>
 8005bce:	2380      	movs	r3, #128	; 0x80
 8005bd0:	e012      	b.n	8005bf8 <UART_SetConfig+0x1128>
 8005bd2:	2340      	movs	r3, #64	; 0x40
 8005bd4:	e010      	b.n	8005bf8 <UART_SetConfig+0x1128>
 8005bd6:	2320      	movs	r3, #32
 8005bd8:	e00e      	b.n	8005bf8 <UART_SetConfig+0x1128>
 8005bda:	2310      	movs	r3, #16
 8005bdc:	e00c      	b.n	8005bf8 <UART_SetConfig+0x1128>
 8005bde:	230c      	movs	r3, #12
 8005be0:	e00a      	b.n	8005bf8 <UART_SetConfig+0x1128>
 8005be2:	230a      	movs	r3, #10
 8005be4:	e008      	b.n	8005bf8 <UART_SetConfig+0x1128>
 8005be6:	2308      	movs	r3, #8
 8005be8:	e006      	b.n	8005bf8 <UART_SetConfig+0x1128>
 8005bea:	2306      	movs	r3, #6
 8005bec:	e004      	b.n	8005bf8 <UART_SetConfig+0x1128>
 8005bee:	2304      	movs	r3, #4
 8005bf0:	e002      	b.n	8005bf8 <UART_SetConfig+0x1128>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	e000      	b.n	8005bf8 <UART_SetConfig+0x1128>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	441a      	add	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c12:	e112      	b.n	8005e3a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d044      	beq.n	8005ca6 <UART_SetConfig+0x11d6>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d03e      	beq.n	8005ca2 <UART_SetConfig+0x11d2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d038      	beq.n	8005c9e <UART_SetConfig+0x11ce>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d032      	beq.n	8005c9a <UART_SetConfig+0x11ca>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d02c      	beq.n	8005c96 <UART_SetConfig+0x11c6>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	2b05      	cmp	r3, #5
 8005c42:	d026      	beq.n	8005c92 <UART_SetConfig+0x11c2>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	2b06      	cmp	r3, #6
 8005c4a:	d020      	beq.n	8005c8e <UART_SetConfig+0x11be>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	2b07      	cmp	r3, #7
 8005c52:	d01a      	beq.n	8005c8a <UART_SetConfig+0x11ba>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d014      	beq.n	8005c86 <UART_SetConfig+0x11b6>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	2b09      	cmp	r3, #9
 8005c62:	d00e      	beq.n	8005c82 <UART_SetConfig+0x11b2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	2b0a      	cmp	r3, #10
 8005c6a:	d008      	beq.n	8005c7e <UART_SetConfig+0x11ae>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	2b0b      	cmp	r3, #11
 8005c72:	d102      	bne.n	8005c7a <UART_SetConfig+0x11aa>
 8005c74:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005c78:	e016      	b.n	8005ca8 <UART_SetConfig+0x11d8>
 8005c7a:	4b81      	ldr	r3, [pc, #516]	; (8005e80 <UART_SetConfig+0x13b0>)
 8005c7c:	e014      	b.n	8005ca8 <UART_SetConfig+0x11d8>
 8005c7e:	4b81      	ldr	r3, [pc, #516]	; (8005e84 <UART_SetConfig+0x13b4>)
 8005c80:	e012      	b.n	8005ca8 <UART_SetConfig+0x11d8>
 8005c82:	4b81      	ldr	r3, [pc, #516]	; (8005e88 <UART_SetConfig+0x13b8>)
 8005c84:	e010      	b.n	8005ca8 <UART_SetConfig+0x11d8>
 8005c86:	4b81      	ldr	r3, [pc, #516]	; (8005e8c <UART_SetConfig+0x13bc>)
 8005c88:	e00e      	b.n	8005ca8 <UART_SetConfig+0x11d8>
 8005c8a:	4b81      	ldr	r3, [pc, #516]	; (8005e90 <UART_SetConfig+0x13c0>)
 8005c8c:	e00c      	b.n	8005ca8 <UART_SetConfig+0x11d8>
 8005c8e:	4b81      	ldr	r3, [pc, #516]	; (8005e94 <UART_SetConfig+0x13c4>)
 8005c90:	e00a      	b.n	8005ca8 <UART_SetConfig+0x11d8>
 8005c92:	4b81      	ldr	r3, [pc, #516]	; (8005e98 <UART_SetConfig+0x13c8>)
 8005c94:	e008      	b.n	8005ca8 <UART_SetConfig+0x11d8>
 8005c96:	4b81      	ldr	r3, [pc, #516]	; (8005e9c <UART_SetConfig+0x13cc>)
 8005c98:	e006      	b.n	8005ca8 <UART_SetConfig+0x11d8>
 8005c9a:	4b81      	ldr	r3, [pc, #516]	; (8005ea0 <UART_SetConfig+0x13d0>)
 8005c9c:	e004      	b.n	8005ca8 <UART_SetConfig+0x11d8>
 8005c9e:	4b81      	ldr	r3, [pc, #516]	; (8005ea4 <UART_SetConfig+0x13d4>)
 8005ca0:	e002      	b.n	8005ca8 <UART_SetConfig+0x11d8>
 8005ca2:	4b81      	ldr	r3, [pc, #516]	; (8005ea8 <UART_SetConfig+0x13d8>)
 8005ca4:	e000      	b.n	8005ca8 <UART_SetConfig+0x11d8>
 8005ca6:	4b76      	ldr	r3, [pc, #472]	; (8005e80 <UART_SetConfig+0x13b0>)
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6852      	ldr	r2, [r2, #4]
 8005cac:	0852      	lsrs	r2, r2, #1
 8005cae:	441a      	add	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005cbc:	e0bd      	b.n	8005e3a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cbe:	f7fd f895 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8005cc2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d044      	beq.n	8005d56 <UART_SetConfig+0x1286>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d03e      	beq.n	8005d52 <UART_SetConfig+0x1282>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d038      	beq.n	8005d4e <UART_SetConfig+0x127e>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d032      	beq.n	8005d4a <UART_SetConfig+0x127a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d02c      	beq.n	8005d46 <UART_SetConfig+0x1276>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	2b05      	cmp	r3, #5
 8005cf2:	d026      	beq.n	8005d42 <UART_SetConfig+0x1272>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	2b06      	cmp	r3, #6
 8005cfa:	d020      	beq.n	8005d3e <UART_SetConfig+0x126e>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b07      	cmp	r3, #7
 8005d02:	d01a      	beq.n	8005d3a <UART_SetConfig+0x126a>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d014      	beq.n	8005d36 <UART_SetConfig+0x1266>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	2b09      	cmp	r3, #9
 8005d12:	d00e      	beq.n	8005d32 <UART_SetConfig+0x1262>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b0a      	cmp	r3, #10
 8005d1a:	d008      	beq.n	8005d2e <UART_SetConfig+0x125e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	2b0b      	cmp	r3, #11
 8005d22:	d102      	bne.n	8005d2a <UART_SetConfig+0x125a>
 8005d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d28:	e016      	b.n	8005d58 <UART_SetConfig+0x1288>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e014      	b.n	8005d58 <UART_SetConfig+0x1288>
 8005d2e:	2380      	movs	r3, #128	; 0x80
 8005d30:	e012      	b.n	8005d58 <UART_SetConfig+0x1288>
 8005d32:	2340      	movs	r3, #64	; 0x40
 8005d34:	e010      	b.n	8005d58 <UART_SetConfig+0x1288>
 8005d36:	2320      	movs	r3, #32
 8005d38:	e00e      	b.n	8005d58 <UART_SetConfig+0x1288>
 8005d3a:	2310      	movs	r3, #16
 8005d3c:	e00c      	b.n	8005d58 <UART_SetConfig+0x1288>
 8005d3e:	230c      	movs	r3, #12
 8005d40:	e00a      	b.n	8005d58 <UART_SetConfig+0x1288>
 8005d42:	230a      	movs	r3, #10
 8005d44:	e008      	b.n	8005d58 <UART_SetConfig+0x1288>
 8005d46:	2308      	movs	r3, #8
 8005d48:	e006      	b.n	8005d58 <UART_SetConfig+0x1288>
 8005d4a:	2306      	movs	r3, #6
 8005d4c:	e004      	b.n	8005d58 <UART_SetConfig+0x1288>
 8005d4e:	2304      	movs	r3, #4
 8005d50:	e002      	b.n	8005d58 <UART_SetConfig+0x1288>
 8005d52:	2302      	movs	r3, #2
 8005d54:	e000      	b.n	8005d58 <UART_SetConfig+0x1288>
 8005d56:	2301      	movs	r3, #1
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	085b      	lsrs	r3, r3, #1
 8005d64:	441a      	add	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d72:	e062      	b.n	8005e3a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d04e      	beq.n	8005e1a <UART_SetConfig+0x134a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d047      	beq.n	8005e14 <UART_SetConfig+0x1344>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d040      	beq.n	8005e0e <UART_SetConfig+0x133e>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d039      	beq.n	8005e08 <UART_SetConfig+0x1338>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d032      	beq.n	8005e02 <UART_SetConfig+0x1332>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	2b05      	cmp	r3, #5
 8005da2:	d02b      	beq.n	8005dfc <UART_SetConfig+0x132c>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	2b06      	cmp	r3, #6
 8005daa:	d024      	beq.n	8005df6 <UART_SetConfig+0x1326>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	2b07      	cmp	r3, #7
 8005db2:	d01d      	beq.n	8005df0 <UART_SetConfig+0x1320>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d016      	beq.n	8005dea <UART_SetConfig+0x131a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b09      	cmp	r3, #9
 8005dc2:	d00f      	beq.n	8005de4 <UART_SetConfig+0x1314>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b0a      	cmp	r3, #10
 8005dca:	d008      	beq.n	8005dde <UART_SetConfig+0x130e>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b0b      	cmp	r3, #11
 8005dd2:	d101      	bne.n	8005dd8 <UART_SetConfig+0x1308>
 8005dd4:	2380      	movs	r3, #128	; 0x80
 8005dd6:	e022      	b.n	8005e1e <UART_SetConfig+0x134e>
 8005dd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ddc:	e01f      	b.n	8005e1e <UART_SetConfig+0x134e>
 8005dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005de2:	e01c      	b.n	8005e1e <UART_SetConfig+0x134e>
 8005de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005de8:	e019      	b.n	8005e1e <UART_SetConfig+0x134e>
 8005dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dee:	e016      	b.n	8005e1e <UART_SetConfig+0x134e>
 8005df0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005df4:	e013      	b.n	8005e1e <UART_SetConfig+0x134e>
 8005df6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005dfa:	e010      	b.n	8005e1e <UART_SetConfig+0x134e>
 8005dfc:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005e00:	e00d      	b.n	8005e1e <UART_SetConfig+0x134e>
 8005e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e06:	e00a      	b.n	8005e1e <UART_SetConfig+0x134e>
 8005e08:	f241 5355 	movw	r3, #5461	; 0x1555
 8005e0c:	e007      	b.n	8005e1e <UART_SetConfig+0x134e>
 8005e0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e12:	e004      	b.n	8005e1e <UART_SetConfig+0x134e>
 8005e14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e18:	e001      	b.n	8005e1e <UART_SetConfig+0x134e>
 8005e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6852      	ldr	r2, [r2, #4]
 8005e22:	0852      	lsrs	r2, r2, #1
 8005e24:	441a      	add	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e32:	e002      	b.n	8005e3a <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	76fb      	strb	r3, [r7, #27]
        break;
 8005e38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	2b0f      	cmp	r3, #15
 8005e3e:	d908      	bls.n	8005e52 <UART_SetConfig+0x1382>
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e46:	d204      	bcs.n	8005e52 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	60da      	str	r2, [r3, #12]
 8005e50:	e001      	b.n	8005e56 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	76fb      	strb	r3, [r7, #27]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005e72:	7efb      	ldrb	r3, [r7, #27]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3728      	adds	r7, #40	; 0x28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005e7e:	bf00      	nop
 8005e80:	00f42400 	.word	0x00f42400
 8005e84:	0001e848 	.word	0x0001e848
 8005e88:	0003d090 	.word	0x0003d090
 8005e8c:	0007a120 	.word	0x0007a120
 8005e90:	000f4240 	.word	0x000f4240
 8005e94:	00145855 	.word	0x00145855
 8005e98:	00186a00 	.word	0x00186a00
 8005e9c:	001e8480 	.word	0x001e8480
 8005ea0:	0028b0aa 	.word	0x0028b0aa
 8005ea4:	003d0900 	.word	0x003d0900
 8005ea8:	007a1200 	.word	0x007a1200

08005eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00a      	beq.n	8005ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f40:	f003 0310 	and.w	r3, r3, #16
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01a      	beq.n	8005fc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005faa:	d10a      	bne.n	8005fc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	605a      	str	r2, [r3, #4]
  }
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af02      	add	r7, sp, #8
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006000:	f7fb fe20 	bl	8001c44 <HAL_GetTick>
 8006004:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b08      	cmp	r3, #8
 8006012:	d10e      	bne.n	8006032 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f82c 	bl	8006080 <UART_WaitOnFlagUntilTimeout>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e022      	b.n	8006078 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b04      	cmp	r3, #4
 800603e:	d10e      	bne.n	800605e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f816 	bl	8006080 <UART_WaitOnFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e00c      	b.n	8006078 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	4613      	mov	r3, r2
 800608e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006090:	e062      	b.n	8006158 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006098:	d05e      	beq.n	8006158 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609a:	f7fb fdd3 	bl	8001c44 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d302      	bcc.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d11d      	bne.n	80060ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060be:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689a      	ldr	r2, [r3, #8]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0201 	bic.w	r2, r2, #1
 80060ce:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2220      	movs	r2, #32
 80060dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e045      	b.n	8006178 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0304 	and.w	r3, r3, #4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d02e      	beq.n	8006158 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006108:	d126      	bne.n	8006158 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006112:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006122:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0201 	bic.w	r2, r2, #1
 8006132:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e00f      	b.n	8006178 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	69da      	ldr	r2, [r3, #28]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	4013      	ands	r3, r2
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	429a      	cmp	r2, r3
 8006166:	bf0c      	ite	eq
 8006168:	2301      	moveq	r3, #1
 800616a:	2300      	movne	r3, #0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	461a      	mov	r2, r3
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	429a      	cmp	r2, r3
 8006174:	d08d      	beq.n	8006092 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800618e:	2b01      	cmp	r3, #1
 8006190:	d101      	bne.n	8006196 <HAL_UARTEx_DisableFifoMode+0x16>
 8006192:	2302      	movs	r3, #2
 8006194:	e027      	b.n	80061e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2224      	movs	r2, #36	; 0x24
 80061a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0201 	bic.w	r2, r2, #1
 80061bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006206:	2302      	movs	r3, #2
 8006208:	e02d      	b.n	8006266 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2224      	movs	r2, #36	; 0x24
 8006216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0201 	bic.w	r2, r2, #1
 8006230:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f850 	bl	80062ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006282:	2302      	movs	r3, #2
 8006284:	e02d      	b.n	80062e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2224      	movs	r2, #36	; 0x24
 8006292:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0201 	bic.w	r2, r2, #1
 80062ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f812 	bl	80062ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b089      	sub	sp, #36	; 0x24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80062f4:	4a2f      	ldr	r2, [pc, #188]	; (80063b4 <UARTEx_SetNbDataToProcess+0xc8>)
 80062f6:	f107 0314 	add.w	r3, r7, #20
 80062fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062fe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006302:	4a2d      	ldr	r2, [pc, #180]	; (80063b8 <UARTEx_SetNbDataToProcess+0xcc>)
 8006304:	f107 030c 	add.w	r3, r7, #12
 8006308:	e892 0003 	ldmia.w	r2, {r0, r1}
 800630c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006314:	2b00      	cmp	r3, #0
 8006316:	d108      	bne.n	800632a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006328:	e03d      	b.n	80063a6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800632a:	2308      	movs	r3, #8
 800632c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800632e:	2308      	movs	r3, #8
 8006330:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	0e5b      	lsrs	r3, r3, #25
 800633a:	b2db      	uxtb	r3, r3
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	0f5b      	lsrs	r3, r3, #29
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006352:	7fbb      	ldrb	r3, [r7, #30]
 8006354:	7f3a      	ldrb	r2, [r7, #28]
 8006356:	f107 0120 	add.w	r1, r7, #32
 800635a:	440a      	add	r2, r1
 800635c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006360:	fb02 f303 	mul.w	r3, r2, r3
 8006364:	7f3a      	ldrb	r2, [r7, #28]
 8006366:	f107 0120 	add.w	r1, r7, #32
 800636a:	440a      	add	r2, r1
 800636c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006370:	fb93 f3f2 	sdiv	r3, r3, r2
 8006374:	b29a      	uxth	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800637c:	7ffb      	ldrb	r3, [r7, #31]
 800637e:	7f7a      	ldrb	r2, [r7, #29]
 8006380:	f107 0120 	add.w	r1, r7, #32
 8006384:	440a      	add	r2, r1
 8006386:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800638a:	fb02 f303 	mul.w	r3, r2, r3
 800638e:	7f7a      	ldrb	r2, [r7, #29]
 8006390:	f107 0120 	add.w	r1, r7, #32
 8006394:	440a      	add	r2, r1
 8006396:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800639a:	fb93 f3f2 	sdiv	r3, r3, r2
 800639e:	b29a      	uxth	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80063a6:	bf00      	nop
 80063a8:	3724      	adds	r7, #36	; 0x24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	08007194 	.word	0x08007194
 80063b8:	0800719c 	.word	0x0800719c

080063bc <__errno>:
 80063bc:	4b01      	ldr	r3, [pc, #4]	; (80063c4 <__errno+0x8>)
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	2000000c 	.word	0x2000000c

080063c8 <__libc_init_array>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	4e0d      	ldr	r6, [pc, #52]	; (8006400 <__libc_init_array+0x38>)
 80063cc:	4c0d      	ldr	r4, [pc, #52]	; (8006404 <__libc_init_array+0x3c>)
 80063ce:	1ba4      	subs	r4, r4, r6
 80063d0:	10a4      	asrs	r4, r4, #2
 80063d2:	2500      	movs	r5, #0
 80063d4:	42a5      	cmp	r5, r4
 80063d6:	d109      	bne.n	80063ec <__libc_init_array+0x24>
 80063d8:	4e0b      	ldr	r6, [pc, #44]	; (8006408 <__libc_init_array+0x40>)
 80063da:	4c0c      	ldr	r4, [pc, #48]	; (800640c <__libc_init_array+0x44>)
 80063dc:	f000 fc28 	bl	8006c30 <_init>
 80063e0:	1ba4      	subs	r4, r4, r6
 80063e2:	10a4      	asrs	r4, r4, #2
 80063e4:	2500      	movs	r5, #0
 80063e6:	42a5      	cmp	r5, r4
 80063e8:	d105      	bne.n	80063f6 <__libc_init_array+0x2e>
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063f0:	4798      	blx	r3
 80063f2:	3501      	adds	r5, #1
 80063f4:	e7ee      	b.n	80063d4 <__libc_init_array+0xc>
 80063f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063fa:	4798      	blx	r3
 80063fc:	3501      	adds	r5, #1
 80063fe:	e7f2      	b.n	80063e6 <__libc_init_array+0x1e>
 8006400:	08007228 	.word	0x08007228
 8006404:	08007228 	.word	0x08007228
 8006408:	08007228 	.word	0x08007228
 800640c:	0800722c 	.word	0x0800722c

08006410 <memcpy>:
 8006410:	b510      	push	{r4, lr}
 8006412:	1e43      	subs	r3, r0, #1
 8006414:	440a      	add	r2, r1
 8006416:	4291      	cmp	r1, r2
 8006418:	d100      	bne.n	800641c <memcpy+0xc>
 800641a:	bd10      	pop	{r4, pc}
 800641c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006420:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006424:	e7f7      	b.n	8006416 <memcpy+0x6>

08006426 <memset>:
 8006426:	4402      	add	r2, r0
 8006428:	4603      	mov	r3, r0
 800642a:	4293      	cmp	r3, r2
 800642c:	d100      	bne.n	8006430 <memset+0xa>
 800642e:	4770      	bx	lr
 8006430:	f803 1b01 	strb.w	r1, [r3], #1
 8006434:	e7f9      	b.n	800642a <memset+0x4>
	...

08006438 <siprintf>:
 8006438:	b40e      	push	{r1, r2, r3}
 800643a:	b500      	push	{lr}
 800643c:	b09c      	sub	sp, #112	; 0x70
 800643e:	ab1d      	add	r3, sp, #116	; 0x74
 8006440:	9002      	str	r0, [sp, #8]
 8006442:	9006      	str	r0, [sp, #24]
 8006444:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006448:	4809      	ldr	r0, [pc, #36]	; (8006470 <siprintf+0x38>)
 800644a:	9107      	str	r1, [sp, #28]
 800644c:	9104      	str	r1, [sp, #16]
 800644e:	4909      	ldr	r1, [pc, #36]	; (8006474 <siprintf+0x3c>)
 8006450:	f853 2b04 	ldr.w	r2, [r3], #4
 8006454:	9105      	str	r1, [sp, #20]
 8006456:	6800      	ldr	r0, [r0, #0]
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	a902      	add	r1, sp, #8
 800645c:	f000 f866 	bl	800652c <_svfiprintf_r>
 8006460:	9b02      	ldr	r3, [sp, #8]
 8006462:	2200      	movs	r2, #0
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	b01c      	add	sp, #112	; 0x70
 8006468:	f85d eb04 	ldr.w	lr, [sp], #4
 800646c:	b003      	add	sp, #12
 800646e:	4770      	bx	lr
 8006470:	2000000c 	.word	0x2000000c
 8006474:	ffff0208 	.word	0xffff0208

08006478 <__ssputs_r>:
 8006478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800647c:	688e      	ldr	r6, [r1, #8]
 800647e:	429e      	cmp	r6, r3
 8006480:	4682      	mov	sl, r0
 8006482:	460c      	mov	r4, r1
 8006484:	4690      	mov	r8, r2
 8006486:	4699      	mov	r9, r3
 8006488:	d837      	bhi.n	80064fa <__ssputs_r+0x82>
 800648a:	898a      	ldrh	r2, [r1, #12]
 800648c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006490:	d031      	beq.n	80064f6 <__ssputs_r+0x7e>
 8006492:	6825      	ldr	r5, [r4, #0]
 8006494:	6909      	ldr	r1, [r1, #16]
 8006496:	1a6f      	subs	r7, r5, r1
 8006498:	6965      	ldr	r5, [r4, #20]
 800649a:	2302      	movs	r3, #2
 800649c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80064a4:	f109 0301 	add.w	r3, r9, #1
 80064a8:	443b      	add	r3, r7
 80064aa:	429d      	cmp	r5, r3
 80064ac:	bf38      	it	cc
 80064ae:	461d      	movcc	r5, r3
 80064b0:	0553      	lsls	r3, r2, #21
 80064b2:	d530      	bpl.n	8006516 <__ssputs_r+0x9e>
 80064b4:	4629      	mov	r1, r5
 80064b6:	f000 fb21 	bl	8006afc <_malloc_r>
 80064ba:	4606      	mov	r6, r0
 80064bc:	b950      	cbnz	r0, 80064d4 <__ssputs_r+0x5c>
 80064be:	230c      	movs	r3, #12
 80064c0:	f8ca 3000 	str.w	r3, [sl]
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ca:	81a3      	strh	r3, [r4, #12]
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295
 80064d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d4:	463a      	mov	r2, r7
 80064d6:	6921      	ldr	r1, [r4, #16]
 80064d8:	f7ff ff9a 	bl	8006410 <memcpy>
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e6:	81a3      	strh	r3, [r4, #12]
 80064e8:	6126      	str	r6, [r4, #16]
 80064ea:	6165      	str	r5, [r4, #20]
 80064ec:	443e      	add	r6, r7
 80064ee:	1bed      	subs	r5, r5, r7
 80064f0:	6026      	str	r6, [r4, #0]
 80064f2:	60a5      	str	r5, [r4, #8]
 80064f4:	464e      	mov	r6, r9
 80064f6:	454e      	cmp	r6, r9
 80064f8:	d900      	bls.n	80064fc <__ssputs_r+0x84>
 80064fa:	464e      	mov	r6, r9
 80064fc:	4632      	mov	r2, r6
 80064fe:	4641      	mov	r1, r8
 8006500:	6820      	ldr	r0, [r4, #0]
 8006502:	f000 fa93 	bl	8006a2c <memmove>
 8006506:	68a3      	ldr	r3, [r4, #8]
 8006508:	1b9b      	subs	r3, r3, r6
 800650a:	60a3      	str	r3, [r4, #8]
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	441e      	add	r6, r3
 8006510:	6026      	str	r6, [r4, #0]
 8006512:	2000      	movs	r0, #0
 8006514:	e7dc      	b.n	80064d0 <__ssputs_r+0x58>
 8006516:	462a      	mov	r2, r5
 8006518:	f000 fb4a 	bl	8006bb0 <_realloc_r>
 800651c:	4606      	mov	r6, r0
 800651e:	2800      	cmp	r0, #0
 8006520:	d1e2      	bne.n	80064e8 <__ssputs_r+0x70>
 8006522:	6921      	ldr	r1, [r4, #16]
 8006524:	4650      	mov	r0, sl
 8006526:	f000 fa9b 	bl	8006a60 <_free_r>
 800652a:	e7c8      	b.n	80064be <__ssputs_r+0x46>

0800652c <_svfiprintf_r>:
 800652c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006530:	461d      	mov	r5, r3
 8006532:	898b      	ldrh	r3, [r1, #12]
 8006534:	061f      	lsls	r7, r3, #24
 8006536:	b09d      	sub	sp, #116	; 0x74
 8006538:	4680      	mov	r8, r0
 800653a:	460c      	mov	r4, r1
 800653c:	4616      	mov	r6, r2
 800653e:	d50f      	bpl.n	8006560 <_svfiprintf_r+0x34>
 8006540:	690b      	ldr	r3, [r1, #16]
 8006542:	b96b      	cbnz	r3, 8006560 <_svfiprintf_r+0x34>
 8006544:	2140      	movs	r1, #64	; 0x40
 8006546:	f000 fad9 	bl	8006afc <_malloc_r>
 800654a:	6020      	str	r0, [r4, #0]
 800654c:	6120      	str	r0, [r4, #16]
 800654e:	b928      	cbnz	r0, 800655c <_svfiprintf_r+0x30>
 8006550:	230c      	movs	r3, #12
 8006552:	f8c8 3000 	str.w	r3, [r8]
 8006556:	f04f 30ff 	mov.w	r0, #4294967295
 800655a:	e0c8      	b.n	80066ee <_svfiprintf_r+0x1c2>
 800655c:	2340      	movs	r3, #64	; 0x40
 800655e:	6163      	str	r3, [r4, #20]
 8006560:	2300      	movs	r3, #0
 8006562:	9309      	str	r3, [sp, #36]	; 0x24
 8006564:	2320      	movs	r3, #32
 8006566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800656a:	2330      	movs	r3, #48	; 0x30
 800656c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006570:	9503      	str	r5, [sp, #12]
 8006572:	f04f 0b01 	mov.w	fp, #1
 8006576:	4637      	mov	r7, r6
 8006578:	463d      	mov	r5, r7
 800657a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800657e:	b10b      	cbz	r3, 8006584 <_svfiprintf_r+0x58>
 8006580:	2b25      	cmp	r3, #37	; 0x25
 8006582:	d13e      	bne.n	8006602 <_svfiprintf_r+0xd6>
 8006584:	ebb7 0a06 	subs.w	sl, r7, r6
 8006588:	d00b      	beq.n	80065a2 <_svfiprintf_r+0x76>
 800658a:	4653      	mov	r3, sl
 800658c:	4632      	mov	r2, r6
 800658e:	4621      	mov	r1, r4
 8006590:	4640      	mov	r0, r8
 8006592:	f7ff ff71 	bl	8006478 <__ssputs_r>
 8006596:	3001      	adds	r0, #1
 8006598:	f000 80a4 	beq.w	80066e4 <_svfiprintf_r+0x1b8>
 800659c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659e:	4453      	add	r3, sl
 80065a0:	9309      	str	r3, [sp, #36]	; 0x24
 80065a2:	783b      	ldrb	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 809d 	beq.w	80066e4 <_svfiprintf_r+0x1b8>
 80065aa:	2300      	movs	r3, #0
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295
 80065b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065b4:	9304      	str	r3, [sp, #16]
 80065b6:	9307      	str	r3, [sp, #28]
 80065b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065bc:	931a      	str	r3, [sp, #104]	; 0x68
 80065be:	462f      	mov	r7, r5
 80065c0:	2205      	movs	r2, #5
 80065c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80065c6:	4850      	ldr	r0, [pc, #320]	; (8006708 <_svfiprintf_r+0x1dc>)
 80065c8:	f7f9 fe22 	bl	8000210 <memchr>
 80065cc:	9b04      	ldr	r3, [sp, #16]
 80065ce:	b9d0      	cbnz	r0, 8006606 <_svfiprintf_r+0xda>
 80065d0:	06d9      	lsls	r1, r3, #27
 80065d2:	bf44      	itt	mi
 80065d4:	2220      	movmi	r2, #32
 80065d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065da:	071a      	lsls	r2, r3, #28
 80065dc:	bf44      	itt	mi
 80065de:	222b      	movmi	r2, #43	; 0x2b
 80065e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065e4:	782a      	ldrb	r2, [r5, #0]
 80065e6:	2a2a      	cmp	r2, #42	; 0x2a
 80065e8:	d015      	beq.n	8006616 <_svfiprintf_r+0xea>
 80065ea:	9a07      	ldr	r2, [sp, #28]
 80065ec:	462f      	mov	r7, r5
 80065ee:	2000      	movs	r0, #0
 80065f0:	250a      	movs	r5, #10
 80065f2:	4639      	mov	r1, r7
 80065f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065f8:	3b30      	subs	r3, #48	; 0x30
 80065fa:	2b09      	cmp	r3, #9
 80065fc:	d94d      	bls.n	800669a <_svfiprintf_r+0x16e>
 80065fe:	b1b8      	cbz	r0, 8006630 <_svfiprintf_r+0x104>
 8006600:	e00f      	b.n	8006622 <_svfiprintf_r+0xf6>
 8006602:	462f      	mov	r7, r5
 8006604:	e7b8      	b.n	8006578 <_svfiprintf_r+0x4c>
 8006606:	4a40      	ldr	r2, [pc, #256]	; (8006708 <_svfiprintf_r+0x1dc>)
 8006608:	1a80      	subs	r0, r0, r2
 800660a:	fa0b f000 	lsl.w	r0, fp, r0
 800660e:	4318      	orrs	r0, r3
 8006610:	9004      	str	r0, [sp, #16]
 8006612:	463d      	mov	r5, r7
 8006614:	e7d3      	b.n	80065be <_svfiprintf_r+0x92>
 8006616:	9a03      	ldr	r2, [sp, #12]
 8006618:	1d11      	adds	r1, r2, #4
 800661a:	6812      	ldr	r2, [r2, #0]
 800661c:	9103      	str	r1, [sp, #12]
 800661e:	2a00      	cmp	r2, #0
 8006620:	db01      	blt.n	8006626 <_svfiprintf_r+0xfa>
 8006622:	9207      	str	r2, [sp, #28]
 8006624:	e004      	b.n	8006630 <_svfiprintf_r+0x104>
 8006626:	4252      	negs	r2, r2
 8006628:	f043 0302 	orr.w	r3, r3, #2
 800662c:	9207      	str	r2, [sp, #28]
 800662e:	9304      	str	r3, [sp, #16]
 8006630:	783b      	ldrb	r3, [r7, #0]
 8006632:	2b2e      	cmp	r3, #46	; 0x2e
 8006634:	d10c      	bne.n	8006650 <_svfiprintf_r+0x124>
 8006636:	787b      	ldrb	r3, [r7, #1]
 8006638:	2b2a      	cmp	r3, #42	; 0x2a
 800663a:	d133      	bne.n	80066a4 <_svfiprintf_r+0x178>
 800663c:	9b03      	ldr	r3, [sp, #12]
 800663e:	1d1a      	adds	r2, r3, #4
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	9203      	str	r2, [sp, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	bfb8      	it	lt
 8006648:	f04f 33ff 	movlt.w	r3, #4294967295
 800664c:	3702      	adds	r7, #2
 800664e:	9305      	str	r3, [sp, #20]
 8006650:	4d2e      	ldr	r5, [pc, #184]	; (800670c <_svfiprintf_r+0x1e0>)
 8006652:	7839      	ldrb	r1, [r7, #0]
 8006654:	2203      	movs	r2, #3
 8006656:	4628      	mov	r0, r5
 8006658:	f7f9 fdda 	bl	8000210 <memchr>
 800665c:	b138      	cbz	r0, 800666e <_svfiprintf_r+0x142>
 800665e:	2340      	movs	r3, #64	; 0x40
 8006660:	1b40      	subs	r0, r0, r5
 8006662:	fa03 f000 	lsl.w	r0, r3, r0
 8006666:	9b04      	ldr	r3, [sp, #16]
 8006668:	4303      	orrs	r3, r0
 800666a:	3701      	adds	r7, #1
 800666c:	9304      	str	r3, [sp, #16]
 800666e:	7839      	ldrb	r1, [r7, #0]
 8006670:	4827      	ldr	r0, [pc, #156]	; (8006710 <_svfiprintf_r+0x1e4>)
 8006672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006676:	2206      	movs	r2, #6
 8006678:	1c7e      	adds	r6, r7, #1
 800667a:	f7f9 fdc9 	bl	8000210 <memchr>
 800667e:	2800      	cmp	r0, #0
 8006680:	d038      	beq.n	80066f4 <_svfiprintf_r+0x1c8>
 8006682:	4b24      	ldr	r3, [pc, #144]	; (8006714 <_svfiprintf_r+0x1e8>)
 8006684:	bb13      	cbnz	r3, 80066cc <_svfiprintf_r+0x1a0>
 8006686:	9b03      	ldr	r3, [sp, #12]
 8006688:	3307      	adds	r3, #7
 800668a:	f023 0307 	bic.w	r3, r3, #7
 800668e:	3308      	adds	r3, #8
 8006690:	9303      	str	r3, [sp, #12]
 8006692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006694:	444b      	add	r3, r9
 8006696:	9309      	str	r3, [sp, #36]	; 0x24
 8006698:	e76d      	b.n	8006576 <_svfiprintf_r+0x4a>
 800669a:	fb05 3202 	mla	r2, r5, r2, r3
 800669e:	2001      	movs	r0, #1
 80066a0:	460f      	mov	r7, r1
 80066a2:	e7a6      	b.n	80065f2 <_svfiprintf_r+0xc6>
 80066a4:	2300      	movs	r3, #0
 80066a6:	3701      	adds	r7, #1
 80066a8:	9305      	str	r3, [sp, #20]
 80066aa:	4619      	mov	r1, r3
 80066ac:	250a      	movs	r5, #10
 80066ae:	4638      	mov	r0, r7
 80066b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066b4:	3a30      	subs	r2, #48	; 0x30
 80066b6:	2a09      	cmp	r2, #9
 80066b8:	d903      	bls.n	80066c2 <_svfiprintf_r+0x196>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0c8      	beq.n	8006650 <_svfiprintf_r+0x124>
 80066be:	9105      	str	r1, [sp, #20]
 80066c0:	e7c6      	b.n	8006650 <_svfiprintf_r+0x124>
 80066c2:	fb05 2101 	mla	r1, r5, r1, r2
 80066c6:	2301      	movs	r3, #1
 80066c8:	4607      	mov	r7, r0
 80066ca:	e7f0      	b.n	80066ae <_svfiprintf_r+0x182>
 80066cc:	ab03      	add	r3, sp, #12
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	4622      	mov	r2, r4
 80066d2:	4b11      	ldr	r3, [pc, #68]	; (8006718 <_svfiprintf_r+0x1ec>)
 80066d4:	a904      	add	r1, sp, #16
 80066d6:	4640      	mov	r0, r8
 80066d8:	f3af 8000 	nop.w
 80066dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066e0:	4681      	mov	r9, r0
 80066e2:	d1d6      	bne.n	8006692 <_svfiprintf_r+0x166>
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	065b      	lsls	r3, r3, #25
 80066e8:	f53f af35 	bmi.w	8006556 <_svfiprintf_r+0x2a>
 80066ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ee:	b01d      	add	sp, #116	; 0x74
 80066f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f4:	ab03      	add	r3, sp, #12
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	4622      	mov	r2, r4
 80066fa:	4b07      	ldr	r3, [pc, #28]	; (8006718 <_svfiprintf_r+0x1ec>)
 80066fc:	a904      	add	r1, sp, #16
 80066fe:	4640      	mov	r0, r8
 8006700:	f000 f882 	bl	8006808 <_printf_i>
 8006704:	e7ea      	b.n	80066dc <_svfiprintf_r+0x1b0>
 8006706:	bf00      	nop
 8006708:	080071ec 	.word	0x080071ec
 800670c:	080071f2 	.word	0x080071f2
 8006710:	080071f6 	.word	0x080071f6
 8006714:	00000000 	.word	0x00000000
 8006718:	08006479 	.word	0x08006479

0800671c <_printf_common>:
 800671c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006720:	4691      	mov	r9, r2
 8006722:	461f      	mov	r7, r3
 8006724:	688a      	ldr	r2, [r1, #8]
 8006726:	690b      	ldr	r3, [r1, #16]
 8006728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800672c:	4293      	cmp	r3, r2
 800672e:	bfb8      	it	lt
 8006730:	4613      	movlt	r3, r2
 8006732:	f8c9 3000 	str.w	r3, [r9]
 8006736:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800673a:	4606      	mov	r6, r0
 800673c:	460c      	mov	r4, r1
 800673e:	b112      	cbz	r2, 8006746 <_printf_common+0x2a>
 8006740:	3301      	adds	r3, #1
 8006742:	f8c9 3000 	str.w	r3, [r9]
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	0699      	lsls	r1, r3, #26
 800674a:	bf42      	ittt	mi
 800674c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006750:	3302      	addmi	r3, #2
 8006752:	f8c9 3000 	strmi.w	r3, [r9]
 8006756:	6825      	ldr	r5, [r4, #0]
 8006758:	f015 0506 	ands.w	r5, r5, #6
 800675c:	d107      	bne.n	800676e <_printf_common+0x52>
 800675e:	f104 0a19 	add.w	sl, r4, #25
 8006762:	68e3      	ldr	r3, [r4, #12]
 8006764:	f8d9 2000 	ldr.w	r2, [r9]
 8006768:	1a9b      	subs	r3, r3, r2
 800676a:	42ab      	cmp	r3, r5
 800676c:	dc28      	bgt.n	80067c0 <_printf_common+0xa4>
 800676e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006772:	6822      	ldr	r2, [r4, #0]
 8006774:	3300      	adds	r3, #0
 8006776:	bf18      	it	ne
 8006778:	2301      	movne	r3, #1
 800677a:	0692      	lsls	r2, r2, #26
 800677c:	d42d      	bmi.n	80067da <_printf_common+0xbe>
 800677e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006782:	4639      	mov	r1, r7
 8006784:	4630      	mov	r0, r6
 8006786:	47c0      	blx	r8
 8006788:	3001      	adds	r0, #1
 800678a:	d020      	beq.n	80067ce <_printf_common+0xb2>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	68e5      	ldr	r5, [r4, #12]
 8006790:	f8d9 2000 	ldr.w	r2, [r9]
 8006794:	f003 0306 	and.w	r3, r3, #6
 8006798:	2b04      	cmp	r3, #4
 800679a:	bf08      	it	eq
 800679c:	1aad      	subeq	r5, r5, r2
 800679e:	68a3      	ldr	r3, [r4, #8]
 80067a0:	6922      	ldr	r2, [r4, #16]
 80067a2:	bf0c      	ite	eq
 80067a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067a8:	2500      	movne	r5, #0
 80067aa:	4293      	cmp	r3, r2
 80067ac:	bfc4      	itt	gt
 80067ae:	1a9b      	subgt	r3, r3, r2
 80067b0:	18ed      	addgt	r5, r5, r3
 80067b2:	f04f 0900 	mov.w	r9, #0
 80067b6:	341a      	adds	r4, #26
 80067b8:	454d      	cmp	r5, r9
 80067ba:	d11a      	bne.n	80067f2 <_printf_common+0xd6>
 80067bc:	2000      	movs	r0, #0
 80067be:	e008      	b.n	80067d2 <_printf_common+0xb6>
 80067c0:	2301      	movs	r3, #1
 80067c2:	4652      	mov	r2, sl
 80067c4:	4639      	mov	r1, r7
 80067c6:	4630      	mov	r0, r6
 80067c8:	47c0      	blx	r8
 80067ca:	3001      	adds	r0, #1
 80067cc:	d103      	bne.n	80067d6 <_printf_common+0xba>
 80067ce:	f04f 30ff 	mov.w	r0, #4294967295
 80067d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d6:	3501      	adds	r5, #1
 80067d8:	e7c3      	b.n	8006762 <_printf_common+0x46>
 80067da:	18e1      	adds	r1, r4, r3
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	2030      	movs	r0, #48	; 0x30
 80067e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067e4:	4422      	add	r2, r4
 80067e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067ee:	3302      	adds	r3, #2
 80067f0:	e7c5      	b.n	800677e <_printf_common+0x62>
 80067f2:	2301      	movs	r3, #1
 80067f4:	4622      	mov	r2, r4
 80067f6:	4639      	mov	r1, r7
 80067f8:	4630      	mov	r0, r6
 80067fa:	47c0      	blx	r8
 80067fc:	3001      	adds	r0, #1
 80067fe:	d0e6      	beq.n	80067ce <_printf_common+0xb2>
 8006800:	f109 0901 	add.w	r9, r9, #1
 8006804:	e7d8      	b.n	80067b8 <_printf_common+0x9c>
	...

08006808 <_printf_i>:
 8006808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800680c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006810:	460c      	mov	r4, r1
 8006812:	7e09      	ldrb	r1, [r1, #24]
 8006814:	b085      	sub	sp, #20
 8006816:	296e      	cmp	r1, #110	; 0x6e
 8006818:	4617      	mov	r7, r2
 800681a:	4606      	mov	r6, r0
 800681c:	4698      	mov	r8, r3
 800681e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006820:	f000 80b3 	beq.w	800698a <_printf_i+0x182>
 8006824:	d822      	bhi.n	800686c <_printf_i+0x64>
 8006826:	2963      	cmp	r1, #99	; 0x63
 8006828:	d036      	beq.n	8006898 <_printf_i+0x90>
 800682a:	d80a      	bhi.n	8006842 <_printf_i+0x3a>
 800682c:	2900      	cmp	r1, #0
 800682e:	f000 80b9 	beq.w	80069a4 <_printf_i+0x19c>
 8006832:	2958      	cmp	r1, #88	; 0x58
 8006834:	f000 8083 	beq.w	800693e <_printf_i+0x136>
 8006838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800683c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006840:	e032      	b.n	80068a8 <_printf_i+0xa0>
 8006842:	2964      	cmp	r1, #100	; 0x64
 8006844:	d001      	beq.n	800684a <_printf_i+0x42>
 8006846:	2969      	cmp	r1, #105	; 0x69
 8006848:	d1f6      	bne.n	8006838 <_printf_i+0x30>
 800684a:	6820      	ldr	r0, [r4, #0]
 800684c:	6813      	ldr	r3, [r2, #0]
 800684e:	0605      	lsls	r5, r0, #24
 8006850:	f103 0104 	add.w	r1, r3, #4
 8006854:	d52a      	bpl.n	80068ac <_printf_i+0xa4>
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6011      	str	r1, [r2, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	da03      	bge.n	8006866 <_printf_i+0x5e>
 800685e:	222d      	movs	r2, #45	; 0x2d
 8006860:	425b      	negs	r3, r3
 8006862:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006866:	486f      	ldr	r0, [pc, #444]	; (8006a24 <_printf_i+0x21c>)
 8006868:	220a      	movs	r2, #10
 800686a:	e039      	b.n	80068e0 <_printf_i+0xd8>
 800686c:	2973      	cmp	r1, #115	; 0x73
 800686e:	f000 809d 	beq.w	80069ac <_printf_i+0x1a4>
 8006872:	d808      	bhi.n	8006886 <_printf_i+0x7e>
 8006874:	296f      	cmp	r1, #111	; 0x6f
 8006876:	d020      	beq.n	80068ba <_printf_i+0xb2>
 8006878:	2970      	cmp	r1, #112	; 0x70
 800687a:	d1dd      	bne.n	8006838 <_printf_i+0x30>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	f043 0320 	orr.w	r3, r3, #32
 8006882:	6023      	str	r3, [r4, #0]
 8006884:	e003      	b.n	800688e <_printf_i+0x86>
 8006886:	2975      	cmp	r1, #117	; 0x75
 8006888:	d017      	beq.n	80068ba <_printf_i+0xb2>
 800688a:	2978      	cmp	r1, #120	; 0x78
 800688c:	d1d4      	bne.n	8006838 <_printf_i+0x30>
 800688e:	2378      	movs	r3, #120	; 0x78
 8006890:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006894:	4864      	ldr	r0, [pc, #400]	; (8006a28 <_printf_i+0x220>)
 8006896:	e055      	b.n	8006944 <_printf_i+0x13c>
 8006898:	6813      	ldr	r3, [r2, #0]
 800689a:	1d19      	adds	r1, r3, #4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6011      	str	r1, [r2, #0]
 80068a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068a8:	2301      	movs	r3, #1
 80068aa:	e08c      	b.n	80069c6 <_printf_i+0x1be>
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6011      	str	r1, [r2, #0]
 80068b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068b4:	bf18      	it	ne
 80068b6:	b21b      	sxthne	r3, r3
 80068b8:	e7cf      	b.n	800685a <_printf_i+0x52>
 80068ba:	6813      	ldr	r3, [r2, #0]
 80068bc:	6825      	ldr	r5, [r4, #0]
 80068be:	1d18      	adds	r0, r3, #4
 80068c0:	6010      	str	r0, [r2, #0]
 80068c2:	0628      	lsls	r0, r5, #24
 80068c4:	d501      	bpl.n	80068ca <_printf_i+0xc2>
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	e002      	b.n	80068d0 <_printf_i+0xc8>
 80068ca:	0668      	lsls	r0, r5, #25
 80068cc:	d5fb      	bpl.n	80068c6 <_printf_i+0xbe>
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	4854      	ldr	r0, [pc, #336]	; (8006a24 <_printf_i+0x21c>)
 80068d2:	296f      	cmp	r1, #111	; 0x6f
 80068d4:	bf14      	ite	ne
 80068d6:	220a      	movne	r2, #10
 80068d8:	2208      	moveq	r2, #8
 80068da:	2100      	movs	r1, #0
 80068dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068e0:	6865      	ldr	r5, [r4, #4]
 80068e2:	60a5      	str	r5, [r4, #8]
 80068e4:	2d00      	cmp	r5, #0
 80068e6:	f2c0 8095 	blt.w	8006a14 <_printf_i+0x20c>
 80068ea:	6821      	ldr	r1, [r4, #0]
 80068ec:	f021 0104 	bic.w	r1, r1, #4
 80068f0:	6021      	str	r1, [r4, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d13d      	bne.n	8006972 <_printf_i+0x16a>
 80068f6:	2d00      	cmp	r5, #0
 80068f8:	f040 808e 	bne.w	8006a18 <_printf_i+0x210>
 80068fc:	4665      	mov	r5, ip
 80068fe:	2a08      	cmp	r2, #8
 8006900:	d10b      	bne.n	800691a <_printf_i+0x112>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	07db      	lsls	r3, r3, #31
 8006906:	d508      	bpl.n	800691a <_printf_i+0x112>
 8006908:	6923      	ldr	r3, [r4, #16]
 800690a:	6862      	ldr	r2, [r4, #4]
 800690c:	429a      	cmp	r2, r3
 800690e:	bfde      	ittt	le
 8006910:	2330      	movle	r3, #48	; 0x30
 8006912:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006916:	f105 35ff 	addle.w	r5, r5, #4294967295
 800691a:	ebac 0305 	sub.w	r3, ip, r5
 800691e:	6123      	str	r3, [r4, #16]
 8006920:	f8cd 8000 	str.w	r8, [sp]
 8006924:	463b      	mov	r3, r7
 8006926:	aa03      	add	r2, sp, #12
 8006928:	4621      	mov	r1, r4
 800692a:	4630      	mov	r0, r6
 800692c:	f7ff fef6 	bl	800671c <_printf_common>
 8006930:	3001      	adds	r0, #1
 8006932:	d14d      	bne.n	80069d0 <_printf_i+0x1c8>
 8006934:	f04f 30ff 	mov.w	r0, #4294967295
 8006938:	b005      	add	sp, #20
 800693a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800693e:	4839      	ldr	r0, [pc, #228]	; (8006a24 <_printf_i+0x21c>)
 8006940:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006944:	6813      	ldr	r3, [r2, #0]
 8006946:	6821      	ldr	r1, [r4, #0]
 8006948:	1d1d      	adds	r5, r3, #4
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6015      	str	r5, [r2, #0]
 800694e:	060a      	lsls	r2, r1, #24
 8006950:	d50b      	bpl.n	800696a <_printf_i+0x162>
 8006952:	07ca      	lsls	r2, r1, #31
 8006954:	bf44      	itt	mi
 8006956:	f041 0120 	orrmi.w	r1, r1, #32
 800695a:	6021      	strmi	r1, [r4, #0]
 800695c:	b91b      	cbnz	r3, 8006966 <_printf_i+0x15e>
 800695e:	6822      	ldr	r2, [r4, #0]
 8006960:	f022 0220 	bic.w	r2, r2, #32
 8006964:	6022      	str	r2, [r4, #0]
 8006966:	2210      	movs	r2, #16
 8006968:	e7b7      	b.n	80068da <_printf_i+0xd2>
 800696a:	064d      	lsls	r5, r1, #25
 800696c:	bf48      	it	mi
 800696e:	b29b      	uxthmi	r3, r3
 8006970:	e7ef      	b.n	8006952 <_printf_i+0x14a>
 8006972:	4665      	mov	r5, ip
 8006974:	fbb3 f1f2 	udiv	r1, r3, r2
 8006978:	fb02 3311 	mls	r3, r2, r1, r3
 800697c:	5cc3      	ldrb	r3, [r0, r3]
 800697e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006982:	460b      	mov	r3, r1
 8006984:	2900      	cmp	r1, #0
 8006986:	d1f5      	bne.n	8006974 <_printf_i+0x16c>
 8006988:	e7b9      	b.n	80068fe <_printf_i+0xf6>
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	6825      	ldr	r5, [r4, #0]
 800698e:	6961      	ldr	r1, [r4, #20]
 8006990:	1d18      	adds	r0, r3, #4
 8006992:	6010      	str	r0, [r2, #0]
 8006994:	0628      	lsls	r0, r5, #24
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	d501      	bpl.n	800699e <_printf_i+0x196>
 800699a:	6019      	str	r1, [r3, #0]
 800699c:	e002      	b.n	80069a4 <_printf_i+0x19c>
 800699e:	066a      	lsls	r2, r5, #25
 80069a0:	d5fb      	bpl.n	800699a <_printf_i+0x192>
 80069a2:	8019      	strh	r1, [r3, #0]
 80069a4:	2300      	movs	r3, #0
 80069a6:	6123      	str	r3, [r4, #16]
 80069a8:	4665      	mov	r5, ip
 80069aa:	e7b9      	b.n	8006920 <_printf_i+0x118>
 80069ac:	6813      	ldr	r3, [r2, #0]
 80069ae:	1d19      	adds	r1, r3, #4
 80069b0:	6011      	str	r1, [r2, #0]
 80069b2:	681d      	ldr	r5, [r3, #0]
 80069b4:	6862      	ldr	r2, [r4, #4]
 80069b6:	2100      	movs	r1, #0
 80069b8:	4628      	mov	r0, r5
 80069ba:	f7f9 fc29 	bl	8000210 <memchr>
 80069be:	b108      	cbz	r0, 80069c4 <_printf_i+0x1bc>
 80069c0:	1b40      	subs	r0, r0, r5
 80069c2:	6060      	str	r0, [r4, #4]
 80069c4:	6863      	ldr	r3, [r4, #4]
 80069c6:	6123      	str	r3, [r4, #16]
 80069c8:	2300      	movs	r3, #0
 80069ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ce:	e7a7      	b.n	8006920 <_printf_i+0x118>
 80069d0:	6923      	ldr	r3, [r4, #16]
 80069d2:	462a      	mov	r2, r5
 80069d4:	4639      	mov	r1, r7
 80069d6:	4630      	mov	r0, r6
 80069d8:	47c0      	blx	r8
 80069da:	3001      	adds	r0, #1
 80069dc:	d0aa      	beq.n	8006934 <_printf_i+0x12c>
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	079b      	lsls	r3, r3, #30
 80069e2:	d413      	bmi.n	8006a0c <_printf_i+0x204>
 80069e4:	68e0      	ldr	r0, [r4, #12]
 80069e6:	9b03      	ldr	r3, [sp, #12]
 80069e8:	4298      	cmp	r0, r3
 80069ea:	bfb8      	it	lt
 80069ec:	4618      	movlt	r0, r3
 80069ee:	e7a3      	b.n	8006938 <_printf_i+0x130>
 80069f0:	2301      	movs	r3, #1
 80069f2:	464a      	mov	r2, r9
 80069f4:	4639      	mov	r1, r7
 80069f6:	4630      	mov	r0, r6
 80069f8:	47c0      	blx	r8
 80069fa:	3001      	adds	r0, #1
 80069fc:	d09a      	beq.n	8006934 <_printf_i+0x12c>
 80069fe:	3501      	adds	r5, #1
 8006a00:	68e3      	ldr	r3, [r4, #12]
 8006a02:	9a03      	ldr	r2, [sp, #12]
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	42ab      	cmp	r3, r5
 8006a08:	dcf2      	bgt.n	80069f0 <_printf_i+0x1e8>
 8006a0a:	e7eb      	b.n	80069e4 <_printf_i+0x1dc>
 8006a0c:	2500      	movs	r5, #0
 8006a0e:	f104 0919 	add.w	r9, r4, #25
 8006a12:	e7f5      	b.n	8006a00 <_printf_i+0x1f8>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1ac      	bne.n	8006972 <_printf_i+0x16a>
 8006a18:	7803      	ldrb	r3, [r0, #0]
 8006a1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a22:	e76c      	b.n	80068fe <_printf_i+0xf6>
 8006a24:	080071fd 	.word	0x080071fd
 8006a28:	0800720e 	.word	0x0800720e

08006a2c <memmove>:
 8006a2c:	4288      	cmp	r0, r1
 8006a2e:	b510      	push	{r4, lr}
 8006a30:	eb01 0302 	add.w	r3, r1, r2
 8006a34:	d807      	bhi.n	8006a46 <memmove+0x1a>
 8006a36:	1e42      	subs	r2, r0, #1
 8006a38:	4299      	cmp	r1, r3
 8006a3a:	d00a      	beq.n	8006a52 <memmove+0x26>
 8006a3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a40:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006a44:	e7f8      	b.n	8006a38 <memmove+0xc>
 8006a46:	4283      	cmp	r3, r0
 8006a48:	d9f5      	bls.n	8006a36 <memmove+0xa>
 8006a4a:	1881      	adds	r1, r0, r2
 8006a4c:	1ad2      	subs	r2, r2, r3
 8006a4e:	42d3      	cmn	r3, r2
 8006a50:	d100      	bne.n	8006a54 <memmove+0x28>
 8006a52:	bd10      	pop	{r4, pc}
 8006a54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a58:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006a5c:	e7f7      	b.n	8006a4e <memmove+0x22>
	...

08006a60 <_free_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4605      	mov	r5, r0
 8006a64:	2900      	cmp	r1, #0
 8006a66:	d045      	beq.n	8006af4 <_free_r+0x94>
 8006a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a6c:	1f0c      	subs	r4, r1, #4
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bfb8      	it	lt
 8006a72:	18e4      	addlt	r4, r4, r3
 8006a74:	f000 f8d2 	bl	8006c1c <__malloc_lock>
 8006a78:	4a1f      	ldr	r2, [pc, #124]	; (8006af8 <_free_r+0x98>)
 8006a7a:	6813      	ldr	r3, [r2, #0]
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	b933      	cbnz	r3, 8006a8e <_free_r+0x2e>
 8006a80:	6063      	str	r3, [r4, #4]
 8006a82:	6014      	str	r4, [r2, #0]
 8006a84:	4628      	mov	r0, r5
 8006a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a8a:	f000 b8c8 	b.w	8006c1e <__malloc_unlock>
 8006a8e:	42a3      	cmp	r3, r4
 8006a90:	d90c      	bls.n	8006aac <_free_r+0x4c>
 8006a92:	6821      	ldr	r1, [r4, #0]
 8006a94:	1862      	adds	r2, r4, r1
 8006a96:	4293      	cmp	r3, r2
 8006a98:	bf04      	itt	eq
 8006a9a:	681a      	ldreq	r2, [r3, #0]
 8006a9c:	685b      	ldreq	r3, [r3, #4]
 8006a9e:	6063      	str	r3, [r4, #4]
 8006aa0:	bf04      	itt	eq
 8006aa2:	1852      	addeq	r2, r2, r1
 8006aa4:	6022      	streq	r2, [r4, #0]
 8006aa6:	6004      	str	r4, [r0, #0]
 8006aa8:	e7ec      	b.n	8006a84 <_free_r+0x24>
 8006aaa:	4613      	mov	r3, r2
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	b10a      	cbz	r2, 8006ab4 <_free_r+0x54>
 8006ab0:	42a2      	cmp	r2, r4
 8006ab2:	d9fa      	bls.n	8006aaa <_free_r+0x4a>
 8006ab4:	6819      	ldr	r1, [r3, #0]
 8006ab6:	1858      	adds	r0, r3, r1
 8006ab8:	42a0      	cmp	r0, r4
 8006aba:	d10b      	bne.n	8006ad4 <_free_r+0x74>
 8006abc:	6820      	ldr	r0, [r4, #0]
 8006abe:	4401      	add	r1, r0
 8006ac0:	1858      	adds	r0, r3, r1
 8006ac2:	4282      	cmp	r2, r0
 8006ac4:	6019      	str	r1, [r3, #0]
 8006ac6:	d1dd      	bne.n	8006a84 <_free_r+0x24>
 8006ac8:	6810      	ldr	r0, [r2, #0]
 8006aca:	6852      	ldr	r2, [r2, #4]
 8006acc:	605a      	str	r2, [r3, #4]
 8006ace:	4401      	add	r1, r0
 8006ad0:	6019      	str	r1, [r3, #0]
 8006ad2:	e7d7      	b.n	8006a84 <_free_r+0x24>
 8006ad4:	d902      	bls.n	8006adc <_free_r+0x7c>
 8006ad6:	230c      	movs	r3, #12
 8006ad8:	602b      	str	r3, [r5, #0]
 8006ada:	e7d3      	b.n	8006a84 <_free_r+0x24>
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	1821      	adds	r1, r4, r0
 8006ae0:	428a      	cmp	r2, r1
 8006ae2:	bf04      	itt	eq
 8006ae4:	6811      	ldreq	r1, [r2, #0]
 8006ae6:	6852      	ldreq	r2, [r2, #4]
 8006ae8:	6062      	str	r2, [r4, #4]
 8006aea:	bf04      	itt	eq
 8006aec:	1809      	addeq	r1, r1, r0
 8006aee:	6021      	streq	r1, [r4, #0]
 8006af0:	605c      	str	r4, [r3, #4]
 8006af2:	e7c7      	b.n	8006a84 <_free_r+0x24>
 8006af4:	bd38      	pop	{r3, r4, r5, pc}
 8006af6:	bf00      	nop
 8006af8:	2000018c 	.word	0x2000018c

08006afc <_malloc_r>:
 8006afc:	b570      	push	{r4, r5, r6, lr}
 8006afe:	1ccd      	adds	r5, r1, #3
 8006b00:	f025 0503 	bic.w	r5, r5, #3
 8006b04:	3508      	adds	r5, #8
 8006b06:	2d0c      	cmp	r5, #12
 8006b08:	bf38      	it	cc
 8006b0a:	250c      	movcc	r5, #12
 8006b0c:	2d00      	cmp	r5, #0
 8006b0e:	4606      	mov	r6, r0
 8006b10:	db01      	blt.n	8006b16 <_malloc_r+0x1a>
 8006b12:	42a9      	cmp	r1, r5
 8006b14:	d903      	bls.n	8006b1e <_malloc_r+0x22>
 8006b16:	230c      	movs	r3, #12
 8006b18:	6033      	str	r3, [r6, #0]
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
 8006b1e:	f000 f87d 	bl	8006c1c <__malloc_lock>
 8006b22:	4a21      	ldr	r2, [pc, #132]	; (8006ba8 <_malloc_r+0xac>)
 8006b24:	6814      	ldr	r4, [r2, #0]
 8006b26:	4621      	mov	r1, r4
 8006b28:	b991      	cbnz	r1, 8006b50 <_malloc_r+0x54>
 8006b2a:	4c20      	ldr	r4, [pc, #128]	; (8006bac <_malloc_r+0xb0>)
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	b91b      	cbnz	r3, 8006b38 <_malloc_r+0x3c>
 8006b30:	4630      	mov	r0, r6
 8006b32:	f000 f863 	bl	8006bfc <_sbrk_r>
 8006b36:	6020      	str	r0, [r4, #0]
 8006b38:	4629      	mov	r1, r5
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	f000 f85e 	bl	8006bfc <_sbrk_r>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d124      	bne.n	8006b8e <_malloc_r+0x92>
 8006b44:	230c      	movs	r3, #12
 8006b46:	6033      	str	r3, [r6, #0]
 8006b48:	4630      	mov	r0, r6
 8006b4a:	f000 f868 	bl	8006c1e <__malloc_unlock>
 8006b4e:	e7e4      	b.n	8006b1a <_malloc_r+0x1e>
 8006b50:	680b      	ldr	r3, [r1, #0]
 8006b52:	1b5b      	subs	r3, r3, r5
 8006b54:	d418      	bmi.n	8006b88 <_malloc_r+0x8c>
 8006b56:	2b0b      	cmp	r3, #11
 8006b58:	d90f      	bls.n	8006b7a <_malloc_r+0x7e>
 8006b5a:	600b      	str	r3, [r1, #0]
 8006b5c:	50cd      	str	r5, [r1, r3]
 8006b5e:	18cc      	adds	r4, r1, r3
 8006b60:	4630      	mov	r0, r6
 8006b62:	f000 f85c 	bl	8006c1e <__malloc_unlock>
 8006b66:	f104 000b 	add.w	r0, r4, #11
 8006b6a:	1d23      	adds	r3, r4, #4
 8006b6c:	f020 0007 	bic.w	r0, r0, #7
 8006b70:	1ac3      	subs	r3, r0, r3
 8006b72:	d0d3      	beq.n	8006b1c <_malloc_r+0x20>
 8006b74:	425a      	negs	r2, r3
 8006b76:	50e2      	str	r2, [r4, r3]
 8006b78:	e7d0      	b.n	8006b1c <_malloc_r+0x20>
 8006b7a:	428c      	cmp	r4, r1
 8006b7c:	684b      	ldr	r3, [r1, #4]
 8006b7e:	bf16      	itet	ne
 8006b80:	6063      	strne	r3, [r4, #4]
 8006b82:	6013      	streq	r3, [r2, #0]
 8006b84:	460c      	movne	r4, r1
 8006b86:	e7eb      	b.n	8006b60 <_malloc_r+0x64>
 8006b88:	460c      	mov	r4, r1
 8006b8a:	6849      	ldr	r1, [r1, #4]
 8006b8c:	e7cc      	b.n	8006b28 <_malloc_r+0x2c>
 8006b8e:	1cc4      	adds	r4, r0, #3
 8006b90:	f024 0403 	bic.w	r4, r4, #3
 8006b94:	42a0      	cmp	r0, r4
 8006b96:	d005      	beq.n	8006ba4 <_malloc_r+0xa8>
 8006b98:	1a21      	subs	r1, r4, r0
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f000 f82e 	bl	8006bfc <_sbrk_r>
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d0cf      	beq.n	8006b44 <_malloc_r+0x48>
 8006ba4:	6025      	str	r5, [r4, #0]
 8006ba6:	e7db      	b.n	8006b60 <_malloc_r+0x64>
 8006ba8:	2000018c 	.word	0x2000018c
 8006bac:	20000190 	.word	0x20000190

08006bb0 <_realloc_r>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	4607      	mov	r7, r0
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	460e      	mov	r6, r1
 8006bb8:	b921      	cbnz	r1, 8006bc4 <_realloc_r+0x14>
 8006bba:	4611      	mov	r1, r2
 8006bbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006bc0:	f7ff bf9c 	b.w	8006afc <_malloc_r>
 8006bc4:	b922      	cbnz	r2, 8006bd0 <_realloc_r+0x20>
 8006bc6:	f7ff ff4b 	bl	8006a60 <_free_r>
 8006bca:	4625      	mov	r5, r4
 8006bcc:	4628      	mov	r0, r5
 8006bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd0:	f000 f826 	bl	8006c20 <_malloc_usable_size_r>
 8006bd4:	42a0      	cmp	r0, r4
 8006bd6:	d20f      	bcs.n	8006bf8 <_realloc_r+0x48>
 8006bd8:	4621      	mov	r1, r4
 8006bda:	4638      	mov	r0, r7
 8006bdc:	f7ff ff8e 	bl	8006afc <_malloc_r>
 8006be0:	4605      	mov	r5, r0
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d0f2      	beq.n	8006bcc <_realloc_r+0x1c>
 8006be6:	4631      	mov	r1, r6
 8006be8:	4622      	mov	r2, r4
 8006bea:	f7ff fc11 	bl	8006410 <memcpy>
 8006bee:	4631      	mov	r1, r6
 8006bf0:	4638      	mov	r0, r7
 8006bf2:	f7ff ff35 	bl	8006a60 <_free_r>
 8006bf6:	e7e9      	b.n	8006bcc <_realloc_r+0x1c>
 8006bf8:	4635      	mov	r5, r6
 8006bfa:	e7e7      	b.n	8006bcc <_realloc_r+0x1c>

08006bfc <_sbrk_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4c06      	ldr	r4, [pc, #24]	; (8006c18 <_sbrk_r+0x1c>)
 8006c00:	2300      	movs	r3, #0
 8006c02:	4605      	mov	r5, r0
 8006c04:	4608      	mov	r0, r1
 8006c06:	6023      	str	r3, [r4, #0]
 8006c08:	f7fa ff2c 	bl	8001a64 <_sbrk>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_sbrk_r+0x1a>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_sbrk_r+0x1a>
 8006c14:	602b      	str	r3, [r5, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	20000288 	.word	0x20000288

08006c1c <__malloc_lock>:
 8006c1c:	4770      	bx	lr

08006c1e <__malloc_unlock>:
 8006c1e:	4770      	bx	lr

08006c20 <_malloc_usable_size_r>:
 8006c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c24:	1f18      	subs	r0, r3, #4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	bfbc      	itt	lt
 8006c2a:	580b      	ldrlt	r3, [r1, r0]
 8006c2c:	18c0      	addlt	r0, r0, r3
 8006c2e:	4770      	bx	lr

08006c30 <_init>:
 8006c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c32:	bf00      	nop
 8006c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c36:	bc08      	pop	{r3}
 8006c38:	469e      	mov	lr, r3
 8006c3a:	4770      	bx	lr

08006c3c <_fini>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	bf00      	nop
 8006c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c42:	bc08      	pop	{r3}
 8006c44:	469e      	mov	lr, r3
 8006c46:	4770      	bx	lr
