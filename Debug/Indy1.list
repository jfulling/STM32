
Indy1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006950  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08006b10  08006b10  00016b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ce0  08006ce0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ce8  08006ce8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce8  08006ce8  00016ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cec  08006cec  00016cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006cf0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000080  08006d6c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08006d6c  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117db  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002227  00000000  00000000  00031887  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e38  00000000  00000000  00033ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  000348e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000306bc  00000000  00000000  00035618  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000baf7  00000000  00000000  00065cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00122198  00000000  00000000  000717cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00193963  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d78  00000000  00000000  001939e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000080 	.word	0x20000080
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006af8 	.word	0x08006af8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000084 	.word	0x20000084
 80001fc:	08006af8 	.word	0x08006af8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <NRF24_DelayMicroSeconds+0x38>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <NRF24_DelayMicroSeconds+0x3c>)
 80005c2:	fba2 2303 	umull	r2, r3, r2, r3
 80005c6:	0c9a      	lsrs	r2, r3, #18
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	fb02 f303 	mul.w	r3, r2, r3
 80005ce:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80005d0:	bf00      	nop
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	1e5a      	subs	r2, r3, #1
 80005d6:	60fa      	str	r2, [r7, #12]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d1fa      	bne.n	80005d2 <NRF24_DelayMicroSeconds+0x22>
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	2000000c 	.word	0x2000000c
 80005ec:	165e9f81 	.word	0x165e9f81

080005f0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d008      	beq.n	8000610 <NRF24_csn+0x20>
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <NRF24_csn+0x38>)
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <NRF24_csn+0x3c>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	2201      	movs	r2, #1
 8000608:	4619      	mov	r1, r3
 800060a:	f001 fd25 	bl	8002058 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800060e:	e007      	b.n	8000620 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <NRF24_csn+0x38>)
 8000612:	6818      	ldr	r0, [r3, #0]
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <NRF24_csn+0x3c>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	2200      	movs	r2, #0
 800061a:	4619      	mov	r1, r3
 800061c:	f001 fd1c 	bl	8002058 <HAL_GPIO_WritePin>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200000ac 	.word	0x200000ac
 800062c:	200000b0 	.word	0x200000b0

08000630 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d008      	beq.n	8000650 <NRF24_ce+0x20>
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <NRF24_ce+0x38>)
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <NRF24_ce+0x3c>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	2201      	movs	r2, #1
 8000648:	4619      	mov	r1, r3
 800064a:	f001 fd05 	bl	8002058 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800064e:	e007      	b.n	8000660 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <NRF24_ce+0x38>)
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <NRF24_ce+0x3c>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	2200      	movs	r2, #0
 800065a:	4619      	mov	r1, r3
 800065c:	f001 fcfc 	bl	8002058 <HAL_GPIO_WritePin>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000ac 	.word	0x200000ac
 800066c:	200000b2 	.word	0x200000b2

08000670 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff ffb8 	bl	80005f0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	f003 031f 	and.w	r3, r3, #31
 8000686:	b2db      	uxtb	r3, r3
 8000688:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800068a:	f107 010c 	add.w	r1, r7, #12
 800068e:	2364      	movs	r3, #100	; 0x64
 8000690:	2201      	movs	r2, #1
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <NRF24_read_register+0x4c>)
 8000694:	f003 fa80 	bl	8003b98 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	1c59      	adds	r1, r3, #1
 800069e:	2364      	movs	r3, #100	; 0x64
 80006a0:	2201      	movs	r2, #1
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <NRF24_read_register+0x4c>)
 80006a4:	f003 fbde 	bl	8003e64 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80006a8:	7b7b      	ldrb	r3, [r7, #13]
 80006aa:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f7ff ff9f 	bl	80005f0 <NRF24_csn>
	return retData;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000b4 	.word	0x200000b4

080006c0 <NRF24_write_register>:
	//Bring CSN high
	NRF24_csn(1);
}
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	460a      	mov	r2, r1
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	4613      	mov	r3, r2
 80006ce:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff ff8d 	bl	80005f0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f043 0320 	orr.w	r3, r3, #32
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80006e4:	f107 010c 	add.w	r1, r7, #12
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2202      	movs	r2, #2
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <NRF24_write_register+0x40>)
 80006ee:	f003 fa53 	bl	8003b98 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff ff7c 	bl	80005f0 <NRF24_csn>
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000b4 	.word	0x200000b4

08000704 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	4613      	mov	r3, r2
 8000712:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff ff6b 	bl	80005f0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	f043 0320 	orr.w	r3, r3, #32
 8000720:	b2db      	uxtb	r3, r3
 8000722:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000724:	f107 010c 	add.w	r1, r7, #12
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	2201      	movs	r2, #1
 800072c:	4808      	ldr	r0, [pc, #32]	; (8000750 <NRF24_write_registerN+0x4c>)
 800072e:	f003 fa33 	bl	8003b98 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000732:	79bb      	ldrb	r3, [r7, #6]
 8000734:	b29a      	uxth	r2, r3
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	6839      	ldr	r1, [r7, #0]
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <NRF24_write_registerN+0x4c>)
 800073c:	f003 fa2c 	bl	8003b98 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f7ff ff55 	bl	80005f0 <NRF24_csn>
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000b4 	.word	0x200000b4

08000754 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000758:	21ff      	movs	r1, #255	; 0xff
 800075a:	20e1      	movs	r0, #225	; 0xe1
 800075c:	f7ff ffb0 	bl	80006c0 <NRF24_write_register>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000768:	21ff      	movs	r1, #255	; 0xff
 800076a:	20e2      	movs	r0, #226	; 0xe2
 800076c:	f7ff ffa8 	bl	80006c0 <NRF24_write_register>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800077a:	2007      	movs	r0, #7
 800077c:	f7ff ff78 	bl	8000670 <NRF24_read_register>
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000784:	79fb      	ldrb	r3, [r7, #7]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <NRF24_begin>:

}//end NRF24_CHECK

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000790:	b082      	sub	sp, #8
 8000792:	b580      	push	{r7, lr}
 8000794:	b084      	sub	sp, #16
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	61fb      	str	r3, [r7, #28]
 800079c:	460b      	mov	r3, r1
 800079e:	807b      	strh	r3, [r7, #2]
 80007a0:	4613      	mov	r3, r2
 80007a2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80007a4:	4b65      	ldr	r3, [pc, #404]	; (800093c <NRF24_begin+0x1ac>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	2264      	movs	r2, #100	; 0x64
 80007ae:	4619      	mov	r1, r3
 80007b0:	f005 fd92 	bl	80062d8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80007b4:	4a62      	ldr	r2, [pc, #392]	; (8000940 <NRF24_begin+0x1b0>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80007ba:	4a62      	ldr	r2, [pc, #392]	; (8000944 <NRF24_begin+0x1b4>)
 80007bc:	887b      	ldrh	r3, [r7, #2]
 80007be:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80007c0:	4a61      	ldr	r2, [pc, #388]	; (8000948 <NRF24_begin+0x1b8>)
 80007c2:	883b      	ldrh	r3, [r7, #0]
 80007c4:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff ff12 	bl	80005f0 <NRF24_csn>
	NRF24_ce(0);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff ff2f 	bl	8000630 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80007d2:	2005      	movs	r0, #5
 80007d4:	f001 f9a6 	bl	8001b24 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80007d8:	2108      	movs	r1, #8
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff70 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80007e0:	213f      	movs	r1, #63	; 0x3f
 80007e2:	2001      	movs	r0, #1
 80007e4:	f7ff ff6c 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80007e8:	2103      	movs	r1, #3
 80007ea:	2002      	movs	r0, #2
 80007ec:	f7ff ff68 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80007f0:	2103      	movs	r1, #3
 80007f2:	2003      	movs	r0, #3
 80007f4:	f7ff ff64 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80007f8:	2103      	movs	r1, #3
 80007fa:	2004      	movs	r0, #4
 80007fc:	f7ff ff60 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000800:	2102      	movs	r1, #2
 8000802:	2005      	movs	r0, #5
 8000804:	f7ff ff5c 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000808:	210f      	movs	r1, #15
 800080a:	2006      	movs	r0, #6
 800080c:	f7ff ff58 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000810:	210e      	movs	r1, #14
 8000812:	2007      	movs	r0, #7
 8000814:	f7ff ff54 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000818:	2100      	movs	r1, #0
 800081a:	2008      	movs	r0, #8
 800081c:	f7ff ff50 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000820:	2100      	movs	r1, #0
 8000822:	2009      	movs	r0, #9
 8000824:	f7ff ff4c 	bl	80006c0 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000828:	23e7      	movs	r3, #231	; 0xe7
 800082a:	733b      	strb	r3, [r7, #12]
 800082c:	23e7      	movs	r3, #231	; 0xe7
 800082e:	72fb      	strb	r3, [r7, #11]
 8000830:	23e7      	movs	r3, #231	; 0xe7
 8000832:	72bb      	strb	r3, [r7, #10]
 8000834:	23e7      	movs	r3, #231	; 0xe7
 8000836:	727b      	strb	r3, [r7, #9]
 8000838:	23e7      	movs	r3, #231	; 0xe7
 800083a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2205      	movs	r2, #5
 8000842:	4619      	mov	r1, r3
 8000844:	200a      	movs	r0, #10
 8000846:	f7ff ff5d 	bl	8000704 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800084a:	23c2      	movs	r3, #194	; 0xc2
 800084c:	733b      	strb	r3, [r7, #12]
 800084e:	23c2      	movs	r3, #194	; 0xc2
 8000850:	72fb      	strb	r3, [r7, #11]
 8000852:	23c2      	movs	r3, #194	; 0xc2
 8000854:	72bb      	strb	r3, [r7, #10]
 8000856:	23c2      	movs	r3, #194	; 0xc2
 8000858:	727b      	strb	r3, [r7, #9]
 800085a:	23c2      	movs	r3, #194	; 0xc2
 800085c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	2205      	movs	r2, #5
 8000864:	4619      	mov	r1, r3
 8000866:	200b      	movs	r0, #11
 8000868:	f7ff ff4c 	bl	8000704 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800086c:	21c3      	movs	r1, #195	; 0xc3
 800086e:	200c      	movs	r0, #12
 8000870:	f7ff ff26 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000874:	21c4      	movs	r1, #196	; 0xc4
 8000876:	200d      	movs	r0, #13
 8000878:	f7ff ff22 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800087c:	21c5      	movs	r1, #197	; 0xc5
 800087e:	200e      	movs	r0, #14
 8000880:	f7ff ff1e 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000884:	21c6      	movs	r1, #198	; 0xc6
 8000886:	200f      	movs	r0, #15
 8000888:	f7ff ff1a 	bl	80006c0 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800088c:	23e7      	movs	r3, #231	; 0xe7
 800088e:	733b      	strb	r3, [r7, #12]
 8000890:	23e7      	movs	r3, #231	; 0xe7
 8000892:	72fb      	strb	r3, [r7, #11]
 8000894:	23e7      	movs	r3, #231	; 0xe7
 8000896:	72bb      	strb	r3, [r7, #10]
 8000898:	23e7      	movs	r3, #231	; 0xe7
 800089a:	727b      	strb	r3, [r7, #9]
 800089c:	23e7      	movs	r3, #231	; 0xe7
 800089e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	2205      	movs	r2, #5
 80008a6:	4619      	mov	r1, r3
 80008a8:	2010      	movs	r0, #16
 80008aa:	f7ff ff2b 	bl	8000704 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80008ae:	2100      	movs	r1, #0
 80008b0:	2011      	movs	r0, #17
 80008b2:	f7ff ff05 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80008b6:	2100      	movs	r1, #0
 80008b8:	2012      	movs	r0, #18
 80008ba:	f7ff ff01 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80008be:	2100      	movs	r1, #0
 80008c0:	2013      	movs	r0, #19
 80008c2:	f7ff fefd 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2014      	movs	r0, #20
 80008ca:	f7ff fef9 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80008ce:	2100      	movs	r1, #0
 80008d0:	2015      	movs	r0, #21
 80008d2:	f7ff fef5 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80008d6:	2100      	movs	r1, #0
 80008d8:	2016      	movs	r0, #22
 80008da:	f7ff fef1 	bl	80006c0 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80008de:	f000 fa27 	bl	8000d30 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80008e2:	2100      	movs	r1, #0
 80008e4:	201c      	movs	r0, #28
 80008e6:	f7ff feeb 	bl	80006c0 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80008ea:	2100      	movs	r1, #0
 80008ec:	201d      	movs	r0, #29
 80008ee:	f7ff fee7 	bl	80006c0 <NRF24_write_register>

	//printRadioSettings();

	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80008f2:	210f      	movs	r1, #15
 80008f4:	200f      	movs	r0, #15
 80008f6:	f000 f8a5 	bl	8000a44 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80008fa:	2003      	movs	r0, #3
 80008fc:	f000 f917 	bl	8000b2e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000900:	2001      	movs	r0, #1
 8000902:	f000 f94d 	bl	8000ba0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000906:	2002      	movs	r0, #2
 8000908:	f000 f990 	bl	8000c2c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800090c:	f000 f8e2 	bl	8000ad4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000910:	2020      	movs	r0, #32
 8000912:	f000 f8c7 	bl	8000aa4 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000916:	f000 fa03 	bl	8000d20 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800091a:	204c      	movs	r0, #76	; 0x4c
 800091c:	f000 f8ad 	bl	8000a7a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000920:	f7ff ff18 	bl	8000754 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000924:	f7ff ff1e 	bl	8000764 <NRF24_flush_rx>

	NRF24_powerDown();
 8000928:	f000 f9bb 	bl	8000ca2 <NRF24_powerDown>

}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000936:	b002      	add	sp, #8
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	200000b4 	.word	0x200000b4
 8000940:	200000ac 	.word	0x200000ac
 8000944:	200000b0 	.word	0x200000b0
 8000948:	200000b2 	.word	0x200000b2

0800094c <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 800094c:	b598      	push	{r3, r4, r7, lr}
 800094e:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000950:	2000      	movs	r0, #0
 8000952:	f7ff fe8d 	bl	8000670 <NRF24_read_register>
 8000956:	4603      	mov	r3, r0
 8000958:	f043 0303 	orr.w	r3, r3, #3
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4619      	mov	r1, r3
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff fead 	bl	80006c0 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <NRF24_startListening+0x48>)
 8000968:	e9d3 3400 	ldrd	r3, r4, [r3]
 800096c:	4323      	orrs	r3, r4
 800096e:	d004      	beq.n	800097a <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000970:	2205      	movs	r2, #5
 8000972:	4908      	ldr	r1, [pc, #32]	; (8000994 <NRF24_startListening+0x48>)
 8000974:	200a      	movs	r0, #10
 8000976:	f7ff fec5 	bl	8000704 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 800097a:	f7ff feeb 	bl	8000754 <NRF24_flush_tx>
	NRF24_flush_rx();
 800097e:	f7ff fef1 	bl	8000764 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000982:	2001      	movs	r0, #1
 8000984:	f7ff fe54 	bl	8000630 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000988:	2096      	movs	r0, #150	; 0x96
 800098a:	f7ff fe11 	bl	80005b0 <NRF24_DelayMicroSeconds>
}
 800098e:	bf00      	nop
 8000990:	bd98      	pop	{r3, r4, r7, pc}
 8000992:	bf00      	nop
 8000994:	200000a0 	.word	0x200000a0

08000998 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 800099c:	2000      	movs	r0, #0
 800099e:	f000 f98f 	bl	8000cc0 <NRF24_availablePipe>
 80009a2:	4603      	mov	r3, r0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4601      	mov	r1, r0
 80009b0:	e9c7 2300 	strd	r2, r3, [r7]
 80009b4:	460b      	mov	r3, r1
 80009b6:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d104      	bne.n	80009c8 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 80009be:	e9d7 3400 	ldrd	r3, r4, [r7]
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <NRF24_openReadingPipe+0x8c>)
 80009c4:	e9c2 3400 	strd	r3, r4, [r2]

	if(number <= 6)
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d82d      	bhi.n	8000a2a <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d808      	bhi.n	80009e6 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <NRF24_openReadingPipe+0x90>)
 80009d8:	5cd3      	ldrb	r3, [r2, r3]
 80009da:	4639      	mov	r1, r7
 80009dc:	2205      	movs	r2, #5
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fe90 	bl	8000704 <NRF24_write_registerN>
 80009e4:	e007      	b.n	80009f6 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <NRF24_openReadingPipe+0x90>)
 80009ea:	5cd3      	ldrb	r3, [r2, r3]
 80009ec:	4639      	mov	r1, r7
 80009ee:	2201      	movs	r2, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fe87 	bl	8000704 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <NRF24_openReadingPipe+0x94>)
 80009fa:	5cd2      	ldrb	r2, [r2, r3]
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <NRF24_openReadingPipe+0x98>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	4610      	mov	r0, r2
 8000a04:	f7ff fe5c 	bl	80006c0 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f7ff fe31 	bl	8000670 <NRF24_read_register>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b25a      	sxtb	r2, r3
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	2101      	movs	r1, #1
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	b25b      	sxtb	r3, r3
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4619      	mov	r1, r3
 8000a24:	2002      	movs	r0, #2
 8000a26:	f7ff fe4b 	bl	80006c0 <NRF24_write_register>
	}

}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd90      	pop	{r4, r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000a0 	.word	0x200000a0
 8000a38:	08006c54 	.word	0x08006c54
 8000a3c:	08006c5c 	.word	0x08006c5c
 8000a40:	200000a8 	.word	0x200000a8

08000a44 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	71fb      	strb	r3, [r7, #7]
 8000a50:	4613      	mov	r3, r2
 8000a52:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	011b      	lsls	r3, r3, #4
 8000a58:	b25a      	sxtb	r2, r3
 8000a5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	4313      	orrs	r3, r2
 8000a66:	b25b      	sxtb	r3, r3
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	2004      	movs	r0, #4
 8000a6e:	f7ff fe27 	bl	80006c0 <NRF24_write_register>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000a84:	237f      	movs	r3, #127	; 0x7f
 8000a86:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000a88:	7bfa      	ldrb	r2, [r7, #15]
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	bf28      	it	cs
 8000a90:	4613      	movcs	r3, r2
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	4619      	mov	r1, r3
 8000a96:	2005      	movs	r0, #5
 8000a98:	f7ff fe12 	bl	80006c0 <NRF24_write_register>
}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000aae:	2320      	movs	r3, #32
 8000ab0:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000ab2:	7bfa      	ldrb	r2, [r7, #15]
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	bf28      	it	cs
 8000aba:	4613      	movcs	r3, r2
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <NRF24_setPayloadSize+0x2c>)
 8000ac0:	701a      	strb	r2, [r3, #0]
}
 8000ac2:	bf00      	nop
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200000a8 	.word	0x200000a8

08000ad4 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000ad8:	201d      	movs	r0, #29
 8000ada:	f7ff fdc9 	bl	8000670 <NRF24_read_register>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f023 0304 	bic.w	r3, r3, #4
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	201d      	movs	r0, #29
 8000aea:	f7ff fde9 	bl	80006c0 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000aee:	2100      	movs	r1, #0
 8000af0:	201c      	movs	r0, #28
 8000af2:	f7ff fde5 	bl	80006c0 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000af6:	4b02      	ldr	r3, [pc, #8]	; (8000b00 <NRF24_disableDynamicPayloads+0x2c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200000a9 	.word	0x200000a9

08000b04 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d004      	beq.n	8000b1e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000b14:	213f      	movs	r1, #63	; 0x3f
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff fdd2 	bl	80006c0 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000b1c:	e003      	b.n	8000b26 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2001      	movs	r0, #1
 8000b22:	f7ff fdcd 	bl	80006c0 <NRF24_write_register>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000b38:	2006      	movs	r0, #6
 8000b3a:	f7ff fd99 	bl	8000670 <NRF24_read_register>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	f023 0306 	bic.w	r3, r3, #6
 8000b48:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d104      	bne.n	8000b5a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	f043 0306 	orr.w	r3, r3, #6
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	e019      	b.n	8000b8e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d104      	bne.n	8000b6a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	e011      	b.n	8000b8e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d104      	bne.n	8000b7a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	73fb      	strb	r3, [r7, #15]
 8000b78:	e009      	b.n	8000b8e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d006      	beq.n	8000b8e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	d103      	bne.n	8000b8e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	f043 0306 	orr.w	r3, r3, #6
 8000b8c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
 8000b90:	4619      	mov	r1, r3
 8000b92:	2006      	movs	r0, #6
 8000b94:	f7ff fd94 	bl	80006c0 <NRF24_write_register>
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000bae:	2006      	movs	r0, #6
 8000bb0:	f7ff fd5e 	bl	8000670 <NRF24_read_register>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <NRF24_setDataRate+0x88>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000bbe:	7bbb      	ldrb	r3, [r7, #14]
 8000bc0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000bc4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d107      	bne.n	8000bdc <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <NRF24_setDataRate+0x88>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000bd2:	7bbb      	ldrb	r3, [r7, #14]
 8000bd4:	f043 0320 	orr.w	r3, r3, #32
 8000bd8:	73bb      	strb	r3, [r7, #14]
 8000bda:	e00d      	b.n	8000bf8 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d107      	bne.n	8000bf2 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <NRF24_setDataRate+0x88>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000be8:	7bbb      	ldrb	r3, [r7, #14]
 8000bea:	f043 0308 	orr.w	r3, r3, #8
 8000bee:	73bb      	strb	r3, [r7, #14]
 8000bf0:	e002      	b.n	8000bf8 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <NRF24_setDataRate+0x88>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000bf8:	7bbb      	ldrb	r3, [r7, #14]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	2006      	movs	r0, #6
 8000bfe:	f7ff fd5f 	bl	80006c0 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000c02:	2006      	movs	r0, #6
 8000c04:	f7ff fd34 	bl	8000670 <NRF24_read_register>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	7bbb      	ldrb	r3, [r7, #14]
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d102      	bne.n	8000c18 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	e002      	b.n	8000c1e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <NRF24_setDataRate+0x88>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000aa 	.word	0x200000aa

08000c2c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000c36:	2000      	movs	r0, #0
 8000c38:	f7ff fd1a 	bl	8000670 <NRF24_read_register>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	f023 030c 	bic.w	r3, r3, #12
 8000c42:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00f      	beq.n	8000c6a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d104      	bne.n	8000c5a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	f043 0308 	orr.w	r3, r3, #8
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e007      	b.n	8000c6a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff fd26 	bl	80006c0 <NRF24_write_register>
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <NRF24_disableCRC>:

  return result;
}
//36. Disable CRC
void NRF24_disableCRC( void )
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	uint8_t disable = NRF24_read_register(REG_CONFIG) & ~_BV(BIT_EN_CRC) ;
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff fcf4 	bl	8000670 <NRF24_read_register>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f023 0308 	bic.w	r3, r3, #8
 8000c8e:	71fb      	strb	r3, [r7, #7]
  NRF24_write_register( REG_CONFIG, disable ) ;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	4619      	mov	r1, r3
 8000c94:	2000      	movs	r0, #0
 8000c96:	f7ff fd13 	bl	80006c0 <NRF24_write_register>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fce2 	bl	8000670 <NRF24_read_register>
 8000cac:	4603      	mov	r3, r0
 8000cae:	f023 0302 	bic.w	r3, r3, #2
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff fd02 	bl	80006c0 <NRF24_write_register>
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000cc8:	f7ff fd54 	bl	8000774 <NRF24_get_status>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bf14      	ite	ne
 8000cda:	2301      	movne	r3, #1
 8000cdc:	2300      	moveq	r3, #0
 8000cde:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000ce0:	7bbb      	ldrb	r3, [r7, #14]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d017      	beq.n	8000d16 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d007      	beq.n	8000cfc <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	085b      	lsrs	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000cfc:	2140      	movs	r1, #64	; 0x40
 8000cfe:	2007      	movs	r0, #7
 8000d00:	f7ff fcde 	bl	80006c0 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	f003 0320 	and.w	r3, r3, #32
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000d0e:	2120      	movs	r1, #32
 8000d10:	2007      	movs	r0, #7
 8000d12:	f7ff fcd5 	bl	80006c0 <NRF24_write_register>
    }
  }
  return result;
 8000d16:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000d24:	2170      	movs	r1, #112	; 0x70
 8000d26:	2007      	movs	r0, #7
 8000d28:	f7ff fcca 	bl	80006c0 <NRF24_write_register>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff fc5a 	bl	80005f0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000d3c:	2350      	movs	r3, #80	; 0x50
 8000d3e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000d40:	2373      	movs	r3, #115	; 0x73
 8000d42:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000d44:	1d39      	adds	r1, r7, #4
 8000d46:	2364      	movs	r3, #100	; 0x64
 8000d48:	2202      	movs	r2, #2
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <NRF24_ACTIVATE_cmd+0x30>)
 8000d4c:	f002 ff24 	bl	8003b98 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f7ff fc4d 	bl	80005f0 <NRF24_csn>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200000b4 	.word	0x200000b4

08000d64 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8000d64:	b084      	sub	sp, #16
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	f107 0c08 	add.w	ip, r7, #8
 8000d6e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <nrf24_DebugUART_Init+0x2c>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f107 0108 	add.w	r1, r7, #8
 8000d7a:	238c      	movs	r3, #140	; 0x8c
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	f005 faab 	bl	80062d8 <memcpy>
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d8a:	b004      	add	sp, #16
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000118 	.word	0x20000118

08000d94 <serialPrint>:
	sprintf(uartTxBuf, "\r\n-------------------------\r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

}

void serialPrint(uint8_t* msg){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)msg, strlen(msg), 10);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff fa2f 	bl	8000200 <strlen>
 8000da2:	4603      	mov	r3, r0
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	230a      	movs	r3, #10
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	4803      	ldr	r0, [pc, #12]	; (8000db8 <serialPrint+0x24>)
 8000dac:	f003 fd5a 	bl	8004864 <HAL_UART_Transmit>
}//end serialPrint
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000118 	.word	0x20000118

08000dbc <serialPrintln>:

void serialPrintln(uint8_t* msg){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	char returnMe[2] = "\r\n";
 8000dc4:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000dc8:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)msg, strlen(msg), 10);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff fa18 	bl	8000200 <strlen>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	230a      	movs	r3, #10
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	4809      	ldr	r0, [pc, #36]	; (8000e00 <serialPrintln+0x44>)
 8000dda:	f003 fd43 	bl	8004864 <HAL_UART_Transmit>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)returnMe, strlen(returnMe), 10);
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fa0c 	bl	8000200 <strlen>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	f107 010c 	add.w	r1, r7, #12
 8000df0:	230a      	movs	r3, #10
 8000df2:	4803      	ldr	r0, [pc, #12]	; (8000e00 <serialPrintln+0x44>)
 8000df4:	f003 fd36 	bl	8004864 <HAL_UART_Transmit>
}//end serialPrintln
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000118 	.word	0x20000118

08000e04 <uCm_read>:
//Overloaded function
bool uCm_write2( const void* buf, uint8_t len ){
	return uCm_write(buf,len,0);
}

uint8_t uCm_read( const void* buf, uint8_t len){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	70fb      	strb	r3, [r7, #3]
	uint8_t data_len = MIN(len, payload_size);
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <uCm_read+0x6c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	78fa      	ldrb	r2, [r7, #3]
 8000e16:	4293      	cmp	r3, r2
 8000e18:	bf28      	it	cs
 8000e1a:	4613      	movcs	r3, r2
 8000e1c:	73fb      	strb	r3, [r7, #15]
	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <uCm_read+0x70>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <uCm_read+0x26>
 8000e26:	2300      	movs	r3, #0
 8000e28:	e004      	b.n	8000e34 <uCm_read+0x30>
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <uCm_read+0x6c>)
 8000e2c:	781a      	ldrb	r2, [r3, #0]
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	73bb      	strb	r3, [r7, #14]

	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fbda 	bl	80005f0 <NRF24_csn>
	uint8_t cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000e3c:	2361      	movs	r3, #97	; 0x61
 8000e3e:	733b      	strb	r3, [r7, #12]
	uint8_t status = HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000e40:	f107 010c 	add.w	r1, r7, #12
 8000e44:	2364      	movs	r3, #100	; 0x64
 8000e46:	2201      	movs	r2, #1
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <uCm_read+0x74>)
 8000e4a:	f002 fea5 	bl	8003b98 <HAL_SPI_Transmit>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	2364      	movs	r3, #100	; 0x64
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	4807      	ldr	r0, [pc, #28]	; (8000e78 <uCm_read+0x74>)
 8000e5c:	f003 f802 	bl	8003e64 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff fbc5 	bl	80005f0 <NRF24_csn>

	return status;
 8000e66:	7b7b      	ldrb	r3, [r7, #13]
}//end uCm_read
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200000a8 	.word	0x200000a8
 8000e74:	200000a9 	.word	0x200000a9
 8000e78:	200000b4 	.word	0x200000b4

08000e7c <print_payload_details>:
  0x00, 0x04, 0x00, 0x00, 0x11, 0x00, 0x00, 0x37, 0x00, 0x00, 0x06, 0x00,
  0x00, 0x04, 0x00, 0x00, 0x17, 0x00, 0x00, 0x28, 0x00,
};

void print_payload_details()
{
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	b0cf      	sub	sp, #316	; 0x13c
 8000e80:	af00      	add	r7, sp, #0
	//serialPrintln("Printing payload details...");
  uint8_t convertBuffer[100];
  uint8_t convertBuffer2[100];
  uint8_t DTail[100];
  sprintf(DTail, "channel: %u\tpayload size: %u\taddress: ", channel, payload_size);
 8000e82:	4b39      	ldr	r3, [pc, #228]	; (8000f68 <print_payload_details+0xec>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <print_payload_details+0xf0>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	1d38      	adds	r0, r7, #4
 8000e8e:	4938      	ldr	r1, [pc, #224]	; (8000f70 <print_payload_details+0xf4>)
 8000e90:	f005 fa36 	bl	8006300 <siprintf>
  serialPrint(DTail);
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff7c 	bl	8000d94 <serialPrint>
  //serialPrint("ch: ");
  //serialPrint(channel);
  //serialPrint(" s: ");
  //serialPrint(payload_size);
  //serialPrint(" a: ");
  for (uint8_t j = 0; j < 5; j++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8000ea2:	e028      	b.n	8000ef6 <print_payload_details+0x7a>
  {

	//serialPrint((uint8_t)(address >> (8 * j) & 0xff), HEX);
	sprintf(convertBuffer, "%2x", (uint8_t)(address >> (8 * j) & 0xff));
 8000ea4:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <print_payload_details+0xf8>)
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	f897 1137 	ldrb.w	r1, [r7, #311]	; 0x137
 8000eae:	00c9      	lsls	r1, r1, #3
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	f1a1 0020 	sub.w	r0, r1, #32
 8000eb8:	fa22 f401 	lsr.w	r4, r2, r1
 8000ebc:	fa03 f606 	lsl.w	r6, r3, r6
 8000ec0:	4334      	orrs	r4, r6
 8000ec2:	fa23 f000 	lsr.w	r0, r3, r0
 8000ec6:	4304      	orrs	r4, r0
 8000ec8:	fa23 f501 	lsr.w	r5, r3, r1
 8000ecc:	b2e3      	uxtb	r3, r4
 8000ece:	461a      	mov	r2, r3
 8000ed0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ed4:	4928      	ldr	r1, [pc, #160]	; (8000f78 <print_payload_details+0xfc>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f005 fa12 	bl	8006300 <siprintf>
	serialPrint(convertBuffer);
 8000edc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff57 	bl	8000d94 <serialPrint>
    serialPrint(" ");
 8000ee6:	4825      	ldr	r0, [pc, #148]	; (8000f7c <print_payload_details+0x100>)
 8000ee8:	f7ff ff54 	bl	8000d94 <serialPrint>
  for (uint8_t j = 0; j < 5; j++)
 8000eec:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8000ef6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d9d2      	bls.n	8000ea4 <print_payload_details+0x28>
  }
  serialPrintln("");
 8000efe:	4820      	ldr	r0, [pc, #128]	; (8000f80 <print_payload_details+0x104>)
 8000f00:	f7ff ff5c 	bl	8000dbc <serialPrintln>
  serialPrint("payload: ");
 8000f04:	481f      	ldr	r0, [pc, #124]	; (8000f84 <print_payload_details+0x108>)
 8000f06:	f7ff ff45 	bl	8000d94 <serialPrint>
  for (int j = 0; j < payload_size; j++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000f10:	e018      	b.n	8000f44 <print_payload_details+0xc8>
  {
    //Serial.print(payload[j], HEX);
    sprintf(convertBuffer2, "%x", payload[j]);
 8000f12:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <print_payload_details+0x10c>)
 8000f14:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f18:	4413      	add	r3, r2
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f22:	491a      	ldr	r1, [pc, #104]	; (8000f8c <print_payload_details+0x110>)
 8000f24:	4618      	mov	r0, r3
 8000f26:	f005 f9eb 	bl	8006300 <siprintf>
    serialPrint(convertBuffer2);
 8000f2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff30 	bl	8000d94 <serialPrint>
    serialPrint(" ");
 8000f34:	4811      	ldr	r0, [pc, #68]	; (8000f7c <print_payload_details+0x100>)
 8000f36:	f7ff ff2d 	bl	8000d94 <serialPrint>
  for (int j = 0; j < payload_size; j++)
 8000f3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f3e:	3301      	adds	r3, #1
 8000f40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <print_payload_details+0xf0>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	dbdf      	blt.n	8000f12 <print_payload_details+0x96>
  }
  serialPrintln("");
 8000f52:	480b      	ldr	r0, [pc, #44]	; (8000f80 <print_payload_details+0x104>)
 8000f54:	f7ff ff32 	bl	8000dbc <serialPrintln>
  serialPrintln("");
 8000f58:	4809      	ldr	r0, [pc, #36]	; (8000f80 <print_payload_details+0x104>)
 8000f5a:	f7ff ff2f 	bl	8000dbc <serialPrintln>
  return;
 8000f5e:	bf00      	nop
}
 8000f60:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	200002d8 	.word	0x200002d8
 8000f70:	08006b10 	.word	0x08006b10
 8000f74:	20000220 	.word	0x20000220
 8000f78:	08006b38 	.word	0x08006b38
 8000f7c:	08006b3c 	.word	0x08006b3c
 8000f80:	08006b40 	.word	0x08006b40
 8000f84:	08006b44 	.word	0x08006b44
 8000f88:	2000022c 	.word	0x2000022c
 8000f8c:	08006b50 	.word	0x08006b50

08000f90 <crc_update>:

// Update a CRC16-CCITT with 1-8 bits from a given byte
uint16_t crc_update(uint16_t crc, uint8_t byte, uint8_t bits)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	717b      	strb	r3, [r7, #5]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	713b      	strb	r3, [r7, #4]
  crc = crc ^ (byte << 8);
 8000fa2:	797b      	ldrb	r3, [r7, #5]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fac:	4053      	eors	r3, r2
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	80fb      	strh	r3, [r7, #6]
  while(bits--)
 8000fb2:	e010      	b.n	8000fd6 <crc_update+0x46>
    if((crc & 0x8000) == 0x8000) crc = (crc << 1) ^ 0x1021;
 8000fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	da09      	bge.n	8000fd0 <crc_update+0x40>
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000fc6:	f083 0301 	eor.w	r3, r3, #1
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	80fb      	strh	r3, [r7, #6]
 8000fce:	e002      	b.n	8000fd6 <crc_update+0x46>
    else crc = crc << 1;
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	80fb      	strh	r3, [r7, #6]
  while(bits--)
 8000fd6:	793b      	ldrb	r3, [r7, #4]
 8000fd8:	1e5a      	subs	r2, r3, #1
 8000fda:	713a      	strb	r2, [r7, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1e9      	bne.n	8000fb4 <crc_update+0x24>
  crc = crc & 0xFFFF;
  return crc;
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <scan>:
   *
   */
  return true;
}

void scan() {
 8000ff0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000ff4:	b094      	sub	sp, #80	; 0x50
 8000ff6:	af00      	add	r7, sp, #0
  //serialPrintln("starting scan...");
  int x, offset;
  uint8_t buf[PKT_SIZE];
  uint16_t wait = 100;
 8000ff8:	2364      	movs	r3, #100	; 0x64
 8000ffa:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t crc, crc_given;
  uint8_t pl[20];

  // the order of the following is VERY IMPORTANT
  //radio.setAutoAck(false);
  NRF24_setAutoAck(0);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff fd81 	bl	8000b04 <NRF24_setAutoAck>

  // radio.setPALevel(RF24_PA_MIN);
  // radio.setDataRate(RF24_2MBPS);

  //writeRegister(RF_SETUP, 0x09); // Disable PA, 2M rate, LNA enabled
  NRF24_write_register(REG_RF_SETUP, 0x09);
 8001002:	2109      	movs	r1, #9
 8001004:	2006      	movs	r0, #6
 8001006:	f7ff fb5b 	bl	80006c0 <NRF24_write_register>


  //radio.setPayloadSize(32);
  NRF24_setPayloadSize(32);
 800100a:	2020      	movs	r0, #32
 800100c:	f7ff fd4a 	bl	8000aa4 <NRF24_setPayloadSize>

  //radio.setChannel(channel);
  NRF24_setChannel(channel);
 8001010:	4bbd      	ldr	r3, [pc, #756]	; (8001308 <scan+0x318>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fd30 	bl	8000a7a <NRF24_setChannel>

  // RF24 doesn't ever fully set this -- only certain bits of it
  //writeRegister(EN_RXADDR, 0x00);
  NRF24_write_register(REG_EN_RXADDR, 0x00);
 800101a:	2100      	movs	r1, #0
 800101c:	2002      	movs	r0, #2
 800101e:	f7ff fb4f 	bl	80006c0 <NRF24_write_register>

  // RF24 doesn't have a native way to change MAC...
  // 0x00 is "invalid" according to the datasheet, but Travis Goodspeed found it works :)
  //writeRegister(SETUP_AW, 0x00);
  NRF24_write_register(REG_SETUP_AW, 0x00);
 8001022:	2100      	movs	r1, #0
 8001024:	2003      	movs	r0, #3
 8001026:	f7ff fb4b 	bl	80006c0 <NRF24_write_register>

  //radio.openReadingPipe(0, promisc_addr);
  NRF24_openReadingPipe(0, promisc_addr);
 800102a:	4bb8      	ldr	r3, [pc, #736]	; (800130c <scan+0x31c>)
 800102c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001030:	461a      	mov	r2, r3
 8001032:	4623      	mov	r3, r4
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff fcb7 	bl	80009a8 <NRF24_openReadingPipe>

  //radio.disableCRC();
  NRF24_disableCRC();
 800103a:	f7ff fe1f 	bl	8000c7c <NRF24_disableCRC>

  //radio.startListening();
  NRF24_startListening();
 800103e:	f7ff fc85 	bl	800094c <NRF24_startListening>
  while (1) {
	  //uint8_t Dbug[100];
	  //sprintf(Dbug, "Now scanning channel: %u", channel);
	  //serialPrintln(Dbug);

    channel++;
 8001042:	4bb1      	ldr	r3, [pc, #708]	; (8001308 <scan+0x318>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4baf      	ldr	r3, [pc, #700]	; (8001308 <scan+0x318>)
 800104c:	701a      	strb	r2, [r3, #0]
    if (channel > 84) {
 800104e:	4bae      	ldr	r3, [pc, #696]	; (8001308 <scan+0x318>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b54      	cmp	r3, #84	; 0x54
 8001054:	d902      	bls.n	800105c <scan+0x6c>
      //serialPrintln("starting channel sweep");
      //digitalWrite(ledpin, HIGH);
      channel = 2;
 8001056:	4bac      	ldr	r3, [pc, #688]	; (8001308 <scan+0x318>)
 8001058:	2202      	movs	r2, #2
 800105a:	701a      	strb	r2, [r3, #0]
    }

    //Serial.print("tuning radio to ");
    //Serial.println(2400 + channel);
    //radio.setChannel(channel);
    NRF24_setChannel(channel);
 800105c:	4baa      	ldr	r3, [pc, #680]	; (8001308 <scan+0x318>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fd0a 	bl	8000a7a <NRF24_setChannel>


    time = HAL_GetTick();
 8001066:	f000 fd51 	bl	8001b0c <HAL_GetTick>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4ba8      	ldr	r3, [pc, #672]	; (8001310 <scan+0x320>)
 8001070:	601a      	str	r2, [r3, #0]
    while (HAL_GetTick() - time < wait)
 8001072:	e163      	b.n	800133c <scan+0x34c>
    {
      //if (radio.available())
    	if(NRF24_available())
 8001074:	f7ff fc90 	bl	8000998 <NRF24_available>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 815e 	beq.w	800133c <scan+0x34c>
    	{
    		uCm_read(&buf, sizeof(buf));
 8001080:	f107 0318 	add.w	r3, r7, #24
 8001084:	2125      	movs	r1, #37	; 0x25
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff febc 	bl	8000e04 <uCm_read>
    		// decode the payload as-is, and then shift it by one bit and try again
    		// if the first attempt did not pass the CRC check. The purpose of this
    		// is to minimize missed detections that happen if we were to use both
    		// 0xAA and 0x55 as the nonzero promiscuous mode address bytes.

    		for (offset = 0; offset < 2; offset++) {
 800108c:	2300      	movs	r3, #0
 800108e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001090:	e150      	b.n	8001334 <scan+0x344>
    			// Shift the payload right by one bit if this is the second pass
    			if (offset == 1) {
 8001092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001094:	2b01      	cmp	r3, #1
 8001096:	d133      	bne.n	8001100 <scan+0x110>
    				for (x = 31; x >= 0; x--) {
 8001098:	231f      	movs	r3, #31
 800109a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800109c:	e02d      	b.n	80010fa <scan+0x10a>
    					if (x > 0) buf[x] = buf[x - 1] << 7 | buf[x] >> 1;
 800109e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	dd1a      	ble.n	80010da <scan+0xea>
 80010a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80010ac:	4413      	add	r3, r2
 80010ae:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80010b2:	01db      	lsls	r3, r3, #7
 80010b4:	b25a      	sxtb	r2, r3
 80010b6:	f107 0118 	add.w	r1, r7, #24
 80010ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010bc:	440b      	add	r3, r1
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	085b      	lsrs	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	b2d9      	uxtb	r1, r3
 80010cc:	f107 0218 	add.w	r2, r7, #24
 80010d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010d2:	4413      	add	r3, r2
 80010d4:	460a      	mov	r2, r1
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e00c      	b.n	80010f4 <scan+0x104>
    					else buf[x] = buf[x] >> 1;
 80010da:	f107 0218 	add.w	r2, r7, #24
 80010de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e0:	4413      	add	r3, r2
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	085b      	lsrs	r3, r3, #1
 80010e6:	b2d9      	uxtb	r1, r3
 80010e8:	f107 0218 	add.w	r2, r7, #24
 80010ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010ee:	4413      	add	r3, r2
 80010f0:	460a      	mov	r2, r1
 80010f2:	701a      	strb	r2, [r3, #0]
    				for (x = 31; x >= 0; x--) {
 80010f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010f6:	3b01      	subs	r3, #1
 80010f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	dace      	bge.n	800109e <scan+0xae>
    				}
    			}

    			// Read the payload length
    			payload_length = buf[5] >> 2;
 8001100:	7f7b      	ldrb	r3, [r7, #29]
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    			// Check for a valid payload length, which is less than the usual 32 bytes
    			// because we need to account for the packet header, CRC, and part or all
    			// of the address bytes.
    			if (payload_length <= (PAY_SIZE-9))
 8001108:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800110c:	2b17      	cmp	r3, #23
 800110e:	f200 810e 	bhi.w	800132e <scan+0x33e>
    			{
    				// Read the given CRC
    				crc_given = (buf[6 + payload_length] << 9) | ((buf[7 + payload_length]) << 1);
 8001112:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001116:	3306      	adds	r3, #6
 8001118:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800111c:	4413      	add	r3, r2
 800111e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001122:	025b      	lsls	r3, r3, #9
 8001124:	b21a      	sxth	r2, r3
 8001126:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800112a:	3307      	adds	r3, #7
 800112c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001130:	440b      	add	r3, r1
 8001132:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21b      	sxth	r3, r3
 800113e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    				crc_given = (crc_given << 8) | (crc_given >> 8);
 8001142:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21a      	sxth	r2, r3
 800114a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800114e:	0a1b      	lsrs	r3, r3, #8
 8001150:	b29b      	uxth	r3, r3
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b21b      	sxth	r3, r3
 8001158:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    				if (buf[8 + payload_length] & 0x80) crc_given |= 0x100;
 800115c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001160:	3308      	adds	r3, #8
 8001162:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001166:	4413      	add	r3, r2
 8001168:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800116c:	b25b      	sxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	da05      	bge.n	800117e <scan+0x18e>
 8001172:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

    				// Calculate the CRC
    				crc = 0xFFFF;
 800117e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001182:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    				for (x = 0; x < 6 + payload_length; x++) crc = crc_update(crc, buf[x], 8);
 8001186:	2300      	movs	r3, #0
 8001188:	64fb      	str	r3, [r7, #76]	; 0x4c
 800118a:	e010      	b.n	80011ae <scan+0x1be>
 800118c:	f107 0218 	add.w	r2, r7, #24
 8001190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001192:	4413      	add	r3, r2
 8001194:	7819      	ldrb	r1, [r3, #0]
 8001196:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800119a:	2208      	movs	r2, #8
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fef7 	bl	8000f90 <crc_update>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80011a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011aa:	3301      	adds	r3, #1
 80011ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011ae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80011b2:	3306      	adds	r3, #6
 80011b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dbe8      	blt.n	800118c <scan+0x19c>
    				crc = crc_update(crc, buf[6 + payload_length] & 0x80, 1);
 80011ba:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80011be:	3306      	adds	r3, #6
 80011c0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80011c4:	4413      	add	r3, r2
 80011c6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80011ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80011ce:	b2d9      	uxtb	r1, r3
 80011d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80011d4:	2201      	movs	r2, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff feda 	bl	8000f90 <crc_update>
 80011dc:	4603      	mov	r3, r0
 80011de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    				crc = (crc << 8) | (crc >> 8);
 80011e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80011ee:	0a1b      	lsrs	r3, r3, #8
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    				// Verify the CRC
    				if (crc == crc_given) {
 80011fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001200:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 8092 	bne.w	800132e <scan+0x33e>
    					serialPrint("found packet /w valid crc... ");
 800120a:	4842      	ldr	r0, [pc, #264]	; (8001314 <scan+0x324>)
 800120c:	f7ff fdc2 	bl	8000d94 <serialPrint>

    					if (payload_length > 0) {
 8001210:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 8087 	beq.w	8001328 <scan+0x338>
    						sprintf(pl,"Payload length is %u", payload_length);
 800121a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	493d      	ldr	r1, [pc, #244]	; (8001318 <scan+0x328>)
 8001222:	4618      	mov	r0, r3
 8001224:	f005 f86c 	bl	8006300 <siprintf>
    						serialPrintln(pl);
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fdc6 	bl	8000dbc <serialPrintln>
    						// Write the address
    						address = 0;
 8001230:	4a3a      	ldr	r2, [pc, #232]	; (800131c <scan+0x32c>)
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	f04f 0400 	mov.w	r4, #0
 800123a:	e9c2 3400 	strd	r3, r4, [r2]
    						for (int i = 0; i < 4; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	643b      	str	r3, [r7, #64]	; 0x40
 8001242:	e022      	b.n	800128a <scan+0x29a>
    						{
    							address += buf[i];
 8001244:	f107 0218 	add.w	r2, r7, #24
 8001248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b2d9      	uxtb	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <scan+0x32c>)
 8001256:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800125a:	eb1b 0301 	adds.w	r3, fp, r1
 800125e:	eb4c 0402 	adc.w	r4, ip, r2
 8001262:	4a2e      	ldr	r2, [pc, #184]	; (800131c <scan+0x32c>)
 8001264:	e9c2 3400 	strd	r3, r4, [r2]
    							address <<= 8;
 8001268:	4b2c      	ldr	r3, [pc, #176]	; (800131c <scan+0x32c>)
 800126a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	f04f 0400 	mov.w	r4, #0
 8001276:	0214      	lsls	r4, r2, #8
 8001278:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800127c:	020b      	lsls	r3, r1, #8
 800127e:	4a27      	ldr	r2, [pc, #156]	; (800131c <scan+0x32c>)
 8001280:	e9c2 3400 	strd	r3, r4, [r2]
    						for (int i = 0; i < 4; i++)
 8001284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001286:	3301      	adds	r3, #1
 8001288:	643b      	str	r3, [r7, #64]	; 0x40
 800128a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800128c:	2b03      	cmp	r3, #3
 800128e:	ddd9      	ble.n	8001244 <scan+0x254>
    						}
    						address += buf[4];
 8001290:	7f3b      	ldrb	r3, [r7, #28]
 8001292:	b2d9      	uxtb	r1, r3
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	4b20      	ldr	r3, [pc, #128]	; (800131c <scan+0x32c>)
 800129a:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800129e:	eb1b 0301 	adds.w	r3, fp, r1
 80012a2:	eb4c 0402 	adc.w	r4, ip, r2
 80012a6:	4a1d      	ldr	r2, [pc, #116]	; (800131c <scan+0x32c>)
 80012a8:	e9c2 3400 	strd	r3, r4, [r2]

    						// Write the ESB payload to the output buffer
    						for(x = 0; x < payload_length + 3; x++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012b0:	e01d      	b.n	80012ee <scan+0x2fe>
    							payload[x] = ((buf[6 + x] << 1) & 0xFF) | (buf[7 + x] >> 7);
 80012b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012b4:	3306      	adds	r3, #6
 80012b6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80012ba:	4413      	add	r3, r2
 80012bc:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	b25a      	sxtb	r2, r3
 80012c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012c6:	3307      	adds	r3, #7
 80012c8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80012cc:	440b      	add	r3, r1
 80012ce:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80012d2:	09db      	lsrs	r3, r3, #7
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2d9      	uxtb	r1, r3
 80012de:	4a10      	ldr	r2, [pc, #64]	; (8001320 <scan+0x330>)
 80012e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012e2:	4413      	add	r3, r2
 80012e4:	460a      	mov	r2, r1
 80012e6:	701a      	strb	r2, [r3, #0]
    						for(x = 0; x < payload_length + 3; x++)
 80012e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ea:	3301      	adds	r3, #1
 80012ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012ee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80012f2:	3303      	adds	r3, #3
 80012f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012f6:	429a      	cmp	r2, r3
 80012f8:	dbdb      	blt.n	80012b2 <scan+0x2c2>
    						payload_size = payload_length;
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <scan+0x334>)
 80012fc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001300:	7013      	strb	r3, [r2, #0]

    						print_payload_details();
 8001302:	f7ff fdbb 	bl	8000e7c <print_payload_details>
    						return;
 8001306:	e024      	b.n	8001352 <scan+0x362>
 8001308:	20000008 	.word	0x20000008
 800130c:	20000000 	.word	0x20000000
 8001310:	20000228 	.word	0x20000228
 8001314:	08006b54 	.word	0x08006b54
 8001318:	08006b74 	.word	0x08006b74
 800131c:	20000220 	.word	0x20000220
 8001320:	2000022c 	.word	0x2000022c
 8001324:	200002d8 	.word	0x200002d8
    					} else {
    						serialPrintln("payload is empty. scanning...");
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <scan+0x36c>)
 800132a:	f7ff fd47 	bl	8000dbc <serialPrintln>
    		for (offset = 0; offset < 2; offset++) {
 800132e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001330:	3301      	adds	r3, #1
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
 8001334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001336:	2b01      	cmp	r3, #1
 8001338:	f77f aeab 	ble.w	8001092 <scan+0xa2>
    while (HAL_GetTick() - time < wait)
 800133c:	f000 fbe6 	bl	8001b0c <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <scan+0x370>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	1ad2      	subs	r2, r2, r3
 8001348:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800134a:	429a      	cmp	r2, r3
 800134c:	f4ff ae92 	bcc.w	8001074 <scan+0x84>
    channel++;
 8001350:	e677      	b.n	8001042 <scan+0x52>
    			}//end if (payload_length <= (PAY_SIZE-9))
    		}//end for (offset = 0; offset < 2; offset++)
    	}//end if(NRF24_available()
    }//end while (HAL_GetTick() - time < wait)
  }//end while (1)
}//end scan()
 8001352:	3750      	adds	r7, #80	; 0x50
 8001354:	46bd      	mov	sp, r7
 8001356:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800135a:	bf00      	nop
 800135c:	08006b8c 	.word	0x08006b8c
 8001360:	20000228 	.word	0x20000228

08001364 <fingerprint>:
    payload[last] ^= payload[i];
  payload[last] = ~payload[last];
}

void fingerprint()
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  if (payload_size == 19 && payload[0] == 0x08 && payload[6] == 0x40) {
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <fingerprint+0xb4>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b13      	cmp	r3, #19
 800136e:	d10e      	bne.n	800138e <fingerprint+0x2a>
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <fingerprint+0xb8>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b08      	cmp	r3, #8
 8001376:	d10a      	bne.n	800138e <fingerprint+0x2a>
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <fingerprint+0xb8>)
 800137a:	799b      	ldrb	r3, [r3, #6]
 800137c:	2b40      	cmp	r3, #64	; 0x40
 800137e:	d106      	bne.n	800138e <fingerprint+0x2a>
    serialPrintln("found MS mouse");
 8001380:	4827      	ldr	r0, [pc, #156]	; (8001420 <fingerprint+0xbc>)
 8001382:	f7ff fd1b 	bl	8000dbc <serialPrintln>
    payload_type = MICROSOFT;
 8001386:	4b27      	ldr	r3, [pc, #156]	; (8001424 <fingerprint+0xc0>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
    return;
 800138c:	e043      	b.n	8001416 <fingerprint+0xb2>
  }

  if (payload_size == 19 && payload[0] == 0x0a) {
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <fingerprint+0xb4>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b13      	cmp	r3, #19
 8001394:	d10d      	bne.n	80013b2 <fingerprint+0x4e>
 8001396:	4b21      	ldr	r3, [pc, #132]	; (800141c <fingerprint+0xb8>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b0a      	cmp	r3, #10
 800139c:	d109      	bne.n	80013b2 <fingerprint+0x4e>
    serialPrintln("found MS encrypted mouse");
 800139e:	4822      	ldr	r0, [pc, #136]	; (8001428 <fingerprint+0xc4>)
 80013a0:	f7ff fd0c 	bl	8000dbc <serialPrintln>
    payload_type = MICROSOFT;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <fingerprint+0xc0>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
    payload_encrypted = true;
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <fingerprint+0xc8>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
    return;
 80013b0:	e031      	b.n	8001416 <fingerprint+0xb2>
  }

  if (payload[0] == 0) {
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <fingerprint+0xb8>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d12c      	bne.n	8001414 <fingerprint+0xb0>
    if (payload_size == 10 && (payload[1] == 0xC2 || payload[1] == 0x4F))
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <fingerprint+0xb4>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b0a      	cmp	r3, #10
 80013c0:	d10a      	bne.n	80013d8 <fingerprint+0x74>
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <fingerprint+0xb8>)
 80013c4:	785b      	ldrb	r3, [r3, #1]
 80013c6:	2bc2      	cmp	r3, #194	; 0xc2
 80013c8:	d003      	beq.n	80013d2 <fingerprint+0x6e>
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <fingerprint+0xb8>)
 80013cc:	785b      	ldrb	r3, [r3, #1]
 80013ce:	2b4f      	cmp	r3, #79	; 0x4f
 80013d0:	d102      	bne.n	80013d8 <fingerprint+0x74>
      payload_type = LOGITECH;
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <fingerprint+0xc0>)
 80013d4:	2202      	movs	r2, #2
 80013d6:	701a      	strb	r2, [r3, #0]
    if (payload_size == 22 && payload[1] == 0xD3)
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <fingerprint+0xb4>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b16      	cmp	r3, #22
 80013de:	d106      	bne.n	80013ee <fingerprint+0x8a>
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <fingerprint+0xb8>)
 80013e2:	785b      	ldrb	r3, [r3, #1]
 80013e4:	2bd3      	cmp	r3, #211	; 0xd3
 80013e6:	d102      	bne.n	80013ee <fingerprint+0x8a>
      payload_type = LOGITECH;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <fingerprint+0xc0>)
 80013ea:	2202      	movs	r2, #2
 80013ec:	701a      	strb	r2, [r3, #0]
    if (payload_size == 5 && payload[1] == 0x40)
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <fingerprint+0xb4>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d106      	bne.n	8001404 <fingerprint+0xa0>
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <fingerprint+0xb8>)
 80013f8:	785b      	ldrb	r3, [r3, #1]
 80013fa:	2b40      	cmp	r3, #64	; 0x40
 80013fc:	d102      	bne.n	8001404 <fingerprint+0xa0>
      payload_type = LOGITECH;
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <fingerprint+0xc0>)
 8001400:	2202      	movs	r2, #2
 8001402:	701a      	strb	r2, [r3, #0]
    if (payload_type == LOGITECH) serialPrintln("found Logitech mouse");
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <fingerprint+0xc0>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d103      	bne.n	8001414 <fingerprint+0xb0>
 800140c:	4808      	ldr	r0, [pc, #32]	; (8001430 <fingerprint+0xcc>)
 800140e:	f7ff fcd5 	bl	8000dbc <serialPrintln>
  }
  return;
 8001412:	bf00      	nop
 8001414:	bf00      	nop
}
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200002d8 	.word	0x200002d8
 800141c:	2000022c 	.word	0x2000022c
 8001420:	08006bac 	.word	0x08006bac
 8001424:	200001a5 	.word	0x200001a5
 8001428:	08006bbc 	.word	0x08006bbc
 800142c:	200001a4 	.word	0x200001a4
 8001430:	08006bd8 	.word	0x08006bd8

08001434 <reset>:
    //digitalWrite(ledpin, LOW);
  }
  return;
}

void reset() {
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b09b      	sub	sp, #108	; 0x6c
 8001438:	af18      	add	r7, sp, #96	; 0x60
  payload_type = 0;
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <reset+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
  payload_encrypted = false;
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <reset+0x5c>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
  payload_size = 0;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <reset+0x60>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < PAY_SIZE; i++) {
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	e007      	b.n	8001462 <reset+0x2e>
    payload[i] = 0;
 8001452:	4a11      	ldr	r2, [pc, #68]	; (8001498 <reset+0x64>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < PAY_SIZE; i++) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3301      	adds	r3, #1
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b1f      	cmp	r3, #31
 8001466:	ddf4      	ble.n	8001452 <reset+0x1e>
  }
  //radio.begin();
  NRF24_begin(CSNpin_GPIO_Port, CSNpin_Pin, CEpin_Pin, hspi2);
 8001468:	4c0c      	ldr	r4, [pc, #48]	; (800149c <reset+0x68>)
 800146a:	4668      	mov	r0, sp
 800146c:	1d23      	adds	r3, r4, #4
 800146e:	2260      	movs	r2, #96	; 0x60
 8001470:	4619      	mov	r1, r3
 8001472:	f004 ff31 	bl	80062d8 <memcpy>
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	2201      	movs	r2, #1
 800147a:	2120      	movs	r1, #32
 800147c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001480:	f7ff f986 	bl	8000790 <NRF24_begin>
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bd90      	pop	{r4, r7, pc}
 800148c:	200001a5 	.word	0x200001a5
 8001490:	200001a4 	.word	0x200001a4
 8001494:	200002d8 	.word	0x200002d8
 8001498:	2000022c 	.word	0x2000022c
 800149c:	200001bc 	.word	0x200001bc

080014a0 <loop>:


void loop() {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  reset();
 80014a4:	f7ff ffc6 	bl	8001434 <reset>
  scan();
 80014a8:	f7ff fda2 	bl	8000ff0 <scan>
  fingerprint();
 80014ac:	f7ff ff5a 	bl	8001364 <fingerprint>
  //launch_attack();
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b0a1      	sub	sp, #132	; 0x84
 80014b8:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ba:	f000 fac2 	bl	8001a42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014be:	f000 f817 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c2:	f000 f915 	bl	80016f0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80014c6:	f000 f889 	bl	80015dc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80014ca:	f000 f8c5 	bl	8001658 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //NRF24_begin(CEpin_GPIO_Port, CSNpin_Pin, CEpin_Pin, hspi2);
  nrf24_DebugUART_Init(huart2);
 80014ce:	4c07      	ldr	r4, [pc, #28]	; (80014ec <main+0x38>)
 80014d0:	4668      	mov	r0, sp
 80014d2:	f104 0310 	add.w	r3, r4, #16
 80014d6:	227c      	movs	r2, #124	; 0x7c
 80014d8:	4619      	mov	r1, r3
 80014da:	f004 fefd 	bl	80062d8 <memcpy>
 80014de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014e2:	f7ff fc3f 	bl	8000d64 <nrf24_DebugUART_Init>
  while(1){
	  loop();
 80014e6:	f7ff ffdb 	bl	80014a0 <loop>
 80014ea:	e7fc      	b.n	80014e6 <main+0x32>
 80014ec:	2000024c 	.word	0x2000024c

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0be      	sub	sp, #248	; 0xf8
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014fa:	2244      	movs	r2, #68	; 0x44
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f004 fef5 	bl	80062ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	229c      	movs	r2, #156	; 0x9c
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f004 fee7 	bl	80062ee <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001520:	2000      	movs	r0, #0
 8001522:	f000 fdd1 	bl	80020c8 <HAL_PWREx_ControlVoltageScaling>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800152c:	f000 f91e 	bl	800176c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001530:	2310      	movs	r3, #16
 8001532:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001536:	2301      	movs	r3, #1
 8001538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001542:	2360      	movs	r3, #96	; 0x60
 8001544:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001548:	2302      	movs	r3, #2
 800154a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800154e:	2301      	movs	r3, #1
 8001550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001554:	2301      	movs	r3, #1
 8001556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 60;
 800155a:	233c      	movs	r3, #60	; 0x3c
 800155c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8001560:	2305      	movs	r3, #5
 8001562:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001566:	2302      	movs	r3, #2
 8001568:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800156c:	2302      	movs	r3, #2
 800156e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001572:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fe4a 	bl	8002210 <HAL_RCC_OscConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001582:	f000 f8f3 	bl	800176c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001586:	230f      	movs	r3, #15
 8001588:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158c:	2303      	movs	r3, #3
 800158e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015a8:	2105      	movs	r1, #5
 80015aa:	4618      	mov	r0, r3
 80015ac:	f001 fa56 	bl	8002a5c <HAL_RCC_ClockConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0xca>
  {
    Error_Handler();
 80015b6:	f000 f8d9 	bl	800176c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015ba:	2302      	movs	r3, #2
 80015bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015be:	2300      	movs	r3, #0
 80015c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 fcf5 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80015d0:	f000 f8cc 	bl	800176c <Error_Handler>
  }
}
 80015d4:	bf00      	nop
 80015d6:	37f8      	adds	r7, #248	; 0xf8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_SPI2_Init+0x74>)
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <MX_SPI2_Init+0x78>)
 80015e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_SPI2_Init+0x74>)
 80015e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_SPI2_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_SPI2_Init+0x74>)
 80015f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_SPI2_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_SPI2_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_SPI2_Init+0x74>)
 800160a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_SPI2_Init+0x74>)
 8001612:	2220      	movs	r2, #32
 8001614:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_SPI2_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_SPI2_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_SPI2_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_SPI2_Init+0x74>)
 800162a:	2207      	movs	r2, #7
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_SPI2_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_SPI2_Init+0x74>)
 8001636:	2208      	movs	r2, #8
 8001638:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_SPI2_Init+0x74>)
 800163c:	f002 fa22 	bl	8003a84 <HAL_SPI_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001646:	f000 f891 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200001bc 	.word	0x200001bc
 8001654:	40003800 	.word	0x40003800

08001658 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <MX_USART2_UART_Init+0x90>)
 800165e:	4a23      	ldr	r2, [pc, #140]	; (80016ec <MX_USART2_UART_Init+0x94>)
 8001660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <MX_USART2_UART_Init+0x90>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_USART2_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_USART2_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_USART2_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_USART2_UART_Init+0x90>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <MX_USART2_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_USART2_UART_Init+0x90>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <MX_USART2_UART_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_USART2_UART_Init+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <MX_USART2_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <MX_USART2_UART_Init+0x90>)
 80016a2:	f003 f88f 	bl	80047c4 <HAL_UART_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016ac:	f000 f85e 	bl	800176c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b0:	2100      	movs	r1, #0
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <MX_USART2_UART_Init+0x90>)
 80016b4:	f004 fd01 	bl	80060ba <HAL_UARTEx_SetTxFifoThreshold>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016be:	f000 f855 	bl	800176c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c2:	2100      	movs	r1, #0
 80016c4:	4808      	ldr	r0, [pc, #32]	; (80016e8 <MX_USART2_UART_Init+0x90>)
 80016c6:	f004 fd36 	bl	8006136 <HAL_UARTEx_SetRxFifoThreshold>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016d0:	f000 f84c 	bl	800176c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_USART2_UART_Init+0x90>)
 80016d6:	f004 fcb7 	bl	8006048 <HAL_UARTEx_DisableFifoMode>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80016e0:	f000 f844 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2000024c 	.word	0x2000024c
 80016ec:	40004400 	.word	0x40004400

080016f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <MX_GPIO_Init+0x78>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <MX_GPIO_Init+0x78>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <MX_GPIO_Init+0x78>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MX_GPIO_Init+0x78>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	4a11      	ldr	r2, [pc, #68]	; (8001768 <MX_GPIO_Init+0x78>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_GPIO_Init+0x78>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CEpin_Pin|CSNpin_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2121      	movs	r1, #33	; 0x21
 800173a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173e:	f000 fc8b 	bl	8002058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CEpin_Pin CSNpin_Pin */
  GPIO_InitStruct.Pin = CEpin_Pin|CSNpin_Pin;
 8001742:	2321      	movs	r3, #33	; 0x21
 8001744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	4619      	mov	r1, r3
 8001758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175c:	f000 faea 	bl	8001d34 <HAL_GPIO_Init>

}
 8001760:	bf00      	nop
 8001762:	3720      	adds	r7, #32
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40021000 	.word	0x40021000

0800176c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_MspInit+0x44>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001786:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <HAL_MspInit+0x44>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6613      	str	r3, [r2, #96]	; 0x60
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_MspInit+0x44>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_MspInit+0x44>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <HAL_MspInit+0x44>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a4:	6593      	str	r3, [r2, #88]	; 0x58
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_MspInit+0x44>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000

080017c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a17      	ldr	r2, [pc, #92]	; (8001840 <HAL_SPI_MspInit+0x7c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d128      	bne.n	8001838 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_SPI_MspInit+0x80>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	4a16      	ldr	r2, [pc, #88]	; (8001844 <HAL_SPI_MspInit+0x80>)
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f0:	6593      	str	r3, [r2, #88]	; 0x58
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <HAL_SPI_MspInit+0x80>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_SPI_MspInit+0x80>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a10      	ldr	r2, [pc, #64]	; (8001844 <HAL_SPI_MspInit+0x80>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_SPI_MspInit+0x80>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13;
 8001816:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001828:	2305      	movs	r3, #5
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <HAL_SPI_MspInit+0x84>)
 8001834:	f000 fa7e 	bl	8001d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40003800 	.word	0x40003800
 8001844:	40021000 	.word	0x40021000
 8001848:	48000400 	.word	0x48000400

0800184c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_UART_MspInit+0x7c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d128      	bne.n	80018c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_UART_MspInit+0x80>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	4a16      	ldr	r2, [pc, #88]	; (80018cc <HAL_UART_MspInit+0x80>)
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	6593      	str	r3, [r2, #88]	; 0x58
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_UART_MspInit+0x80>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_UART_MspInit+0x80>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <HAL_UART_MspInit+0x80>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_UART_MspInit+0x80>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 800189e:	230c      	movs	r3, #12
 80018a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ae:	2307      	movs	r3, #7
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018bc:	f000 fa3a 	bl	8001d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018c0:	bf00      	nop
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40004400 	.word	0x40004400
 80018cc:	40021000 	.word	0x40021000

080018d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <HardFault_Handler+0x4>

080018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <MemManage_Handler+0x4>

080018ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <BusFault_Handler+0x4>

080018f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <UsageFault_Handler+0x4>

080018f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001924:	f000 f8e0 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <_sbrk+0x50>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x16>
		heap_end = &end;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <_sbrk+0x50>)
 800193e:	4a10      	ldr	r2, [pc, #64]	; (8001980 <_sbrk+0x54>)
 8001940:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <_sbrk+0x50>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <_sbrk+0x50>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4413      	add	r3, r2
 8001950:	466a      	mov	r2, sp
 8001952:	4293      	cmp	r3, r2
 8001954:	d907      	bls.n	8001966 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001956:	f004 fc95 	bl	8006284 <__errno>
 800195a:	4602      	mov	r2, r0
 800195c:	230c      	movs	r3, #12
 800195e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
 8001964:	e006      	b.n	8001974 <_sbrk+0x48>
	}

	heap_end += incr;
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <_sbrk+0x50>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a03      	ldr	r2, [pc, #12]	; (800197c <_sbrk+0x50>)
 8001970:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200001a8 	.word	0x200001a8
 8001980:	200002e8 	.word	0x200002e8

08001984 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <SystemInit+0x64>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198e:	4a16      	ldr	r2, [pc, #88]	; (80019e8 <SystemInit+0x64>)
 8001990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <SystemInit+0x68>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a13      	ldr	r2, [pc, #76]	; (80019ec <SystemInit+0x68>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <SystemInit+0x68>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <SystemInit+0x68>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <SystemInit+0x68>)
 80019b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <SystemInit+0x68>)
 80019bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <SystemInit+0x68>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <SystemInit+0x68>)
 80019c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <SystemInit+0x68>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <SystemInit+0x64>)
 80019d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019da:	609a      	str	r2, [r3, #8]
#endif
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00
 80019ec:	40021000 	.word	0x40021000

080019f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a28 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019f6:	e003      	b.n	8001a00 <LoopCopyDataInit>

080019f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019fe:	3104      	adds	r1, #4

08001a00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a00:	480b      	ldr	r0, [pc, #44]	; (8001a30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a08:	d3f6      	bcc.n	80019f8 <CopyDataInit>
	ldr	r2, =_sbss
 8001a0a:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a0c:	e002      	b.n	8001a14 <LoopFillZerobss>

08001a0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a10:	f842 3b04 	str.w	r3, [r2], #4

08001a14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <LoopForever+0x16>)
	cmp	r2, r3
 8001a16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a18:	d3f9      	bcc.n	8001a0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a1a:	f7ff ffb3 	bl	8001984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f004 fc37 	bl	8006290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a22:	f7ff fd47 	bl	80014b4 <main>

08001a26 <LoopForever>:

LoopForever:
    b LoopForever
 8001a26:	e7fe      	b.n	8001a26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a28:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001a2c:	08006cf0 	.word	0x08006cf0
	ldr	r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a34:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8001a38:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8001a3c:	200002e4 	.word	0x200002e4

08001a40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <ADC1_IRQHandler>

08001a42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 f93d 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 f80e 	bl	8001a74 <HAL_InitTick>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	71fb      	strb	r3, [r7, #7]
 8001a62:	e001      	b.n	8001a68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a64:	f7ff fe8a 	bl	800177c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_InitTick+0x68>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d022      	beq.n	8001ace <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_InitTick+0x6c>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_InitTick+0x68>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 f93c 	bl	8001d1a <HAL_SYSTICK_Config>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10f      	bne.n	8001ac8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b0f      	cmp	r3, #15
 8001aac:	d809      	bhi.n	8001ac2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab6:	f000 f914 	bl	8001ce2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_InitTick+0x70>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	e007      	b.n	8001ad2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	e004      	b.n	8001ad2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	e001      	b.n	8001ad2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000014 	.word	0x20000014
 8001ae0:	2000000c 	.word	0x2000000c
 8001ae4:	20000010 	.word	0x20000010

08001ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_IncTick+0x1c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_IncTick+0x20>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4413      	add	r3, r2
 8001af6:	4a03      	ldr	r2, [pc, #12]	; (8001b04 <HAL_IncTick+0x1c>)
 8001af8:	6013      	str	r3, [r2, #0]
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	200002dc 	.word	0x200002dc
 8001b08:	20000014 	.word	0x20000014

08001b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_GetTick+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	200002dc 	.word	0x200002dc

08001b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff ffee 	bl	8001b0c <HAL_GetTick>
 8001b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d004      	beq.n	8001b48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_Delay+0x40>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	4413      	add	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b48:	bf00      	nop
 8001b4a:	f7ff ffdf 	bl	8001b0c <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d8f7      	bhi.n	8001b4a <HAL_Delay+0x26>
  {
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000014 	.word	0x20000014

08001b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b84:	4013      	ands	r3, r2
 8001b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9a:	4a04      	ldr	r2, [pc, #16]	; (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	60d3      	str	r3, [r2, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	f003 0307 	and.w	r3, r3, #7
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db0a      	blt.n	8001bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	490c      	ldr	r1, [pc, #48]	; (8001c18 <__NVIC_SetPriority+0x4c>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf4:	e00a      	b.n	8001c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4908      	ldr	r1, [pc, #32]	; (8001c1c <__NVIC_SetPriority+0x50>)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	3b04      	subs	r3, #4
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	761a      	strb	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f1c3 0307 	rsb	r3, r3, #7
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	bf28      	it	cs
 8001c3e:	2304      	movcs	r3, #4
 8001c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3304      	adds	r3, #4
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d902      	bls.n	8001c50 <NVIC_EncodePriority+0x30>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3b03      	subs	r3, #3
 8001c4e:	e000      	b.n	8001c52 <NVIC_EncodePriority+0x32>
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	401a      	ands	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	4313      	orrs	r3, r2
         );
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c98:	d301      	bcc.n	8001c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00f      	b.n	8001cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <SysTick_Config+0x40>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f7ff ff8e 	bl	8001bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb8:	2207      	movs	r2, #7
 8001cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	e000e010 	.word	0xe000e010

08001ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff47 	bl	8001b68 <__NVIC_SetPriorityGrouping>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf4:	f7ff ff5c 	bl	8001bb0 <__NVIC_GetPriorityGrouping>
 8001cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff8e 	bl	8001c20 <NVIC_EncodePriority>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5d 	bl	8001bcc <__NVIC_SetPriority>
}
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ffb0 	bl	8001c88 <SysTick_Config>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d42:	e166      	b.n	8002012 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8158 	beq.w	800200c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d00b      	beq.n	8001d7c <HAL_GPIO_Init+0x48>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d007      	beq.n	8001d7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d70:	2b11      	cmp	r3, #17
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b12      	cmp	r3, #18
 8001d7a:	d130      	bne.n	8001dde <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001db2:	2201      	movs	r2, #1
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	f003 0201 	and.w	r2, r3, #1
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0xea>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b12      	cmp	r3, #18
 8001e1c:	d123      	bne.n	8001e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	6939      	ldr	r1, [r7, #16]
 8001e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0203 	and.w	r2, r3, #3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80b2 	beq.w	800200c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea8:	4b61      	ldr	r3, [pc, #388]	; (8002030 <HAL_GPIO_Init+0x2fc>)
 8001eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eac:	4a60      	ldr	r2, [pc, #384]	; (8002030 <HAL_GPIO_Init+0x2fc>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6613      	str	r3, [r2, #96]	; 0x60
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <HAL_GPIO_Init+0x2fc>)
 8001eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ec0:	4a5c      	ldr	r2, [pc, #368]	; (8002034 <HAL_GPIO_Init+0x300>)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eea:	d02b      	beq.n	8001f44 <HAL_GPIO_Init+0x210>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a52      	ldr	r2, [pc, #328]	; (8002038 <HAL_GPIO_Init+0x304>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d025      	beq.n	8001f40 <HAL_GPIO_Init+0x20c>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a51      	ldr	r2, [pc, #324]	; (800203c <HAL_GPIO_Init+0x308>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d01f      	beq.n	8001f3c <HAL_GPIO_Init+0x208>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a50      	ldr	r2, [pc, #320]	; (8002040 <HAL_GPIO_Init+0x30c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d019      	beq.n	8001f38 <HAL_GPIO_Init+0x204>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a4f      	ldr	r2, [pc, #316]	; (8002044 <HAL_GPIO_Init+0x310>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d013      	beq.n	8001f34 <HAL_GPIO_Init+0x200>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a4e      	ldr	r2, [pc, #312]	; (8002048 <HAL_GPIO_Init+0x314>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d00d      	beq.n	8001f30 <HAL_GPIO_Init+0x1fc>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a4d      	ldr	r2, [pc, #308]	; (800204c <HAL_GPIO_Init+0x318>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d007      	beq.n	8001f2c <HAL_GPIO_Init+0x1f8>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a4c      	ldr	r2, [pc, #304]	; (8002050 <HAL_GPIO_Init+0x31c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d101      	bne.n	8001f28 <HAL_GPIO_Init+0x1f4>
 8001f24:	2307      	movs	r3, #7
 8001f26:	e00e      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f28:	2308      	movs	r3, #8
 8001f2a:	e00c      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f2c:	2306      	movs	r3, #6
 8001f2e:	e00a      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f30:	2305      	movs	r3, #5
 8001f32:	e008      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f34:	2304      	movs	r3, #4
 8001f36:	e006      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e004      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e002      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f44:	2300      	movs	r3, #0
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	f002 0203 	and.w	r2, r2, #3
 8001f4c:	0092      	lsls	r2, r2, #2
 8001f4e:	4093      	lsls	r3, r2
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f56:	4937      	ldr	r1, [pc, #220]	; (8002034 <HAL_GPIO_Init+0x300>)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f64:	4b3b      	ldr	r3, [pc, #236]	; (8002054 <HAL_GPIO_Init+0x320>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f88:	4a32      	ldr	r2, [pc, #200]	; (8002054 <HAL_GPIO_Init+0x320>)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f8e:	4b31      	ldr	r3, [pc, #196]	; (8002054 <HAL_GPIO_Init+0x320>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fb2:	4a28      	ldr	r2, [pc, #160]	; (8002054 <HAL_GPIO_Init+0x320>)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <HAL_GPIO_Init+0x320>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <HAL_GPIO_Init+0x320>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <HAL_GPIO_Init+0x320>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002006:	4a13      	ldr	r2, [pc, #76]	; (8002054 <HAL_GPIO_Init+0x320>)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3301      	adds	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	f47f ae91 	bne.w	8001d44 <HAL_GPIO_Init+0x10>
  }
}
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	40010000 	.word	0x40010000
 8002038:	48000400 	.word	0x48000400
 800203c:	48000800 	.word	0x48000800
 8002040:	48000c00 	.word	0x48000c00
 8002044:	48001000 	.word	0x48001000
 8002048:	48001400 	.word	0x48001400
 800204c:	48001800 	.word	0x48001800
 8002050:	48001c00 	.word	0x48001c00
 8002054:	40010400 	.word	0x40010400

08002058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]
 8002064:	4613      	mov	r3, r2
 8002066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002068:	787b      	ldrb	r3, [r7, #1]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800206e:	887a      	ldrh	r2, [r7, #2]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002074:	e002      	b.n	800207c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002098:	d102      	bne.n	80020a0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800209a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800209e:	e00b      	b.n	80020b8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80020a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ae:	d102      	bne.n	80020b6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80020b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020b4:	e000      	b.n	80020b8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80020b6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40007000 	.word	0x40007000

080020c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d141      	bne.n	800215a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020d6:	4b4b      	ldr	r3, [pc, #300]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e2:	d131      	bne.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e4:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ea:	4a46      	ldr	r2, [pc, #280]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f4:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020fc:	4a41      	ldr	r2, [pc, #260]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002102:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002104:	4b40      	ldr	r3, [pc, #256]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2232      	movs	r2, #50	; 0x32
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	4a3f      	ldr	r2, [pc, #252]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	0c9b      	lsrs	r3, r3, #18
 8002116:	3301      	adds	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800211a:	e002      	b.n	8002122 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3b01      	subs	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002122:	4b38      	ldr	r3, [pc, #224]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212e:	d102      	bne.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f2      	bne.n	800211c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002136:	4b33      	ldr	r3, [pc, #204]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002142:	d158      	bne.n	80021f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e057      	b.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002148:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800214e:	4a2d      	ldr	r2, [pc, #180]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002154:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002158:	e04d      	b.n	80021f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002160:	d141      	bne.n	80021e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002162:	4b28      	ldr	r3, [pc, #160]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800216a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800216e:	d131      	bne.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002170:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002176:	4a23      	ldr	r2, [pc, #140]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002180:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002188:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2232      	movs	r2, #50	; 0x32
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	4a1c      	ldr	r2, [pc, #112]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800219c:	fba2 2303 	umull	r2, r3, r2, r3
 80021a0:	0c9b      	lsrs	r3, r3, #18
 80021a2:	3301      	adds	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021a6:	e002      	b.n	80021ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ba:	d102      	bne.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f2      	bne.n	80021a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ce:	d112      	bne.n	80021f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e011      	b.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021da:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021e4:	e007      	b.n	80021f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021f4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	40007000 	.word	0x40007000
 8002208:	2000000c 	.word	0x2000000c
 800220c:	431bde83 	.word	0x431bde83

08002210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	f000 bc16 	b.w	8002a50 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002224:	4ba0      	ldr	r3, [pc, #640]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800222e:	4b9e      	ldr	r3, [pc, #632]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80e4 	beq.w	800240e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <HAL_RCC_OscConfig+0x4c>
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	f040 808b 	bne.w	800236a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b01      	cmp	r3, #1
 8002258:	f040 8087 	bne.w	800236a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800225c:	4b92      	ldr	r3, [pc, #584]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_OscConfig+0x64>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e3ed      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	4b8b      	ldr	r3, [pc, #556]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d004      	beq.n	800228e <HAL_RCC_OscConfig+0x7e>
 8002284:	4b88      	ldr	r3, [pc, #544]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800228c:	e005      	b.n	800229a <HAL_RCC_OscConfig+0x8a>
 800228e:	4b86      	ldr	r3, [pc, #536]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229a:	4293      	cmp	r3, r2
 800229c:	d223      	bcs.n	80022e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fdc6 	bl	8002e34 <RCC_SetFlashLatencyFromMSIRange>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e3ce      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b2:	4b7d      	ldr	r3, [pc, #500]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a7c      	ldr	r2, [pc, #496]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022b8:	f043 0308 	orr.w	r3, r3, #8
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b7a      	ldr	r3, [pc, #488]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4977      	ldr	r1, [pc, #476]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d0:	4b75      	ldr	r3, [pc, #468]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	4972      	ldr	r1, [pc, #456]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
 80022e4:	e025      	b.n	8002332 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e6:	4b70      	ldr	r3, [pc, #448]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a6f      	ldr	r2, [pc, #444]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022ec:	f043 0308 	orr.w	r3, r3, #8
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b6d      	ldr	r3, [pc, #436]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	496a      	ldr	r1, [pc, #424]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002304:	4b68      	ldr	r3, [pc, #416]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	4965      	ldr	r1, [pc, #404]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fd86 	bl	8002e34 <RCC_SetFlashLatencyFromMSIRange>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e38e      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002332:	f000 fcbf 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002336:	4601      	mov	r1, r0
 8002338:	4b5b      	ldr	r3, [pc, #364]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	4a5a      	ldr	r2, [pc, #360]	; (80024ac <HAL_RCC_OscConfig+0x29c>)
 8002344:	5cd3      	ldrb	r3, [r2, r3]
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	fa21 f303 	lsr.w	r3, r1, r3
 800234e:	4a58      	ldr	r2, [pc, #352]	; (80024b0 <HAL_RCC_OscConfig+0x2a0>)
 8002350:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002352:	4b58      	ldr	r3, [pc, #352]	; (80024b4 <HAL_RCC_OscConfig+0x2a4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fb8c 	bl	8001a74 <HAL_InitTick>
 800235c:	4603      	mov	r3, r0
 800235e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d052      	beq.n	800240c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	e372      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d032      	beq.n	80023d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002372:	4b4d      	ldr	r3, [pc, #308]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a4c      	ldr	r2, [pc, #304]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800237e:	f7ff fbc5 	bl	8001b0c <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002386:	f7ff fbc1 	bl	8001b0c <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e35b      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002398:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a4:	4b40      	ldr	r3, [pc, #256]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a3f      	ldr	r2, [pc, #252]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023aa:	f043 0308 	orr.w	r3, r3, #8
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	493a      	ldr	r1, [pc, #232]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	4935      	ldr	r1, [pc, #212]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
 80023d6:	e01a      	b.n	800240e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023d8:	4b33      	ldr	r3, [pc, #204]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a32      	ldr	r2, [pc, #200]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023e4:	f7ff fb92 	bl	8001b0c <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ec:	f7ff fb8e 	bl	8001b0c <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e328      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023fe:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x1dc>
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800240c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d073      	beq.n	8002502 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2b08      	cmp	r3, #8
 800241e:	d005      	beq.n	800242c <HAL_RCC_OscConfig+0x21c>
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d10e      	bne.n	8002444 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d10b      	bne.n	8002444 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d063      	beq.n	8002500 <HAL_RCC_OscConfig+0x2f0>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d15f      	bne.n	8002500 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e305      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244c:	d106      	bne.n	800245c <HAL_RCC_OscConfig+0x24c>
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e01d      	b.n	8002498 <HAL_RCC_OscConfig+0x288>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0x270>
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a0f      	ldr	r2, [pc, #60]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 800246c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a0c      	ldr	r2, [pc, #48]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0x288>
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01b      	beq.n	80024d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7ff fb34 	bl	8001b0c <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a6:	e010      	b.n	80024ca <HAL_RCC_OscConfig+0x2ba>
 80024a8:	40021000 	.word	0x40021000
 80024ac:	08006c64 	.word	0x08006c64
 80024b0:	2000000c 	.word	0x2000000c
 80024b4:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff fb28 	bl	8001b0c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e2c2      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ca:	4baf      	ldr	r3, [pc, #700]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x2a8>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7ff fb18 	bl	8001b0c <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff fb14 	bl	8001b0c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e2ae      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024f2:	4ba5      	ldr	r3, [pc, #660]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x2d0>
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d060      	beq.n	80025d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d005      	beq.n	8002520 <HAL_RCC_OscConfig+0x310>
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d119      	bne.n	800254e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d116      	bne.n	800254e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002520:	4b99      	ldr	r3, [pc, #612]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_OscConfig+0x328>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e28b      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b93      	ldr	r3, [pc, #588]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	4990      	ldr	r1, [pc, #576]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800254c:	e040      	b.n	80025d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d023      	beq.n	800259e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002556:	4b8c      	ldr	r3, [pc, #560]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a8b      	ldr	r2, [pc, #556]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7ff fad3 	bl	8001b0c <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256a:	f7ff facf 	bl	8001b0c <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e269      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800257c:	4b82      	ldr	r3, [pc, #520]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b7f      	ldr	r3, [pc, #508]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	061b      	lsls	r3, r3, #24
 8002596:	497c      	ldr	r1, [pc, #496]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
 800259c:	e018      	b.n	80025d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259e:	4b7a      	ldr	r3, [pc, #488]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a79      	ldr	r2, [pc, #484]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80025a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7ff faaf 	bl	8001b0c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b2:	f7ff faab 	bl	8001b0c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e245      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c4:	4b70      	ldr	r3, [pc, #448]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f0      	bne.n	80025b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d03c      	beq.n	8002656 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01c      	beq.n	800261e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e4:	4b68      	ldr	r3, [pc, #416]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80025e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ea:	4a67      	ldr	r2, [pc, #412]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7ff fa8a 	bl	8001b0c <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fc:	f7ff fa86 	bl	8001b0c <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e220      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800260e:	4b5e      	ldr	r3, [pc, #376]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ef      	beq.n	80025fc <HAL_RCC_OscConfig+0x3ec>
 800261c:	e01b      	b.n	8002656 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261e:	4b5a      	ldr	r3, [pc, #360]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002624:	4a58      	ldr	r2, [pc, #352]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002626:	f023 0301 	bic.w	r3, r3, #1
 800262a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7ff fa6d 	bl	8001b0c <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002636:	f7ff fa69 	bl	8001b0c <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e203      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002648:	4b4f      	ldr	r3, [pc, #316]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800264a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ef      	bne.n	8002636 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80a6 	beq.w	80027b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002668:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10d      	bne.n	8002690 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002674:	4b44      	ldr	r3, [pc, #272]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	4a43      	ldr	r2, [pc, #268]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800267a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267e:	6593      	str	r3, [r2, #88]	; 0x58
 8002680:	4b41      	ldr	r3, [pc, #260]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268c:	2301      	movs	r3, #1
 800268e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002690:	4b3e      	ldr	r3, [pc, #248]	; (800278c <HAL_RCC_OscConfig+0x57c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d118      	bne.n	80026ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800269c:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_RCC_OscConfig+0x57c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a3a      	ldr	r2, [pc, #232]	; (800278c <HAL_RCC_OscConfig+0x57c>)
 80026a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a8:	f7ff fa30 	bl	8001b0c <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b0:	f7ff fa2c 	bl	8001b0c <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e1c6      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c2:	4b32      	ldr	r3, [pc, #200]	; (800278c <HAL_RCC_OscConfig+0x57c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d108      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4d8>
 80026d6:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026dc:	4a2a      	ldr	r2, [pc, #168]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e6:	e024      	b.n	8002732 <HAL_RCC_OscConfig+0x522>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b05      	cmp	r3, #5
 80026ee:	d110      	bne.n	8002712 <HAL_RCC_OscConfig+0x502>
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	4a24      	ldr	r2, [pc, #144]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002700:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	4a20      	ldr	r2, [pc, #128]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002710:	e00f      	b.n	8002732 <HAL_RCC_OscConfig+0x522>
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002718:	4a1b      	ldr	r2, [pc, #108]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002722:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002728:	4a17      	ldr	r2, [pc, #92]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800272a:	f023 0304 	bic.w	r3, r3, #4
 800272e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d016      	beq.n	8002768 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273a:	f7ff f9e7 	bl	8001b0c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7ff f9e3 	bl	8001b0c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e17b      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0ed      	beq.n	8002742 <HAL_RCC_OscConfig+0x532>
 8002766:	e01a      	b.n	800279e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7ff f9d0 	bl	8001b0c <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800276e:	e00f      	b.n	8002790 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f7ff f9cc 	bl	8001b0c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d906      	bls.n	8002790 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e164      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002790:	4ba8      	ldr	r3, [pc, #672]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1e8      	bne.n	8002770 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279e:	7ffb      	ldrb	r3, [r7, #31]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a4:	4ba3      	ldr	r3, [pc, #652]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	4aa2      	ldr	r2, [pc, #648]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80027aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d03c      	beq.n	8002836 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01c      	beq.n	80027fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027c4:	4b9b      	ldr	r3, [pc, #620]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80027c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ca:	4a9a      	ldr	r2, [pc, #616]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7ff f99a 	bl	8001b0c <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027dc:	f7ff f996 	bl	8001b0c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e130      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ee:	4b91      	ldr	r3, [pc, #580]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80027f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0ef      	beq.n	80027dc <HAL_RCC_OscConfig+0x5cc>
 80027fc:	e01b      	b.n	8002836 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027fe:	4b8d      	ldr	r3, [pc, #564]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002800:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002804:	4a8b      	ldr	r2, [pc, #556]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280e:	f7ff f97d 	bl	8001b0c <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002816:	f7ff f979 	bl	8001b0c <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e113      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002828:	4b82      	ldr	r3, [pc, #520]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 800282a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1ef      	bne.n	8002816 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8107 	beq.w	8002a4e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	2b02      	cmp	r3, #2
 8002846:	f040 80cb 	bne.w	80029e0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800284a:	4b7a      	ldr	r3, [pc, #488]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f003 0203 	and.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	429a      	cmp	r2, r3
 800285c:	d12c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	3b01      	subs	r3, #1
 800286a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d123      	bne.n	80028b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d11b      	bne.n	80028b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d113      	bne.n	80028b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	3b01      	subs	r3, #1
 800289e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d109      	bne.n	80028b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	3b01      	subs	r3, #1
 80028b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d06d      	beq.n	8002994 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d068      	beq.n	8002990 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028be:	4b5d      	ldr	r3, [pc, #372]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d105      	bne.n	80028d6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028ca:	4b5a      	ldr	r3, [pc, #360]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0ba      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028da:	4b56      	ldr	r3, [pc, #344]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a55      	ldr	r2, [pc, #340]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80028e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e6:	f7ff f911 	bl	8001b0c <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ee:	f7ff f90d 	bl	8001b0c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e0a7      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002900:	4b4c      	ldr	r3, [pc, #304]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1f0      	bne.n	80028ee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290c:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	4b49      	ldr	r3, [pc, #292]	; (8002a38 <HAL_RCC_OscConfig+0x828>)
 8002912:	4013      	ands	r3, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800291c:	3a01      	subs	r2, #1
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	4311      	orrs	r1, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002926:	0212      	lsls	r2, r2, #8
 8002928:	4311      	orrs	r1, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800292e:	0852      	lsrs	r2, r2, #1
 8002930:	3a01      	subs	r2, #1
 8002932:	0552      	lsls	r2, r2, #21
 8002934:	4311      	orrs	r1, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800293a:	0852      	lsrs	r2, r2, #1
 800293c:	3a01      	subs	r2, #1
 800293e:	0652      	lsls	r2, r2, #25
 8002940:	4311      	orrs	r1, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002946:	06d2      	lsls	r2, r2, #27
 8002948:	430a      	orrs	r2, r1
 800294a:	493a      	ldr	r1, [pc, #232]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 800294c:	4313      	orrs	r3, r2
 800294e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002950:	4b38      	ldr	r3, [pc, #224]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a37      	ldr	r2, [pc, #220]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800295c:	4b35      	ldr	r3, [pc, #212]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4a34      	ldr	r2, [pc, #208]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002966:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002968:	f7ff f8d0 	bl	8001b0c <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7ff f8cc 	bl	8001b0c <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e066      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800298e:	e05e      	b.n	8002a4e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e05d      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002994:	4b27      	ldr	r3, [pc, #156]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d156      	bne.n	8002a4e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029a0:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a23      	ldr	r2, [pc, #140]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029ac:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a20      	ldr	r2, [pc, #128]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029b8:	f7ff f8a8 	bl	8001b0c <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c0:	f7ff f8a4 	bl	8001b0c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e03e      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d2:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x7b0>
 80029de:	e036      	b.n	8002a4e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d031      	beq.n	8002a4a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002a04:	f023 0303 	bic.w	r3, r3, #3
 8002a08:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002a10:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a18:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1a:	f7ff f877 	bl	8001b0c <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a20:	e00c      	b.n	8002a3c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a22:	f7ff f873 	bl	8001b0c <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d905      	bls.n	8002a3c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e00d      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
 8002a34:	40021000 	.word	0x40021000
 8002a38:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_RCC_OscConfig+0x848>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ec      	bne.n	8002a22 <HAL_RCC_OscConfig+0x812>
 8002a48:	e001      	b.n	8002a4e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3720      	adds	r7, #32
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000

08002a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e10f      	b.n	8002c94 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b89      	ldr	r3, [pc, #548]	; (8002c9c <HAL_RCC_ClockConfig+0x240>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d910      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b86      	ldr	r3, [pc, #536]	; (8002c9c <HAL_RCC_ClockConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 020f 	bic.w	r2, r3, #15
 8002a8a:	4984      	ldr	r1, [pc, #528]	; (8002c9c <HAL_RCC_ClockConfig+0x240>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b82      	ldr	r3, [pc, #520]	; (8002c9c <HAL_RCC_ClockConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0f7      	b.n	8002c94 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8089 	beq.w	8002bc4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d133      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aba:	4b79      	ldr	r3, [pc, #484]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0e4      	b.n	8002c94 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002aca:	f000 fa0d 	bl	8002ee8 <RCC_GetSysClockFreqFromPLLSource>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	4b74      	ldr	r3, [pc, #464]	; (8002ca4 <HAL_RCC_ClockConfig+0x248>)
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d955      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ad6:	4b72      	ldr	r3, [pc, #456]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ae2:	4b6f      	ldr	r3, [pc, #444]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aea:	4a6d      	ldr	r2, [pc, #436]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	e044      	b.n	8002b82 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d03e      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x126>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d13a      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b0c:	4b64      	ldr	r3, [pc, #400]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b14:	4a62      	ldr	r2, [pc, #392]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e02f      	b.n	8002b82 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d115      	bne.n	8002b62 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e0ac      	b.n	8002c94 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b42:	4b57      	ldr	r3, [pc, #348]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e0a0      	b.n	8002c94 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b52:	4b53      	ldr	r3, [pc, #332]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e098      	b.n	8002c94 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002b62:	f000 f8a7 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002b66:	4602      	mov	r2, r0
 8002b68:	4b4e      	ldr	r3, [pc, #312]	; (8002ca4 <HAL_RCC_ClockConfig+0x248>)
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d909      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b76:	4a4a      	ldr	r2, [pc, #296]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b82:	4b47      	ldr	r3, [pc, #284]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f023 0203 	bic.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4944      	ldr	r1, [pc, #272]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b94:	f7fe ffba 	bl	8001b0c <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9c:	f7fe ffb6 	bl	8001b0c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e070      	b.n	8002c94 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 020c 	and.w	r2, r3, #12
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d1eb      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d009      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd0:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4930      	ldr	r1, [pc, #192]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b80      	cmp	r3, #128	; 0x80
 8002be8:	d105      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002bea:	4b2d      	ldr	r3, [pc, #180]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4a2c      	ldr	r2, [pc, #176]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002bf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf6:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <HAL_RCC_ClockConfig+0x240>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d210      	bcs.n	8002c26 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <HAL_RCC_ClockConfig+0x240>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 020f 	bic.w	r2, r3, #15
 8002c0c:	4923      	ldr	r1, [pc, #140]	; (8002c9c <HAL_RCC_ClockConfig+0x240>)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c14:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <HAL_RCC_ClockConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e036      	b.n	8002c94 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	4918      	ldr	r1, [pc, #96]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d009      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c50:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4910      	ldr	r1, [pc, #64]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c64:	f000 f826 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c68:	4601      	mov	r1, r0
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <HAL_RCC_ClockConfig+0x244>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <HAL_RCC_ClockConfig+0x24c>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	fa21 f303 	lsr.w	r3, r1, r3
 8002c80:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <HAL_RCC_ClockConfig+0x250>)
 8002c82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_RCC_ClockConfig+0x254>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe fef3 	bl	8001a74 <HAL_InitTick>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40022000 	.word	0x40022000
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	04c4b400 	.word	0x04c4b400
 8002ca8:	08006c64 	.word	0x08006c64
 8002cac:	2000000c 	.word	0x2000000c
 8002cb0:	20000010 	.word	0x20000010

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc2:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d121      	bne.n	8002d26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d11e      	bne.n	8002d26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ce8:	4b33      	ldr	r3, [pc, #204]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cf4:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfa:	0a1b      	lsrs	r3, r3, #8
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	e005      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d04:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d10:	4a2a      	ldr	r2, [pc, #168]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10d      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d102      	bne.n	8002d32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e004      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d133      	bne.n	8002daa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d42:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d002      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0xa4>
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d003      	beq.n	8002d5e <HAL_RCC_GetSysClockFreq+0xaa>
 8002d56:	e005      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d58:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d5a:	617b      	str	r3, [r7, #20]
      break;
 8002d5c:	e005      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d5e:	4b18      	ldr	r3, [pc, #96]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d60:	617b      	str	r3, [r7, #20]
      break;
 8002d62:	e002      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	617b      	str	r3, [r7, #20]
      break;
 8002d68:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d6a:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	3301      	adds	r3, #1
 8002d76:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d78:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	fb02 f203 	mul.w	r2, r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0e5b      	lsrs	r3, r3, #25
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002daa:	69bb      	ldr	r3, [r7, #24]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3724      	adds	r7, #36	; 0x24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	08006c7c 	.word	0x08006c7c
 8002dc0:	00f42400 	.word	0x00f42400

08002dc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	2000000c 	.word	0x2000000c

08002ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002de0:	f7ff fff0 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002de4:	4601      	mov	r1, r0
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002df2:	5cd3      	ldrb	r3, [r2, r3]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	08006c74 	.word	0x08006c74

08002e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e0c:	f7ff ffda 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002e10:	4601      	mov	r1, r0
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	0adb      	lsrs	r3, r3, #11
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e1e:	5cd3      	ldrb	r3, [r2, r3]
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	08006c74 	.word	0x08006c74

08002e34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e40:	4b27      	ldr	r3, [pc, #156]	; (8002ee0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e4c:	f7ff f91c 	bl	8002088 <HAL_PWREx_GetVoltageRange>
 8002e50:	6178      	str	r0, [r7, #20]
 8002e52:	e014      	b.n	8002e7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e54:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	4a21      	ldr	r2, [pc, #132]	; (8002ee0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e60:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e6c:	f7ff f90c 	bl	8002088 <HAL_PWREx_GetVoltageRange>
 8002e70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	4a1a      	ldr	r2, [pc, #104]	; (8002ee0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e84:	d10b      	bne.n	8002e9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b80      	cmp	r3, #128	; 0x80
 8002e8a:	d913      	bls.n	8002eb4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2ba0      	cmp	r3, #160	; 0xa0
 8002e90:	d902      	bls.n	8002e98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e92:	2302      	movs	r3, #2
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	e00d      	b.n	8002eb4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e98:	2301      	movs	r3, #1
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	e00a      	b.n	8002eb4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ea2:	d902      	bls.n	8002eaa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	e004      	b.n	8002eb4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b70      	cmp	r3, #112	; 0x70
 8002eae:	d101      	bne.n	8002eb4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f023 020f 	bic.w	r2, r3, #15
 8002ebc:	4909      	ldr	r1, [pc, #36]	; (8002ee4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ec4:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d001      	beq.n	8002ed6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40022000 	.word	0x40022000

08002ee8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002ef2:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d118      	bne.n	8002f30 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002efe:	4b2a      	ldr	r3, [pc, #168]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d107      	bne.n	8002f1a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f0a:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	e005      	b.n	8002f26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f1a:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	091b      	lsrs	r3, r3, #4
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f26:	4a21      	ldr	r2, [pc, #132]	; (8002fac <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d002      	beq.n	8002f46 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d003      	beq.n	8002f4c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002f44:	e005      	b.n	8002f52 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002f46:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002f48:	613b      	str	r3, [r7, #16]
    break;
 8002f4a:	e005      	b.n	8002f58 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002f4c:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002f4e:	613b      	str	r3, [r7, #16]
    break;
 8002f50:	e002      	b.n	8002f58 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	613b      	str	r3, [r7, #16]
    break;
 8002f56:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f58:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	3301      	adds	r3, #1
 8002f64:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	fb02 f203 	mul.w	r2, r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	0e5b      	lsrs	r3, r3, #25
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f98:	683b      	ldr	r3, [r7, #0]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	08006c7c 	.word	0x08006c7c
 8002fb0:	00f42400 	.word	0x00f42400

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d03d      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d00b      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d804      	bhi.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00e      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d015      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002fe4:	e01d      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002fe6:	2b60      	cmp	r3, #96	; 0x60
 8002fe8:	d01e      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fea:	2b80      	cmp	r3, #128	; 0x80
 8002fec:	d01c      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fee:	e018      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ff0:	4b86      	ldr	r3, [pc, #536]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a85      	ldr	r2, [pc, #532]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ffc:	e015      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3304      	adds	r3, #4
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f000 fb5d 	bl	80036c4 <RCCEx_PLLSAI1_Config>
 800300a:	4603      	mov	r3, r0
 800300c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800300e:	e00c      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3320      	adds	r3, #32
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fc44 	bl	80038a4 <RCCEx_PLLSAI2_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003020:	e003      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	74fb      	strb	r3, [r7, #19]
      break;
 8003026:	e000      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800302a:	7cfb      	ldrb	r3, [r7, #19]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10b      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003030:	4b76      	ldr	r3, [pc, #472]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003032:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003036:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303e:	4973      	ldr	r1, [pc, #460]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003046:	e001      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003048:	7cfb      	ldrb	r3, [r7, #19]
 800304a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d042      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003060:	d00f      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003066:	d805      	bhi.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d011      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800306c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003070:	d017      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003072:	e01f      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003078:	d01f      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800307a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307e:	d01c      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003080:	e018      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003082:	4b62      	ldr	r3, [pc, #392]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	4a61      	ldr	r2, [pc, #388]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800308e:	e015      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fb14 	bl	80036c4 <RCCEx_PLLSAI1_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030a0:	e00c      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3320      	adds	r3, #32
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fbfb 	bl	80038a4 <RCCEx_PLLSAI2_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030b2:	e003      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	74fb      	strb	r3, [r7, #19]
      break;
 80030b8:	e000      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80030ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030c2:	4b52      	ldr	r3, [pc, #328]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d0:	494e      	ldr	r1, [pc, #312]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80030d8:	e001      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 809f 	beq.w	800322a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ec:	2300      	movs	r3, #0
 80030ee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030f0:	4b46      	ldr	r3, [pc, #280]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003100:	2300      	movs	r3, #0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00d      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	4a40      	ldr	r2, [pc, #256]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800310c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003110:	6593      	str	r3, [r2, #88]	; 0x58
 8003112:	4b3e      	ldr	r3, [pc, #248]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311e:	2301      	movs	r3, #1
 8003120:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003122:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a3a      	ldr	r2, [pc, #232]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800312e:	f7fe fced 	bl	8001b0c <HAL_GetTick>
 8003132:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003134:	e009      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fe fce9 	bl	8001b0c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d902      	bls.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	74fb      	strb	r3, [r7, #19]
        break;
 8003148:	e005      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800314a:	4b31      	ldr	r3, [pc, #196]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0ef      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003156:	7cfb      	ldrb	r3, [r7, #19]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d15b      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800315c:	4b2b      	ldr	r3, [pc, #172]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003166:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01f      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	429a      	cmp	r2, r3
 8003178:	d019      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800317a:	4b24      	ldr	r3, [pc, #144]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003184:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003186:	4b21      	ldr	r3, [pc, #132]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318c:	4a1f      	ldr	r2, [pc, #124]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800318e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003196:	4b1d      	ldr	r3, [pc, #116]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	4a1b      	ldr	r2, [pc, #108]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031a6:	4a19      	ldr	r2, [pc, #100]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d016      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe fca8 	bl	8001b0c <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031be:	e00b      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7fe fca4 	bl	8001b0c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d902      	bls.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	74fb      	strb	r3, [r7, #19]
            break;
 80031d6:	e006      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0ec      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10c      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031fc:	4903      	ldr	r1, [pc, #12]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003204:	e008      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003206:	7cfb      	ldrb	r3, [r7, #19]
 8003208:	74bb      	strb	r3, [r7, #18]
 800320a:	e005      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800320c:	40021000 	.word	0x40021000
 8003210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003214:	7cfb      	ldrb	r3, [r7, #19]
 8003216:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003218:	7c7b      	ldrb	r3, [r7, #17]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d105      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321e:	4ba0      	ldr	r3, [pc, #640]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	4a9f      	ldr	r2, [pc, #636]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003228:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003236:	4b9a      	ldr	r3, [pc, #616]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323c:	f023 0203 	bic.w	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003244:	4996      	ldr	r1, [pc, #600]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003258:	4b91      	ldr	r3, [pc, #580]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	f023 020c 	bic.w	r2, r3, #12
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	498e      	ldr	r1, [pc, #568]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800327a:	4b89      	ldr	r3, [pc, #548]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003288:	4985      	ldr	r1, [pc, #532]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800329c:	4b80      	ldr	r3, [pc, #512]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032aa:	497d      	ldr	r1, [pc, #500]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032be:	4b78      	ldr	r3, [pc, #480]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032cc:	4974      	ldr	r1, [pc, #464]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032e0:	4b6f      	ldr	r3, [pc, #444]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ee:	496c      	ldr	r1, [pc, #432]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003302:	4b67      	ldr	r3, [pc, #412]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003308:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003310:	4963      	ldr	r1, [pc, #396]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003324:	4b5e      	ldr	r3, [pc, #376]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003332:	495b      	ldr	r1, [pc, #364]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003346:	4b56      	ldr	r3, [pc, #344]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	4952      	ldr	r1, [pc, #328]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003368:	4b4d      	ldr	r3, [pc, #308]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	494a      	ldr	r1, [pc, #296]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800338a:	4b45      	ldr	r3, [pc, #276]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003398:	4941      	ldr	r1, [pc, #260]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033ac:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b2:	f023 0203 	bic.w	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ba:	4939      	ldr	r1, [pc, #228]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d028      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033ce:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033dc:	4930      	ldr	r1, [pc, #192]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ec:	d106      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ee:	4b2c      	ldr	r3, [pc, #176]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	4a2b      	ldr	r2, [pc, #172]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033f8:	60d3      	str	r3, [r2, #12]
 80033fa:	e011      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003404:	d10c      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3304      	adds	r3, #4
 800340a:	2101      	movs	r1, #1
 800340c:	4618      	mov	r0, r3
 800340e:	f000 f959 	bl	80036c4 <RCCEx_PLLSAI1_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003416:	7cfb      	ldrb	r3, [r7, #19]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d04d      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003434:	d108      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003436:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800343c:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003442:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003446:	e012      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003448:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800344e:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003454:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003458:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003466:	490e      	ldr	r1, [pc, #56]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003476:	d106      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003482:	60d3      	str	r3, [r2, #12]
 8003484:	e020      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800348a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800348e:	d109      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4a02      	ldr	r2, [pc, #8]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349a:	60d3      	str	r3, [r2, #12]
 800349c:	e014      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3304      	adds	r3, #4
 80034b2:	2101      	movs	r1, #1
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 f905 	bl	80036c4 <RCCEx_PLLSAI1_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d028      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034d4:	4b7a      	ldr	r3, [pc, #488]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034e2:	4977      	ldr	r1, [pc, #476]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f2:	d106      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034f4:	4b72      	ldr	r3, [pc, #456]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4a71      	ldr	r2, [pc, #452]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80034fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034fe:	60d3      	str	r3, [r2, #12]
 8003500:	e011      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003506:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800350a:	d10c      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
 8003510:	2101      	movs	r1, #1
 8003512:	4618      	mov	r0, r3
 8003514:	f000 f8d6 	bl	80036c4 <RCCEx_PLLSAI1_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003522:	7cfb      	ldrb	r3, [r7, #19]
 8003524:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01e      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003532:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003542:	495f      	ldr	r1, [pc, #380]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003550:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003554:	d10c      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3304      	adds	r3, #4
 800355a:	2102      	movs	r1, #2
 800355c:	4618      	mov	r0, r3
 800355e:	f000 f8b1 	bl	80036c4 <RCCEx_PLLSAI1_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003566:	7cfb      	ldrb	r3, [r7, #19]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00b      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800357c:	4b50      	ldr	r3, [pc, #320]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800357e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003582:	f023 0204 	bic.w	r2, r3, #4
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800358c:	494c      	ldr	r1, [pc, #304]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00b      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80035a0:	4b47      	ldr	r3, [pc, #284]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80035a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035a6:	f023 0218 	bic.w	r2, r3, #24
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	4943      	ldr	r1, [pc, #268]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d035      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035c4:	4b3e      	ldr	r3, [pc, #248]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a3d      	ldr	r2, [pc, #244]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80035ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d0:	f7fe fa9c 	bl	8001b0c <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035d6:	e009      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035d8:	f7fe fa98 	bl	8001b0c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d902      	bls.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	74fb      	strb	r3, [r7, #19]
        break;
 80035ea:	e005      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035ec:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1ef      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 80035f8:	7cfb      	ldrb	r3, [r7, #19]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d113      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80035fe:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003600:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003604:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800360e:	492c      	ldr	r1, [pc, #176]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3320      	adds	r3, #32
 800361a:	2102      	movs	r1, #2
 800361c:	4618      	mov	r0, r3
 800361e:	f000 f941 	bl	80038a4 <RCCEx_PLLSAI2_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003626:	7cfb      	ldrb	r3, [r7, #19]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 800362c:	7cfb      	ldrb	r3, [r7, #19]
 800362e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01e      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800363c:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800363e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364c:	491c      	ldr	r1, [pc, #112]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365e:	d10c      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3320      	adds	r3, #32
 8003664:	2101      	movs	r1, #1
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f91c 	bl	80038a4 <RCCEx_PLLSAI2_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      {
        /* set overall return value */
        status = ret;
 8003676:	7cfb      	ldrb	r3, [r7, #19]
 8003678:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d017      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003686:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003688:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800368c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003696:	490a      	ldr	r1, [pc, #40]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036a8:	d105      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80036b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036b4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000

080036c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036d2:	4b70      	ldr	r3, [pc, #448]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00e      	beq.n	80036fc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036de:	4b6d      	ldr	r3, [pc, #436]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0203 	and.w	r2, r3, #3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d103      	bne.n	80036f6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
       ||
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d13f      	bne.n	8003776 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	73fb      	strb	r3, [r7, #15]
 80036fa:	e03c      	b.n	8003776 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d00c      	beq.n	800371e <RCCEx_PLLSAI1_Config+0x5a>
 8003704:	2b03      	cmp	r3, #3
 8003706:	d013      	beq.n	8003730 <RCCEx_PLLSAI1_Config+0x6c>
 8003708:	2b01      	cmp	r3, #1
 800370a:	d120      	bne.n	800374e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800370c:	4b61      	ldr	r3, [pc, #388]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d11d      	bne.n	8003754 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800371c:	e01a      	b.n	8003754 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800371e:	4b5d      	ldr	r3, [pc, #372]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003726:	2b00      	cmp	r3, #0
 8003728:	d116      	bne.n	8003758 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372e:	e013      	b.n	8003758 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003730:	4b58      	ldr	r3, [pc, #352]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10f      	bne.n	800375c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800373c:	4b55      	ldr	r3, [pc, #340]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800374c:	e006      	b.n	800375c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
      break;
 8003752:	e004      	b.n	800375e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003754:	bf00      	nop
 8003756:	e002      	b.n	800375e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003758:	bf00      	nop
 800375a:	e000      	b.n	800375e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800375c:	bf00      	nop
    }

    if(status == HAL_OK)
 800375e:	7bfb      	ldrb	r3, [r7, #15]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d108      	bne.n	8003776 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003764:	4b4b      	ldr	r3, [pc, #300]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f023 0203 	bic.w	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4948      	ldr	r1, [pc, #288]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003772:	4313      	orrs	r3, r2
 8003774:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	2b00      	cmp	r3, #0
 800377a:	f040 8086 	bne.w	800388a <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800377e:	4b45      	ldr	r3, [pc, #276]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a44      	ldr	r2, [pc, #272]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003784:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378a:	f7fe f9bf 	bl	8001b0c <HAL_GetTick>
 800378e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003790:	e009      	b.n	80037a6 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003792:	f7fe f9bb 	bl	8001b0c <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d902      	bls.n	80037a6 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	73fb      	strb	r3, [r7, #15]
        break;
 80037a4:	e005      	b.n	80037b2 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037a6:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1ef      	bne.n	8003792 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d168      	bne.n	800388a <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d113      	bne.n	80037e6 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037be:	4b35      	ldr	r3, [pc, #212]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	4b35      	ldr	r3, [pc, #212]	; (8003898 <RCCEx_PLLSAI1_Config+0x1d4>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6892      	ldr	r2, [r2, #8]
 80037ca:	0211      	lsls	r1, r2, #8
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	68d2      	ldr	r2, [r2, #12]
 80037d0:	06d2      	lsls	r2, r2, #27
 80037d2:	4311      	orrs	r1, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6852      	ldr	r2, [r2, #4]
 80037d8:	3a01      	subs	r2, #1
 80037da:	0112      	lsls	r2, r2, #4
 80037dc:	430a      	orrs	r2, r1
 80037de:	492d      	ldr	r1, [pc, #180]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	610b      	str	r3, [r1, #16]
 80037e4:	e02d      	b.n	8003842 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d115      	bne.n	8003818 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ec:	4b29      	ldr	r3, [pc, #164]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	4b2a      	ldr	r3, [pc, #168]	; (800389c <RCCEx_PLLSAI1_Config+0x1d8>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6892      	ldr	r2, [r2, #8]
 80037f8:	0211      	lsls	r1, r2, #8
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6912      	ldr	r2, [r2, #16]
 80037fe:	0852      	lsrs	r2, r2, #1
 8003800:	3a01      	subs	r2, #1
 8003802:	0552      	lsls	r2, r2, #21
 8003804:	4311      	orrs	r1, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6852      	ldr	r2, [r2, #4]
 800380a:	3a01      	subs	r2, #1
 800380c:	0112      	lsls	r2, r2, #4
 800380e:	430a      	orrs	r2, r1
 8003810:	4920      	ldr	r1, [pc, #128]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003812:	4313      	orrs	r3, r2
 8003814:	610b      	str	r3, [r1, #16]
 8003816:	e014      	b.n	8003842 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003818:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800381e:	4013      	ands	r3, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6892      	ldr	r2, [r2, #8]
 8003824:	0211      	lsls	r1, r2, #8
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6952      	ldr	r2, [r2, #20]
 800382a:	0852      	lsrs	r2, r2, #1
 800382c:	3a01      	subs	r2, #1
 800382e:	0652      	lsls	r2, r2, #25
 8003830:	4311      	orrs	r1, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6852      	ldr	r2, [r2, #4]
 8003836:	3a01      	subs	r2, #1
 8003838:	0112      	lsls	r2, r2, #4
 800383a:	430a      	orrs	r2, r1
 800383c:	4915      	ldr	r1, [pc, #84]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 800383e:	4313      	orrs	r3, r2
 8003840:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003842:	4b14      	ldr	r3, [pc, #80]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a13      	ldr	r2, [pc, #76]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800384c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384e:	f7fe f95d 	bl	8001b0c <HAL_GetTick>
 8003852:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003854:	e009      	b.n	800386a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003856:	f7fe f959 	bl	8001b0c <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d902      	bls.n	800386a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	73fb      	strb	r3, [r7, #15]
          break;
 8003868:	e005      	b.n	8003876 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0ef      	beq.n	8003856 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	4903      	ldr	r1, [pc, #12]	; (8003894 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003886:	4313      	orrs	r3, r2
 8003888:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40021000 	.word	0x40021000
 8003898:	07ff800f 	.word	0x07ff800f
 800389c:	ff9f800f 	.word	0xff9f800f
 80038a0:	f9ff800f 	.word	0xf9ff800f

080038a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038b2:	4b70      	ldr	r3, [pc, #448]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00e      	beq.n	80038dc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038be:	4b6d      	ldr	r3, [pc, #436]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0203 	and.w	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d103      	bne.n	80038d6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
       ||
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d13f      	bne.n	8003956 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
 80038da:	e03c      	b.n	8003956 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d00c      	beq.n	80038fe <RCCEx_PLLSAI2_Config+0x5a>
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d013      	beq.n	8003910 <RCCEx_PLLSAI2_Config+0x6c>
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d120      	bne.n	800392e <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ec:	4b61      	ldr	r3, [pc, #388]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d11d      	bne.n	8003934 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fc:	e01a      	b.n	8003934 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038fe:	4b5d      	ldr	r3, [pc, #372]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003906:	2b00      	cmp	r3, #0
 8003908:	d116      	bne.n	8003938 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800390e:	e013      	b.n	8003938 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003910:	4b58      	ldr	r3, [pc, #352]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10f      	bne.n	800393c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800391c:	4b55      	ldr	r3, [pc, #340]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d109      	bne.n	800393c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800392c:	e006      	b.n	800393c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
      break;
 8003932:	e004      	b.n	800393e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003934:	bf00      	nop
 8003936:	e002      	b.n	800393e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003938:	bf00      	nop
 800393a:	e000      	b.n	800393e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800393c:	bf00      	nop
    }

    if(status == HAL_OK)
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d108      	bne.n	8003956 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003944:	4b4b      	ldr	r3, [pc, #300]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f023 0203 	bic.w	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4948      	ldr	r1, [pc, #288]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003952:	4313      	orrs	r3, r2
 8003954:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b00      	cmp	r3, #0
 800395a:	f040 8086 	bne.w	8003a6a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800395e:	4b45      	ldr	r3, [pc, #276]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a44      	ldr	r2, [pc, #272]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800396a:	f7fe f8cf 	bl	8001b0c <HAL_GetTick>
 800396e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003970:	e009      	b.n	8003986 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003972:	f7fe f8cb 	bl	8001b0c <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d902      	bls.n	8003986 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	73fb      	strb	r3, [r7, #15]
        break;
 8003984:	e005      	b.n	8003992 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003986:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1ef      	bne.n	8003972 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d168      	bne.n	8003a6a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d113      	bne.n	80039c6 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800399e:	4b35      	ldr	r3, [pc, #212]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	4b35      	ldr	r3, [pc, #212]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1d4>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6892      	ldr	r2, [r2, #8]
 80039aa:	0211      	lsls	r1, r2, #8
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	68d2      	ldr	r2, [r2, #12]
 80039b0:	06d2      	lsls	r2, r2, #27
 80039b2:	4311      	orrs	r1, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6852      	ldr	r2, [r2, #4]
 80039b8:	3a01      	subs	r2, #1
 80039ba:	0112      	lsls	r2, r2, #4
 80039bc:	430a      	orrs	r2, r1
 80039be:	492d      	ldr	r1, [pc, #180]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	614b      	str	r3, [r1, #20]
 80039c4:	e02d      	b.n	8003a22 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d115      	bne.n	80039f8 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039cc:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6892      	ldr	r2, [r2, #8]
 80039d8:	0211      	lsls	r1, r2, #8
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6912      	ldr	r2, [r2, #16]
 80039de:	0852      	lsrs	r2, r2, #1
 80039e0:	3a01      	subs	r2, #1
 80039e2:	0552      	lsls	r2, r2, #21
 80039e4:	4311      	orrs	r1, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6852      	ldr	r2, [r2, #4]
 80039ea:	3a01      	subs	r2, #1
 80039ec:	0112      	lsls	r2, r2, #4
 80039ee:	430a      	orrs	r2, r1
 80039f0:	4920      	ldr	r1, [pc, #128]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	614b      	str	r3, [r1, #20]
 80039f6:	e014      	b.n	8003a22 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039f8:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <RCCEx_PLLSAI2_Config+0x1dc>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6892      	ldr	r2, [r2, #8]
 8003a04:	0211      	lsls	r1, r2, #8
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6952      	ldr	r2, [r2, #20]
 8003a0a:	0852      	lsrs	r2, r2, #1
 8003a0c:	3a01      	subs	r2, #1
 8003a0e:	0652      	lsls	r2, r2, #25
 8003a10:	4311      	orrs	r1, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6852      	ldr	r2, [r2, #4]
 8003a16:	3a01      	subs	r2, #1
 8003a18:	0112      	lsls	r2, r2, #4
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	4915      	ldr	r1, [pc, #84]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a13      	ldr	r2, [pc, #76]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2e:	f7fe f86d 	bl	8001b0c <HAL_GetTick>
 8003a32:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a34:	e009      	b.n	8003a4a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a36:	f7fe f869 	bl	8001b0c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d902      	bls.n	8003a4a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	73fb      	strb	r3, [r7, #15]
          break;
 8003a48:	e005      	b.n	8003a56 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0ef      	beq.n	8003a36 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d106      	bne.n	8003a6a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	4903      	ldr	r1, [pc, #12]	; (8003a74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	07ff800f 	.word	0x07ff800f
 8003a7c:	ff9f800f 	.word	0xff9f800f
 8003a80:	f9ff800f 	.word	0xf9ff800f

08003a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e07c      	b.n	8003b90 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7fd fe87 	bl	80017c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003acc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ad6:	d902      	bls.n	8003ade <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	e002      	b.n	8003ae4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ae2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003aec:	d007      	beq.n	8003afe <HAL_SPI_Init+0x7a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003af6:	d002      	beq.n	8003afe <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10b      	bne.n	8003b1e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b0e:	d903      	bls.n	8003b18 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30
 8003b16:	e002      	b.n	8003b1e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	ea42 0103 	orr.w	r1, r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	f003 0204 	and.w	r2, r3, #4
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	ea42 0103 	orr.w	r1, r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_SPI_Transmit+0x22>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e150      	b.n	8003e5c <HAL_SPI_Transmit+0x2c4>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bc2:	f7fd ffa3 	bl	8001b0c <HAL_GetTick>
 8003bc6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d002      	beq.n	8003bde <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bdc:	e135      	b.n	8003e4a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_SPI_Transmit+0x52>
 8003be4:	88fb      	ldrh	r3, [r7, #6]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bee:	e12c      	b.n	8003e4a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	88fa      	ldrh	r2, [r7, #6]
 8003c08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	88fa      	ldrh	r2, [r7, #6]
 8003c0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c3a:	d107      	bne.n	8003c4c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	d007      	beq.n	8003c6a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c72:	d94b      	bls.n	8003d0c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_SPI_Transmit+0xea>
 8003c7c:	8afb      	ldrh	r3, [r7, #22]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d13e      	bne.n	8003d00 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	881a      	ldrh	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	1c9a      	adds	r2, r3, #2
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ca6:	e02b      	b.n	8003d00 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d112      	bne.n	8003cdc <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	881a      	ldrh	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	1c9a      	adds	r2, r3, #2
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cda:	e011      	b.n	8003d00 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cdc:	f7fd ff16 	bl	8001b0c <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d803      	bhi.n	8003cf4 <HAL_SPI_Transmit+0x15c>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf2:	d102      	bne.n	8003cfa <HAL_SPI_Transmit+0x162>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cfe:	e0a4      	b.n	8003e4a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1ce      	bne.n	8003ca8 <HAL_SPI_Transmit+0x110>
 8003d0a:	e07c      	b.n	8003e06 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_SPI_Transmit+0x182>
 8003d14:	8afb      	ldrh	r3, [r7, #22]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d170      	bne.n	8003dfc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d912      	bls.n	8003d4a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	881a      	ldrh	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	1c9a      	adds	r2, r3, #2
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b02      	subs	r3, #2
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d48:	e058      	b.n	8003dfc <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	7812      	ldrb	r2, [r2, #0]
 8003d56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d70:	e044      	b.n	8003dfc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d12b      	bne.n	8003dd8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d912      	bls.n	8003db0 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	881a      	ldrh	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	1c9a      	adds	r2, r3, #2
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b02      	subs	r3, #2
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dae:	e025      	b.n	8003dfc <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	7812      	ldrb	r2, [r2, #0]
 8003dbc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dd6:	e011      	b.n	8003dfc <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dd8:	f7fd fe98 	bl	8001b0c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d803      	bhi.n	8003df0 <HAL_SPI_Transmit+0x258>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d102      	bne.n	8003df6 <HAL_SPI_Transmit+0x25e>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d102      	bne.n	8003dfc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003dfa:	e026      	b.n	8003e4a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1b5      	bne.n	8003d72 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	6839      	ldr	r1, [r7, #0]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fc94 	bl	8004738 <SPI_EndRxTxTransaction>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	77fb      	strb	r3, [r7, #31]
 8003e46:	e000      	b.n	8003e4a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003e48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3720      	adds	r7, #32
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	4613      	mov	r3, r2
 8003e72:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e80:	d112      	bne.n	8003ea8 <HAL_SPI_Receive+0x44>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10e      	bne.n	8003ea8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e92:	88fa      	ldrh	r2, [r7, #6]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f908 	bl	80040b4 <HAL_SPI_TransmitReceive>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	e101      	b.n	80040ac <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_SPI_Receive+0x52>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e0fa      	b.n	80040ac <HAL_SPI_Receive+0x248>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ebe:	f7fd fe25 	bl	8001b0c <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d002      	beq.n	8003ed6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ed4:	e0e1      	b.n	800409a <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <HAL_SPI_Receive+0x7e>
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ee6:	e0d8      	b.n	800409a <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2204      	movs	r2, #4
 8003eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	88fa      	ldrh	r2, [r7, #6]
 8003f00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	88fa      	ldrh	r2, [r7, #6]
 8003f08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f32:	d908      	bls.n	8003f46 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f42:	605a      	str	r2, [r3, #4]
 8003f44:	e007      	b.n	8003f56 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f54:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5e:	d107      	bne.n	8003f70 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f6e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	2b40      	cmp	r3, #64	; 0x40
 8003f7c:	d007      	beq.n	8003f8e <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f8c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f96:	d867      	bhi.n	8004068 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f98:	e030      	b.n	8003ffc <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d117      	bne.n	8003fd8 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f103 020c 	add.w	r2, r3, #12
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	7812      	ldrb	r2, [r2, #0]
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003fd6:	e011      	b.n	8003ffc <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fd8:	f7fd fd98 	bl	8001b0c <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d803      	bhi.n	8003ff0 <HAL_SPI_Receive+0x18c>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fee:	d102      	bne.n	8003ff6 <HAL_SPI_Receive+0x192>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ffa:	e04e      	b.n	800409a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1c8      	bne.n	8003f9a <HAL_SPI_Receive+0x136>
 8004008:	e034      	b.n	8004074 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b01      	cmp	r3, #1
 8004016:	d115      	bne.n	8004044 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	b292      	uxth	r2, r2
 8004024:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	1c9a      	adds	r2, r3, #2
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004042:	e011      	b.n	8004068 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004044:	f7fd fd62 	bl	8001b0c <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d803      	bhi.n	800405c <HAL_SPI_Receive+0x1f8>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405a:	d102      	bne.n	8004062 <HAL_SPI_Receive+0x1fe>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004066:	e018      	b.n	800409a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1ca      	bne.n	800400a <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	6839      	ldr	r1, [r7, #0]
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 fb05 	bl	8004688 <SPI_EndRxTransaction>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	75fb      	strb	r3, [r7, #23]
 8004096:	e000      	b.n	800409a <HAL_SPI_Receive+0x236>
  }

error :
 8004098:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	; 0x28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040c2:	2301      	movs	r3, #1
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_SPI_TransmitReceive+0x26>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e1fb      	b.n	80044d2 <HAL_SPI_TransmitReceive+0x41e>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040e2:	f7fd fd13 	bl	8001b0c <HAL_GetTick>
 80040e6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040ee:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80040f6:	887b      	ldrh	r3, [r7, #2]
 80040f8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80040fa:	887b      	ldrh	r3, [r7, #2]
 80040fc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040fe:	7efb      	ldrb	r3, [r7, #27]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d00e      	beq.n	8004122 <HAL_SPI_TransmitReceive+0x6e>
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800410a:	d106      	bne.n	800411a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <HAL_SPI_TransmitReceive+0x66>
 8004114:	7efb      	ldrb	r3, [r7, #27]
 8004116:	2b04      	cmp	r3, #4
 8004118:	d003      	beq.n	8004122 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800411a:	2302      	movs	r3, #2
 800411c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004120:	e1cd      	b.n	80044be <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_SPI_TransmitReceive+0x80>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_SPI_TransmitReceive+0x80>
 800412e:	887b      	ldrh	r3, [r7, #2]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d103      	bne.n	800413c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800413a:	e1c0      	b.n	80044be <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b04      	cmp	r3, #4
 8004146:	d003      	beq.n	8004150 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2205      	movs	r2, #5
 800414c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	887a      	ldrh	r2, [r7, #2]
 8004160:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	887a      	ldrh	r2, [r7, #2]
 8004168:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	887a      	ldrh	r2, [r7, #2]
 8004176:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	887a      	ldrh	r2, [r7, #2]
 800417c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004192:	d802      	bhi.n	800419a <HAL_SPI_TransmitReceive+0xe6>
 8004194:	8a3b      	ldrh	r3, [r7, #16]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d908      	bls.n	80041ac <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	e007      	b.n	80041bc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041ba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c6:	2b40      	cmp	r3, #64	; 0x40
 80041c8:	d007      	beq.n	80041da <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041e2:	d97c      	bls.n	80042de <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <HAL_SPI_TransmitReceive+0x13e>
 80041ec:	8a7b      	ldrh	r3, [r7, #18]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d169      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	881a      	ldrh	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	1c9a      	adds	r2, r3, #2
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004216:	e056      	b.n	80042c6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b02      	cmp	r3, #2
 8004224:	d11b      	bne.n	800425e <HAL_SPI_TransmitReceive+0x1aa>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d016      	beq.n	800425e <HAL_SPI_TransmitReceive+0x1aa>
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	2b01      	cmp	r3, #1
 8004234:	d113      	bne.n	800425e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	881a      	ldrh	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	1c9a      	adds	r2, r3, #2
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b01      	cmp	r3, #1
 800426a:	d11c      	bne.n	80042a6 <HAL_SPI_TransmitReceive+0x1f2>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d016      	beq.n	80042a6 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	b292      	uxth	r2, r2
 8004284:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	1c9a      	adds	r2, r3, #2
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042a2:	2301      	movs	r3, #1
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042a6:	f7fd fc31 	bl	8001b0c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d807      	bhi.n	80042c6 <HAL_SPI_TransmitReceive+0x212>
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042bc:	d003      	beq.n	80042c6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80042c4:	e0fb      	b.n	80044be <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1a3      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x164>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d19d      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x164>
 80042dc:	e0df      	b.n	800449e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_SPI_TransmitReceive+0x23a>
 80042e6:	8a7b      	ldrh	r3, [r7, #18]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	f040 80cb 	bne.w	8004484 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d912      	bls.n	800431e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	881a      	ldrh	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	1c9a      	adds	r2, r3, #2
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b02      	subs	r3, #2
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800431c:	e0b2      	b.n	8004484 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	330c      	adds	r3, #12
 8004328:	7812      	ldrb	r2, [r2, #0]
 800432a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004344:	e09e      	b.n	8004484 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b02      	cmp	r3, #2
 8004352:	d134      	bne.n	80043be <HAL_SPI_TransmitReceive+0x30a>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d02f      	beq.n	80043be <HAL_SPI_TransmitReceive+0x30a>
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	2b01      	cmp	r3, #1
 8004362:	d12c      	bne.n	80043be <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b01      	cmp	r3, #1
 800436c:	d912      	bls.n	8004394 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	881a      	ldrh	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	1c9a      	adds	r2, r3, #2
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b02      	subs	r3, #2
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004392:	e012      	b.n	80043ba <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	330c      	adds	r3, #12
 800439e:	7812      	ldrb	r2, [r2, #0]
 80043a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d148      	bne.n	800445e <HAL_SPI_TransmitReceive+0x3aa>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d042      	beq.n	800445e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d923      	bls.n	800442c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	b292      	uxth	r2, r2
 80043f0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	1c9a      	adds	r2, r3, #2
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b02      	subs	r3, #2
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d81f      	bhi.n	800445a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	e016      	b.n	800445a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f103 020c 	add.w	r2, r3, #12
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	7812      	ldrb	r2, [r2, #0]
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800445a:	2301      	movs	r3, #1
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800445e:	f7fd fb55 	bl	8001b0c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446a:	429a      	cmp	r2, r3
 800446c:	d803      	bhi.n	8004476 <HAL_SPI_TransmitReceive+0x3c2>
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d102      	bne.n	800447c <HAL_SPI_TransmitReceive+0x3c8>
 8004476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004478:	2b00      	cmp	r3, #0
 800447a:	d103      	bne.n	8004484 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004482:	e01c      	b.n	80044be <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	f47f af5b 	bne.w	8004346 <HAL_SPI_TransmitReceive+0x292>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	f47f af54 	bne.w	8004346 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f948 	bl	8004738 <SPI_EndRxTxTransaction>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d006      	beq.n	80044bc <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	661a      	str	r2, [r3, #96]	; 0x60
 80044ba:	e000      	b.n	80044be <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80044bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3728      	adds	r7, #40	; 0x28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b084      	sub	sp, #16
 80044de:	af00      	add	r7, sp, #0
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	603b      	str	r3, [r7, #0]
 80044e6:	4613      	mov	r3, r2
 80044e8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ea:	e04c      	b.n	8004586 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f2:	d048      	beq.n	8004586 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80044f4:	f7fd fb0a 	bl	8001b0c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d902      	bls.n	800450a <SPI_WaitFlagStateUntilTimeout+0x30>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d13d      	bne.n	8004586 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004518:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004522:	d111      	bne.n	8004548 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452c:	d004      	beq.n	8004538 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004536:	d107      	bne.n	8004548 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004546:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004550:	d10f      	bne.n	8004572 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004570:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e00f      	b.n	80045a6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4013      	ands	r3, r2
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	429a      	cmp	r2, r3
 8004594:	bf0c      	ite	eq
 8004596:	2301      	moveq	r3, #1
 8004598:	2300      	movne	r3, #0
 800459a:	b2db      	uxtb	r3, r3
 800459c:	461a      	mov	r2, r3
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d1a3      	bne.n	80044ec <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80045bc:	e057      	b.n	800466e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80045c4:	d106      	bne.n	80045d4 <SPI_WaitFifoStateUntilTimeout+0x26>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d103      	bne.n	80045d4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	330c      	adds	r3, #12
 80045d2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045da:	d048      	beq.n	800466e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80045dc:	f7fd fa96 	bl	8001b0c <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d902      	bls.n	80045f2 <SPI_WaitFifoStateUntilTimeout+0x44>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d13d      	bne.n	800466e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004600:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800460a:	d111      	bne.n	8004630 <SPI_WaitFifoStateUntilTimeout+0x82>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004614:	d004      	beq.n	8004620 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461e:	d107      	bne.n	8004630 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800462e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004638:	d10f      	bne.n	800465a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004658:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e008      	b.n	8004680 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4013      	ands	r3, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	429a      	cmp	r2, r3
 800467c:	d19f      	bne.n	80045be <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800469c:	d111      	bne.n	80046c2 <SPI_EndRxTransaction+0x3a>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a6:	d004      	beq.n	80046b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b0:	d107      	bne.n	80046c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2200      	movs	r2, #0
 80046ca:	2180      	movs	r1, #128	; 0x80
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f7ff ff04 	bl	80044da <SPI_WaitFlagStateUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046dc:	f043 0220 	orr.w	r2, r3, #32
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e023      	b.n	8004730 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046f0:	d11d      	bne.n	800472e <SPI_EndRxTransaction+0xa6>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fa:	d004      	beq.n	8004706 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004704:	d113      	bne.n	800472e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2200      	movs	r2, #0
 800470e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff ff4b 	bl	80045ae <SPI_WaitFifoStateUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d007      	beq.n	800472e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004722:	f043 0220 	orr.w	r2, r3, #32
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e000      	b.n	8004730 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2200      	movs	r2, #0
 800474c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f7ff ff2c 	bl	80045ae <SPI_WaitFifoStateUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004760:	f043 0220 	orr.w	r2, r3, #32
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e027      	b.n	80047bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2200      	movs	r2, #0
 8004774:	2180      	movs	r1, #128	; 0x80
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f7ff feaf 	bl	80044da <SPI_WaitFlagStateUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d007      	beq.n	8004792 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004786:	f043 0220 	orr.w	r2, r3, #32
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e014      	b.n	80047bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2200      	movs	r2, #0
 800479a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f7ff ff05 	bl	80045ae <SPI_WaitFifoStateUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ae:	f043 0220 	orr.w	r2, r3, #32
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e000      	b.n	80047bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e042      	b.n	800485c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d106      	bne.n	80047ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fd f82f 	bl	800184c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2224      	movs	r2, #36	; 0x24
 80047f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0201 	bic.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f8c6 	bl	8004998 <UART_SetConfig>
 800480c:	4603      	mov	r3, r0
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e022      	b.n	800485c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f001 faa8 	bl	8005d74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004842:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0201 	orr.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f001 fb2f 	bl	8005eb8 <UART_CheckIdleState>
 800485a:	4603      	mov	r3, r0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	; 0x28
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	4613      	mov	r3, r2
 8004872:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800487a:	2b20      	cmp	r3, #32
 800487c:	f040 8084 	bne.w	8004988 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_UART_Transmit+0x28>
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e07c      	b.n	800498a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_UART_Transmit+0x3a>
 800489a:	2302      	movs	r3, #2
 800489c:	e075      	b.n	800498a <HAL_UART_Transmit+0x126>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2221      	movs	r2, #33	; 0x21
 80048b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80048b6:	f7fd f929 	bl	8001b0c <HAL_GetTick>
 80048ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	88fa      	ldrh	r2, [r7, #6]
 80048c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	88fa      	ldrh	r2, [r7, #6]
 80048c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d4:	d108      	bne.n	80048e8 <HAL_UART_Transmit+0x84>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d104      	bne.n	80048e8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	e003      	b.n	80048f0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80048f8:	e02d      	b.n	8004956 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2200      	movs	r2, #0
 8004902:	2180      	movs	r1, #128	; 0x80
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f001 fb1f 	bl	8005f48 <UART_WaitOnFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e03a      	b.n	800498a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	881a      	ldrh	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004926:	b292      	uxth	r2, r2
 8004928:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	3302      	adds	r3, #2
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	e008      	b.n	8004944 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	781a      	ldrb	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	b292      	uxth	r2, r2
 800493c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	3301      	adds	r3, #1
 8004942:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1cb      	bne.n	80048fa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2200      	movs	r2, #0
 800496a:	2140      	movs	r1, #64	; 0x40
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f001 faeb 	bl	8005f48 <UART_WaitOnFlagUntilTimeout>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e006      	b.n	800498a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	e000      	b.n	800498a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004988:	2302      	movs	r3, #2
  }
}
 800498a:	4618      	mov	r0, r3
 800498c:	3720      	adds	r7, #32
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	0000      	movs	r0, r0
 8004994:	0000      	movs	r0, r0
	...

08004998 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004998:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800499c:	b08a      	sub	sp, #40	; 0x28
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049cc:	4313      	orrs	r3, r2
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4baa      	ldr	r3, [pc, #680]	; (8004c80 <UART_SetConfig+0x2e8>)
 80049d8:	4013      	ands	r3, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049e0:	430b      	orrs	r3, r1
 80049e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a9f      	ldr	r2, [pc, #636]	; (8004c84 <UART_SetConfig+0x2ec>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a10:	4313      	orrs	r3, r2
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004a1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6812      	ldr	r2, [r2, #0]
 8004a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a32:	f023 010f 	bic.w	r1, r3, #15
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a90      	ldr	r2, [pc, #576]	; (8004c88 <UART_SetConfig+0x2f0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d126      	bne.n	8004a9a <UART_SetConfig+0x102>
 8004a4c:	4b8f      	ldr	r3, [pc, #572]	; (8004c8c <UART_SetConfig+0x2f4>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d81a      	bhi.n	8004a90 <UART_SetConfig+0xf8>
 8004a5a:	a201      	add	r2, pc, #4	; (adr r2, 8004a60 <UART_SetConfig+0xc8>)
 8004a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a60:	08004a71 	.word	0x08004a71
 8004a64:	08004a81 	.word	0x08004a81
 8004a68:	08004a79 	.word	0x08004a79
 8004a6c:	08004a89 	.word	0x08004a89
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a76:	e116      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7e:	e112      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004a80:	2304      	movs	r3, #4
 8004a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a86:	e10e      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004a88:	2308      	movs	r3, #8
 8004a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8e:	e10a      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004a90:	2310      	movs	r3, #16
 8004a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a96:	bf00      	nop
 8004a98:	e105      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a7c      	ldr	r2, [pc, #496]	; (8004c90 <UART_SetConfig+0x2f8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d138      	bne.n	8004b16 <UART_SetConfig+0x17e>
 8004aa4:	4b79      	ldr	r3, [pc, #484]	; (8004c8c <UART_SetConfig+0x2f4>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	2b0c      	cmp	r3, #12
 8004ab0:	d82c      	bhi.n	8004b0c <UART_SetConfig+0x174>
 8004ab2:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <UART_SetConfig+0x120>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004aed 	.word	0x08004aed
 8004abc:	08004b0d 	.word	0x08004b0d
 8004ac0:	08004b0d 	.word	0x08004b0d
 8004ac4:	08004b0d 	.word	0x08004b0d
 8004ac8:	08004afd 	.word	0x08004afd
 8004acc:	08004b0d 	.word	0x08004b0d
 8004ad0:	08004b0d 	.word	0x08004b0d
 8004ad4:	08004b0d 	.word	0x08004b0d
 8004ad8:	08004af5 	.word	0x08004af5
 8004adc:	08004b0d 	.word	0x08004b0d
 8004ae0:	08004b0d 	.word	0x08004b0d
 8004ae4:	08004b0d 	.word	0x08004b0d
 8004ae8:	08004b05 	.word	0x08004b05
 8004aec:	2300      	movs	r3, #0
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af2:	e0d8      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004af4:	2302      	movs	r3, #2
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afa:	e0d4      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004afc:	2304      	movs	r3, #4
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b02:	e0d0      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004b04:	2308      	movs	r3, #8
 8004b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0a:	e0cc      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b12:	bf00      	nop
 8004b14:	e0c7      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a5e      	ldr	r2, [pc, #376]	; (8004c94 <UART_SetConfig+0x2fc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d125      	bne.n	8004b6c <UART_SetConfig+0x1d4>
 8004b20:	4b5a      	ldr	r3, [pc, #360]	; (8004c8c <UART_SetConfig+0x2f4>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b2a:	2b10      	cmp	r3, #16
 8004b2c:	d011      	beq.n	8004b52 <UART_SetConfig+0x1ba>
 8004b2e:	2b10      	cmp	r3, #16
 8004b30:	d802      	bhi.n	8004b38 <UART_SetConfig+0x1a0>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d005      	beq.n	8004b42 <UART_SetConfig+0x1aa>
 8004b36:	e014      	b.n	8004b62 <UART_SetConfig+0x1ca>
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d006      	beq.n	8004b4a <UART_SetConfig+0x1b2>
 8004b3c:	2b30      	cmp	r3, #48	; 0x30
 8004b3e:	d00c      	beq.n	8004b5a <UART_SetConfig+0x1c2>
 8004b40:	e00f      	b.n	8004b62 <UART_SetConfig+0x1ca>
 8004b42:	2300      	movs	r3, #0
 8004b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b48:	e0ad      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b50:	e0a9      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004b52:	2304      	movs	r3, #4
 8004b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b58:	e0a5      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b60:	e0a1      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004b62:	2310      	movs	r3, #16
 8004b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b68:	bf00      	nop
 8004b6a:	e09c      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a49      	ldr	r2, [pc, #292]	; (8004c98 <UART_SetConfig+0x300>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d125      	bne.n	8004bc2 <UART_SetConfig+0x22a>
 8004b76:	4b45      	ldr	r3, [pc, #276]	; (8004c8c <UART_SetConfig+0x2f4>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b80:	2b40      	cmp	r3, #64	; 0x40
 8004b82:	d011      	beq.n	8004ba8 <UART_SetConfig+0x210>
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d802      	bhi.n	8004b8e <UART_SetConfig+0x1f6>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <UART_SetConfig+0x200>
 8004b8c:	e014      	b.n	8004bb8 <UART_SetConfig+0x220>
 8004b8e:	2b80      	cmp	r3, #128	; 0x80
 8004b90:	d006      	beq.n	8004ba0 <UART_SetConfig+0x208>
 8004b92:	2bc0      	cmp	r3, #192	; 0xc0
 8004b94:	d00c      	beq.n	8004bb0 <UART_SetConfig+0x218>
 8004b96:	e00f      	b.n	8004bb8 <UART_SetConfig+0x220>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9e:	e082      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba6:	e07e      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bae:	e07a      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004bb0:	2308      	movs	r3, #8
 8004bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb6:	e076      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004bb8:	2310      	movs	r3, #16
 8004bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bbe:	bf00      	nop
 8004bc0:	e071      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a35      	ldr	r2, [pc, #212]	; (8004c9c <UART_SetConfig+0x304>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d129      	bne.n	8004c20 <UART_SetConfig+0x288>
 8004bcc:	4b2f      	ldr	r3, [pc, #188]	; (8004c8c <UART_SetConfig+0x2f4>)
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bda:	d014      	beq.n	8004c06 <UART_SetConfig+0x26e>
 8004bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be0:	d802      	bhi.n	8004be8 <UART_SetConfig+0x250>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d007      	beq.n	8004bf6 <UART_SetConfig+0x25e>
 8004be6:	e016      	b.n	8004c16 <UART_SetConfig+0x27e>
 8004be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bec:	d007      	beq.n	8004bfe <UART_SetConfig+0x266>
 8004bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bf2:	d00c      	beq.n	8004c0e <UART_SetConfig+0x276>
 8004bf4:	e00f      	b.n	8004c16 <UART_SetConfig+0x27e>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfc:	e053      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c04:	e04f      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004c06:	2304      	movs	r3, #4
 8004c08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0c:	e04b      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004c0e:	2308      	movs	r3, #8
 8004c10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c14:	e047      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004c16:	2310      	movs	r3, #16
 8004c18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1c:	bf00      	nop
 8004c1e:	e042      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <UART_SetConfig+0x2ec>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d13a      	bne.n	8004ca0 <UART_SetConfig+0x308>
 8004c2a:	4b18      	ldr	r3, [pc, #96]	; (8004c8c <UART_SetConfig+0x2f4>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c38:	d014      	beq.n	8004c64 <UART_SetConfig+0x2cc>
 8004c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3e:	d802      	bhi.n	8004c46 <UART_SetConfig+0x2ae>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <UART_SetConfig+0x2bc>
 8004c44:	e016      	b.n	8004c74 <UART_SetConfig+0x2dc>
 8004c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c4a:	d007      	beq.n	8004c5c <UART_SetConfig+0x2c4>
 8004c4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c50:	d00c      	beq.n	8004c6c <UART_SetConfig+0x2d4>
 8004c52:	e00f      	b.n	8004c74 <UART_SetConfig+0x2dc>
 8004c54:	2300      	movs	r3, #0
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5a:	e024      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c62:	e020      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004c64:	2304      	movs	r3, #4
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6a:	e01c      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004c6c:	2308      	movs	r3, #8
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c72:	e018      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004c74:	2310      	movs	r3, #16
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7a:	bf00      	nop
 8004c7c:	e013      	b.n	8004ca6 <UART_SetConfig+0x30e>
 8004c7e:	bf00      	nop
 8004c80:	cfff69f3 	.word	0xcfff69f3
 8004c84:	40008000 	.word	0x40008000
 8004c88:	40013800 	.word	0x40013800
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	40004400 	.word	0x40004400
 8004c94:	40004800 	.word	0x40004800
 8004c98:	40004c00 	.word	0x40004c00
 8004c9c:	40005000 	.word	0x40005000
 8004ca0:	2310      	movs	r3, #16
 8004ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a86      	ldr	r2, [pc, #536]	; (8004ec4 <UART_SetConfig+0x52c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	f040 8422 	bne.w	80054f6 <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	f200 8173 	bhi.w	8004fa2 <UART_SetConfig+0x60a>
 8004cbc:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <UART_SetConfig+0x32c>)
 8004cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc2:	bf00      	nop
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004fa3 	.word	0x08004fa3
 8004ccc:	08004d8b 	.word	0x08004d8b
 8004cd0:	08004fa3 	.word	0x08004fa3
 8004cd4:	08004e23 	.word	0x08004e23
 8004cd8:	08004fa3 	.word	0x08004fa3
 8004cdc:	08004fa3 	.word	0x08004fa3
 8004ce0:	08004fa3 	.word	0x08004fa3
 8004ce4:	08004ef5 	.word	0x08004ef5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ce8:	f7fe f878 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 8004cec:	4602      	mov	r2, r0
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d044      	beq.n	8004d80 <UART_SetConfig+0x3e8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d03e      	beq.n	8004d7c <UART_SetConfig+0x3e4>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d038      	beq.n	8004d78 <UART_SetConfig+0x3e0>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d032      	beq.n	8004d74 <UART_SetConfig+0x3dc>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d02c      	beq.n	8004d70 <UART_SetConfig+0x3d8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	d026      	beq.n	8004d6c <UART_SetConfig+0x3d4>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	2b06      	cmp	r3, #6
 8004d24:	d020      	beq.n	8004d68 <UART_SetConfig+0x3d0>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	2b07      	cmp	r3, #7
 8004d2c:	d01a      	beq.n	8004d64 <UART_SetConfig+0x3cc>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d014      	beq.n	8004d60 <UART_SetConfig+0x3c8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	2b09      	cmp	r3, #9
 8004d3c:	d00e      	beq.n	8004d5c <UART_SetConfig+0x3c4>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	2b0a      	cmp	r3, #10
 8004d44:	d008      	beq.n	8004d58 <UART_SetConfig+0x3c0>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	2b0b      	cmp	r3, #11
 8004d4c:	d102      	bne.n	8004d54 <UART_SetConfig+0x3bc>
 8004d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d52:	e016      	b.n	8004d82 <UART_SetConfig+0x3ea>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e014      	b.n	8004d82 <UART_SetConfig+0x3ea>
 8004d58:	2380      	movs	r3, #128	; 0x80
 8004d5a:	e012      	b.n	8004d82 <UART_SetConfig+0x3ea>
 8004d5c:	2340      	movs	r3, #64	; 0x40
 8004d5e:	e010      	b.n	8004d82 <UART_SetConfig+0x3ea>
 8004d60:	2320      	movs	r3, #32
 8004d62:	e00e      	b.n	8004d82 <UART_SetConfig+0x3ea>
 8004d64:	2310      	movs	r3, #16
 8004d66:	e00c      	b.n	8004d82 <UART_SetConfig+0x3ea>
 8004d68:	230c      	movs	r3, #12
 8004d6a:	e00a      	b.n	8004d82 <UART_SetConfig+0x3ea>
 8004d6c:	230a      	movs	r3, #10
 8004d6e:	e008      	b.n	8004d82 <UART_SetConfig+0x3ea>
 8004d70:	2308      	movs	r3, #8
 8004d72:	e006      	b.n	8004d82 <UART_SetConfig+0x3ea>
 8004d74:	2306      	movs	r3, #6
 8004d76:	e004      	b.n	8004d82 <UART_SetConfig+0x3ea>
 8004d78:	2304      	movs	r3, #4
 8004d7a:	e002      	b.n	8004d82 <UART_SetConfig+0x3ea>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e000      	b.n	8004d82 <UART_SetConfig+0x3ea>
 8004d80:	2301      	movs	r3, #1
 8004d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d86:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d88:	e10e      	b.n	8004fa8 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d044      	beq.n	8004e1c <UART_SetConfig+0x484>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d03e      	beq.n	8004e18 <UART_SetConfig+0x480>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d038      	beq.n	8004e14 <UART_SetConfig+0x47c>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d032      	beq.n	8004e10 <UART_SetConfig+0x478>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d02c      	beq.n	8004e0c <UART_SetConfig+0x474>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	2b05      	cmp	r3, #5
 8004db8:	d026      	beq.n	8004e08 <UART_SetConfig+0x470>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2b06      	cmp	r3, #6
 8004dc0:	d020      	beq.n	8004e04 <UART_SetConfig+0x46c>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	2b07      	cmp	r3, #7
 8004dc8:	d01a      	beq.n	8004e00 <UART_SetConfig+0x468>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d014      	beq.n	8004dfc <UART_SetConfig+0x464>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b09      	cmp	r3, #9
 8004dd8:	d00e      	beq.n	8004df8 <UART_SetConfig+0x460>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b0a      	cmp	r3, #10
 8004de0:	d008      	beq.n	8004df4 <UART_SetConfig+0x45c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	2b0b      	cmp	r3, #11
 8004de8:	d102      	bne.n	8004df0 <UART_SetConfig+0x458>
 8004dea:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004dee:	e016      	b.n	8004e1e <UART_SetConfig+0x486>
 8004df0:	4b35      	ldr	r3, [pc, #212]	; (8004ec8 <UART_SetConfig+0x530>)
 8004df2:	e014      	b.n	8004e1e <UART_SetConfig+0x486>
 8004df4:	4b35      	ldr	r3, [pc, #212]	; (8004ecc <UART_SetConfig+0x534>)
 8004df6:	e012      	b.n	8004e1e <UART_SetConfig+0x486>
 8004df8:	4b35      	ldr	r3, [pc, #212]	; (8004ed0 <UART_SetConfig+0x538>)
 8004dfa:	e010      	b.n	8004e1e <UART_SetConfig+0x486>
 8004dfc:	4b35      	ldr	r3, [pc, #212]	; (8004ed4 <UART_SetConfig+0x53c>)
 8004dfe:	e00e      	b.n	8004e1e <UART_SetConfig+0x486>
 8004e00:	4b35      	ldr	r3, [pc, #212]	; (8004ed8 <UART_SetConfig+0x540>)
 8004e02:	e00c      	b.n	8004e1e <UART_SetConfig+0x486>
 8004e04:	4b35      	ldr	r3, [pc, #212]	; (8004edc <UART_SetConfig+0x544>)
 8004e06:	e00a      	b.n	8004e1e <UART_SetConfig+0x486>
 8004e08:	4b35      	ldr	r3, [pc, #212]	; (8004ee0 <UART_SetConfig+0x548>)
 8004e0a:	e008      	b.n	8004e1e <UART_SetConfig+0x486>
 8004e0c:	4b35      	ldr	r3, [pc, #212]	; (8004ee4 <UART_SetConfig+0x54c>)
 8004e0e:	e006      	b.n	8004e1e <UART_SetConfig+0x486>
 8004e10:	4b35      	ldr	r3, [pc, #212]	; (8004ee8 <UART_SetConfig+0x550>)
 8004e12:	e004      	b.n	8004e1e <UART_SetConfig+0x486>
 8004e14:	4b35      	ldr	r3, [pc, #212]	; (8004eec <UART_SetConfig+0x554>)
 8004e16:	e002      	b.n	8004e1e <UART_SetConfig+0x486>
 8004e18:	4b35      	ldr	r3, [pc, #212]	; (8004ef0 <UART_SetConfig+0x558>)
 8004e1a:	e000      	b.n	8004e1e <UART_SetConfig+0x486>
 8004e1c:	4b2a      	ldr	r3, [pc, #168]	; (8004ec8 <UART_SetConfig+0x530>)
 8004e1e:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e20:	e0c2      	b.n	8004fa8 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004e22:	f7fd ff47 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8004e26:	4602      	mov	r2, r0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d044      	beq.n	8004eba <UART_SetConfig+0x522>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d03e      	beq.n	8004eb6 <UART_SetConfig+0x51e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d038      	beq.n	8004eb2 <UART_SetConfig+0x51a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d032      	beq.n	8004eae <UART_SetConfig+0x516>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d02c      	beq.n	8004eaa <UART_SetConfig+0x512>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	2b05      	cmp	r3, #5
 8004e56:	d026      	beq.n	8004ea6 <UART_SetConfig+0x50e>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	2b06      	cmp	r3, #6
 8004e5e:	d020      	beq.n	8004ea2 <UART_SetConfig+0x50a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	2b07      	cmp	r3, #7
 8004e66:	d01a      	beq.n	8004e9e <UART_SetConfig+0x506>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d014      	beq.n	8004e9a <UART_SetConfig+0x502>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	2b09      	cmp	r3, #9
 8004e76:	d00e      	beq.n	8004e96 <UART_SetConfig+0x4fe>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	2b0a      	cmp	r3, #10
 8004e7e:	d008      	beq.n	8004e92 <UART_SetConfig+0x4fa>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	2b0b      	cmp	r3, #11
 8004e86:	d102      	bne.n	8004e8e <UART_SetConfig+0x4f6>
 8004e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e8c:	e016      	b.n	8004ebc <UART_SetConfig+0x524>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e014      	b.n	8004ebc <UART_SetConfig+0x524>
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	e012      	b.n	8004ebc <UART_SetConfig+0x524>
 8004e96:	2340      	movs	r3, #64	; 0x40
 8004e98:	e010      	b.n	8004ebc <UART_SetConfig+0x524>
 8004e9a:	2320      	movs	r3, #32
 8004e9c:	e00e      	b.n	8004ebc <UART_SetConfig+0x524>
 8004e9e:	2310      	movs	r3, #16
 8004ea0:	e00c      	b.n	8004ebc <UART_SetConfig+0x524>
 8004ea2:	230c      	movs	r3, #12
 8004ea4:	e00a      	b.n	8004ebc <UART_SetConfig+0x524>
 8004ea6:	230a      	movs	r3, #10
 8004ea8:	e008      	b.n	8004ebc <UART_SetConfig+0x524>
 8004eaa:	2308      	movs	r3, #8
 8004eac:	e006      	b.n	8004ebc <UART_SetConfig+0x524>
 8004eae:	2306      	movs	r3, #6
 8004eb0:	e004      	b.n	8004ebc <UART_SetConfig+0x524>
 8004eb2:	2304      	movs	r3, #4
 8004eb4:	e002      	b.n	8004ebc <UART_SetConfig+0x524>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e000      	b.n	8004ebc <UART_SetConfig+0x524>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec0:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ec2:	e071      	b.n	8004fa8 <UART_SetConfig+0x610>
 8004ec4:	40008000 	.word	0x40008000
 8004ec8:	00f42400 	.word	0x00f42400
 8004ecc:	0001e848 	.word	0x0001e848
 8004ed0:	0003d090 	.word	0x0003d090
 8004ed4:	0007a120 	.word	0x0007a120
 8004ed8:	000f4240 	.word	0x000f4240
 8004edc:	00145855 	.word	0x00145855
 8004ee0:	00186a00 	.word	0x00186a00
 8004ee4:	001e8480 	.word	0x001e8480
 8004ee8:	0028b0aa 	.word	0x0028b0aa
 8004eec:	003d0900 	.word	0x003d0900
 8004ef0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d04e      	beq.n	8004f9a <UART_SetConfig+0x602>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d047      	beq.n	8004f94 <UART_SetConfig+0x5fc>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d040      	beq.n	8004f8e <UART_SetConfig+0x5f6>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d039      	beq.n	8004f88 <UART_SetConfig+0x5f0>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d032      	beq.n	8004f82 <UART_SetConfig+0x5ea>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	2b05      	cmp	r3, #5
 8004f22:	d02b      	beq.n	8004f7c <UART_SetConfig+0x5e4>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	2b06      	cmp	r3, #6
 8004f2a:	d024      	beq.n	8004f76 <UART_SetConfig+0x5de>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	2b07      	cmp	r3, #7
 8004f32:	d01d      	beq.n	8004f70 <UART_SetConfig+0x5d8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d016      	beq.n	8004f6a <UART_SetConfig+0x5d2>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	2b09      	cmp	r3, #9
 8004f42:	d00f      	beq.n	8004f64 <UART_SetConfig+0x5cc>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	2b0a      	cmp	r3, #10
 8004f4a:	d008      	beq.n	8004f5e <UART_SetConfig+0x5c6>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	2b0b      	cmp	r3, #11
 8004f52:	d101      	bne.n	8004f58 <UART_SetConfig+0x5c0>
 8004f54:	2380      	movs	r3, #128	; 0x80
 8004f56:	e022      	b.n	8004f9e <UART_SetConfig+0x606>
 8004f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f5c:	e01f      	b.n	8004f9e <UART_SetConfig+0x606>
 8004f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f62:	e01c      	b.n	8004f9e <UART_SetConfig+0x606>
 8004f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f68:	e019      	b.n	8004f9e <UART_SetConfig+0x606>
 8004f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f6e:	e016      	b.n	8004f9e <UART_SetConfig+0x606>
 8004f70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f74:	e013      	b.n	8004f9e <UART_SetConfig+0x606>
 8004f76:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004f7a:	e010      	b.n	8004f9e <UART_SetConfig+0x606>
 8004f7c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004f80:	e00d      	b.n	8004f9e <UART_SetConfig+0x606>
 8004f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f86:	e00a      	b.n	8004f9e <UART_SetConfig+0x606>
 8004f88:	f241 5355 	movw	r3, #5461	; 0x1555
 8004f8c:	e007      	b.n	8004f9e <UART_SetConfig+0x606>
 8004f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f92:	e004      	b.n	8004f9e <UART_SetConfig+0x606>
 8004f94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f98:	e001      	b.n	8004f9e <UART_SetConfig+0x606>
 8004f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f9e:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fa0:	e002      	b.n	8004fa8 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	76fb      	strb	r3, [r7, #27]
        break;
 8004fa6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 86b7 	beq.w	8005d1e <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	4413      	add	r3, r2
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d305      	bcc.n	8004fcc <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d903      	bls.n	8004fd4 <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	76fb      	strb	r3, [r7, #27]
 8004fd0:	f000 bea5 	b.w	8005d1e <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 8004fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	f200 8277 	bhi.w	80054cc <UART_SetConfig+0xb34>
 8004fde:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <UART_SetConfig+0x64c>)
 8004fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe4:	08005009 	.word	0x08005009
 8004fe8:	080054cd 	.word	0x080054cd
 8004fec:	08005147 	.word	0x08005147
 8004ff0:	080054cd 	.word	0x080054cd
 8004ff4:	0800523d 	.word	0x0800523d
 8004ff8:	080054cd 	.word	0x080054cd
 8004ffc:	080054cd 	.word	0x080054cd
 8005000:	080054cd 	.word	0x080054cd
 8005004:	0800537b 	.word	0x0800537b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005008:	f7fd fee8 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 800500c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4618      	mov	r0, r3
 8005012:	f04f 0100 	mov.w	r1, #0
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	2b00      	cmp	r3, #0
 800501c:	d067      	beq.n	80050ee <UART_SetConfig+0x756>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	2b01      	cmp	r3, #1
 8005024:	d05e      	beq.n	80050e4 <UART_SetConfig+0x74c>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	2b02      	cmp	r3, #2
 800502c:	d055      	beq.n	80050da <UART_SetConfig+0x742>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	2b03      	cmp	r3, #3
 8005034:	d04c      	beq.n	80050d0 <UART_SetConfig+0x738>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	2b04      	cmp	r3, #4
 800503c:	d043      	beq.n	80050c6 <UART_SetConfig+0x72e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	2b05      	cmp	r3, #5
 8005044:	d03a      	beq.n	80050bc <UART_SetConfig+0x724>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	2b06      	cmp	r3, #6
 800504c:	d031      	beq.n	80050b2 <UART_SetConfig+0x71a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	2b07      	cmp	r3, #7
 8005054:	d028      	beq.n	80050a8 <UART_SetConfig+0x710>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	2b08      	cmp	r3, #8
 800505c:	d01f      	beq.n	800509e <UART_SetConfig+0x706>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	2b09      	cmp	r3, #9
 8005064:	d016      	beq.n	8005094 <UART_SetConfig+0x6fc>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	2b0a      	cmp	r3, #10
 800506c:	d00d      	beq.n	800508a <UART_SetConfig+0x6f2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	2b0b      	cmp	r3, #11
 8005074:	d104      	bne.n	8005080 <UART_SetConfig+0x6e8>
 8005076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800507a:	f04f 0400 	mov.w	r4, #0
 800507e:	e03a      	b.n	80050f6 <UART_SetConfig+0x75e>
 8005080:	f04f 0301 	mov.w	r3, #1
 8005084:	f04f 0400 	mov.w	r4, #0
 8005088:	e035      	b.n	80050f6 <UART_SetConfig+0x75e>
 800508a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800508e:	f04f 0400 	mov.w	r4, #0
 8005092:	e030      	b.n	80050f6 <UART_SetConfig+0x75e>
 8005094:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005098:	f04f 0400 	mov.w	r4, #0
 800509c:	e02b      	b.n	80050f6 <UART_SetConfig+0x75e>
 800509e:	f04f 0320 	mov.w	r3, #32
 80050a2:	f04f 0400 	mov.w	r4, #0
 80050a6:	e026      	b.n	80050f6 <UART_SetConfig+0x75e>
 80050a8:	f04f 0310 	mov.w	r3, #16
 80050ac:	f04f 0400 	mov.w	r4, #0
 80050b0:	e021      	b.n	80050f6 <UART_SetConfig+0x75e>
 80050b2:	f04f 030c 	mov.w	r3, #12
 80050b6:	f04f 0400 	mov.w	r4, #0
 80050ba:	e01c      	b.n	80050f6 <UART_SetConfig+0x75e>
 80050bc:	f04f 030a 	mov.w	r3, #10
 80050c0:	f04f 0400 	mov.w	r4, #0
 80050c4:	e017      	b.n	80050f6 <UART_SetConfig+0x75e>
 80050c6:	f04f 0308 	mov.w	r3, #8
 80050ca:	f04f 0400 	mov.w	r4, #0
 80050ce:	e012      	b.n	80050f6 <UART_SetConfig+0x75e>
 80050d0:	f04f 0306 	mov.w	r3, #6
 80050d4:	f04f 0400 	mov.w	r4, #0
 80050d8:	e00d      	b.n	80050f6 <UART_SetConfig+0x75e>
 80050da:	f04f 0304 	mov.w	r3, #4
 80050de:	f04f 0400 	mov.w	r4, #0
 80050e2:	e008      	b.n	80050f6 <UART_SetConfig+0x75e>
 80050e4:	f04f 0302 	mov.w	r3, #2
 80050e8:	f04f 0400 	mov.w	r4, #0
 80050ec:	e003      	b.n	80050f6 <UART_SetConfig+0x75e>
 80050ee:	f04f 0301 	mov.w	r3, #1
 80050f2:	f04f 0400 	mov.w	r4, #0
 80050f6:	461a      	mov	r2, r3
 80050f8:	4623      	mov	r3, r4
 80050fa:	f7fb f8d9 	bl	80002b0 <__aeabi_uldivmod>
 80050fe:	4603      	mov	r3, r0
 8005100:	460c      	mov	r4, r1
 8005102:	4619      	mov	r1, r3
 8005104:	4622      	mov	r2, r4
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	f04f 0400 	mov.w	r4, #0
 800510e:	0214      	lsls	r4, r2, #8
 8005110:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005114:	020b      	lsls	r3, r1, #8
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6852      	ldr	r2, [r2, #4]
 800511a:	0852      	lsrs	r2, r2, #1
 800511c:	4611      	mov	r1, r2
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	eb13 0b01 	adds.w	fp, r3, r1
 8005126:	eb44 0c02 	adc.w	ip, r4, r2
 800512a:	4658      	mov	r0, fp
 800512c:	4661      	mov	r1, ip
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f04f 0400 	mov.w	r4, #0
 8005136:	461a      	mov	r2, r3
 8005138:	4623      	mov	r3, r4
 800513a:	f7fb f8b9 	bl	80002b0 <__aeabi_uldivmod>
 800513e:	4603      	mov	r3, r0
 8005140:	460c      	mov	r4, r1
 8005142:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005144:	e1c5      	b.n	80054d2 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	2b00      	cmp	r3, #0
 800514c:	d05b      	beq.n	8005206 <UART_SetConfig+0x86e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b01      	cmp	r3, #1
 8005154:	d053      	beq.n	80051fe <UART_SetConfig+0x866>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	2b02      	cmp	r3, #2
 800515c:	d04b      	beq.n	80051f6 <UART_SetConfig+0x85e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	2b03      	cmp	r3, #3
 8005164:	d043      	beq.n	80051ee <UART_SetConfig+0x856>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b04      	cmp	r3, #4
 800516c:	d03b      	beq.n	80051e6 <UART_SetConfig+0x84e>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	2b05      	cmp	r3, #5
 8005174:	d033      	beq.n	80051de <UART_SetConfig+0x846>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	2b06      	cmp	r3, #6
 800517c:	d02b      	beq.n	80051d6 <UART_SetConfig+0x83e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	2b07      	cmp	r3, #7
 8005184:	d023      	beq.n	80051ce <UART_SetConfig+0x836>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	2b08      	cmp	r3, #8
 800518c:	d01b      	beq.n	80051c6 <UART_SetConfig+0x82e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	2b09      	cmp	r3, #9
 8005194:	d013      	beq.n	80051be <UART_SetConfig+0x826>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	2b0a      	cmp	r3, #10
 800519c:	d00b      	beq.n	80051b6 <UART_SetConfig+0x81e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	2b0b      	cmp	r3, #11
 80051a4:	d103      	bne.n	80051ae <UART_SetConfig+0x816>
 80051a6:	4bae      	ldr	r3, [pc, #696]	; (8005460 <UART_SetConfig+0xac8>)
 80051a8:	f04f 0400 	mov.w	r4, #0
 80051ac:	e02e      	b.n	800520c <UART_SetConfig+0x874>
 80051ae:	4bad      	ldr	r3, [pc, #692]	; (8005464 <UART_SetConfig+0xacc>)
 80051b0:	f04f 0400 	mov.w	r4, #0
 80051b4:	e02a      	b.n	800520c <UART_SetConfig+0x874>
 80051b6:	4bac      	ldr	r3, [pc, #688]	; (8005468 <UART_SetConfig+0xad0>)
 80051b8:	f04f 0400 	mov.w	r4, #0
 80051bc:	e026      	b.n	800520c <UART_SetConfig+0x874>
 80051be:	4bab      	ldr	r3, [pc, #684]	; (800546c <UART_SetConfig+0xad4>)
 80051c0:	f04f 0400 	mov.w	r4, #0
 80051c4:	e022      	b.n	800520c <UART_SetConfig+0x874>
 80051c6:	4baa      	ldr	r3, [pc, #680]	; (8005470 <UART_SetConfig+0xad8>)
 80051c8:	f04f 0400 	mov.w	r4, #0
 80051cc:	e01e      	b.n	800520c <UART_SetConfig+0x874>
 80051ce:	4ba9      	ldr	r3, [pc, #676]	; (8005474 <UART_SetConfig+0xadc>)
 80051d0:	f04f 0400 	mov.w	r4, #0
 80051d4:	e01a      	b.n	800520c <UART_SetConfig+0x874>
 80051d6:	a49e      	add	r4, pc, #632	; (adr r4, 8005450 <UART_SetConfig+0xab8>)
 80051d8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80051dc:	e016      	b.n	800520c <UART_SetConfig+0x874>
 80051de:	4ba6      	ldr	r3, [pc, #664]	; (8005478 <UART_SetConfig+0xae0>)
 80051e0:	f04f 0400 	mov.w	r4, #0
 80051e4:	e012      	b.n	800520c <UART_SetConfig+0x874>
 80051e6:	4ba5      	ldr	r3, [pc, #660]	; (800547c <UART_SetConfig+0xae4>)
 80051e8:	f04f 0400 	mov.w	r4, #0
 80051ec:	e00e      	b.n	800520c <UART_SetConfig+0x874>
 80051ee:	a49a      	add	r4, pc, #616	; (adr r4, 8005458 <UART_SetConfig+0xac0>)
 80051f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80051f4:	e00a      	b.n	800520c <UART_SetConfig+0x874>
 80051f6:	4ba2      	ldr	r3, [pc, #648]	; (8005480 <UART_SetConfig+0xae8>)
 80051f8:	f04f 0400 	mov.w	r4, #0
 80051fc:	e006      	b.n	800520c <UART_SetConfig+0x874>
 80051fe:	4ba1      	ldr	r3, [pc, #644]	; (8005484 <UART_SetConfig+0xaec>)
 8005200:	f04f 0400 	mov.w	r4, #0
 8005204:	e002      	b.n	800520c <UART_SetConfig+0x874>
 8005206:	4b97      	ldr	r3, [pc, #604]	; (8005464 <UART_SetConfig+0xacc>)
 8005208:	f04f 0400 	mov.w	r4, #0
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6852      	ldr	r2, [r2, #4]
 8005210:	0852      	lsrs	r2, r2, #1
 8005212:	4611      	mov	r1, r2
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	eb13 0b01 	adds.w	fp, r3, r1
 800521c:	eb44 0c02 	adc.w	ip, r4, r2
 8005220:	4658      	mov	r0, fp
 8005222:	4661      	mov	r1, ip
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f04f 0400 	mov.w	r4, #0
 800522c:	461a      	mov	r2, r3
 800522e:	4623      	mov	r3, r4
 8005230:	f7fb f83e 	bl	80002b0 <__aeabi_uldivmod>
 8005234:	4603      	mov	r3, r0
 8005236:	460c      	mov	r4, r1
 8005238:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800523a:	e14a      	b.n	80054d2 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800523c:	f7fd fd3a 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8005240:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4618      	mov	r0, r3
 8005246:	f04f 0100 	mov.w	r1, #0
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	2b00      	cmp	r3, #0
 8005250:	d067      	beq.n	8005322 <UART_SetConfig+0x98a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	2b01      	cmp	r3, #1
 8005258:	d05e      	beq.n	8005318 <UART_SetConfig+0x980>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	2b02      	cmp	r3, #2
 8005260:	d055      	beq.n	800530e <UART_SetConfig+0x976>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	2b03      	cmp	r3, #3
 8005268:	d04c      	beq.n	8005304 <UART_SetConfig+0x96c>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2b04      	cmp	r3, #4
 8005270:	d043      	beq.n	80052fa <UART_SetConfig+0x962>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2b05      	cmp	r3, #5
 8005278:	d03a      	beq.n	80052f0 <UART_SetConfig+0x958>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	2b06      	cmp	r3, #6
 8005280:	d031      	beq.n	80052e6 <UART_SetConfig+0x94e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	2b07      	cmp	r3, #7
 8005288:	d028      	beq.n	80052dc <UART_SetConfig+0x944>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	2b08      	cmp	r3, #8
 8005290:	d01f      	beq.n	80052d2 <UART_SetConfig+0x93a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	2b09      	cmp	r3, #9
 8005298:	d016      	beq.n	80052c8 <UART_SetConfig+0x930>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	2b0a      	cmp	r3, #10
 80052a0:	d00d      	beq.n	80052be <UART_SetConfig+0x926>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	2b0b      	cmp	r3, #11
 80052a8:	d104      	bne.n	80052b4 <UART_SetConfig+0x91c>
 80052aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052ae:	f04f 0400 	mov.w	r4, #0
 80052b2:	e03a      	b.n	800532a <UART_SetConfig+0x992>
 80052b4:	f04f 0301 	mov.w	r3, #1
 80052b8:	f04f 0400 	mov.w	r4, #0
 80052bc:	e035      	b.n	800532a <UART_SetConfig+0x992>
 80052be:	f04f 0380 	mov.w	r3, #128	; 0x80
 80052c2:	f04f 0400 	mov.w	r4, #0
 80052c6:	e030      	b.n	800532a <UART_SetConfig+0x992>
 80052c8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80052cc:	f04f 0400 	mov.w	r4, #0
 80052d0:	e02b      	b.n	800532a <UART_SetConfig+0x992>
 80052d2:	f04f 0320 	mov.w	r3, #32
 80052d6:	f04f 0400 	mov.w	r4, #0
 80052da:	e026      	b.n	800532a <UART_SetConfig+0x992>
 80052dc:	f04f 0310 	mov.w	r3, #16
 80052e0:	f04f 0400 	mov.w	r4, #0
 80052e4:	e021      	b.n	800532a <UART_SetConfig+0x992>
 80052e6:	f04f 030c 	mov.w	r3, #12
 80052ea:	f04f 0400 	mov.w	r4, #0
 80052ee:	e01c      	b.n	800532a <UART_SetConfig+0x992>
 80052f0:	f04f 030a 	mov.w	r3, #10
 80052f4:	f04f 0400 	mov.w	r4, #0
 80052f8:	e017      	b.n	800532a <UART_SetConfig+0x992>
 80052fa:	f04f 0308 	mov.w	r3, #8
 80052fe:	f04f 0400 	mov.w	r4, #0
 8005302:	e012      	b.n	800532a <UART_SetConfig+0x992>
 8005304:	f04f 0306 	mov.w	r3, #6
 8005308:	f04f 0400 	mov.w	r4, #0
 800530c:	e00d      	b.n	800532a <UART_SetConfig+0x992>
 800530e:	f04f 0304 	mov.w	r3, #4
 8005312:	f04f 0400 	mov.w	r4, #0
 8005316:	e008      	b.n	800532a <UART_SetConfig+0x992>
 8005318:	f04f 0302 	mov.w	r3, #2
 800531c:	f04f 0400 	mov.w	r4, #0
 8005320:	e003      	b.n	800532a <UART_SetConfig+0x992>
 8005322:	f04f 0301 	mov.w	r3, #1
 8005326:	f04f 0400 	mov.w	r4, #0
 800532a:	461a      	mov	r2, r3
 800532c:	4623      	mov	r3, r4
 800532e:	f7fa ffbf 	bl	80002b0 <__aeabi_uldivmod>
 8005332:	4603      	mov	r3, r0
 8005334:	460c      	mov	r4, r1
 8005336:	4619      	mov	r1, r3
 8005338:	4622      	mov	r2, r4
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	f04f 0400 	mov.w	r4, #0
 8005342:	0214      	lsls	r4, r2, #8
 8005344:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005348:	020b      	lsls	r3, r1, #8
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6852      	ldr	r2, [r2, #4]
 800534e:	0852      	lsrs	r2, r2, #1
 8005350:	4611      	mov	r1, r2
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	eb13 0b01 	adds.w	fp, r3, r1
 800535a:	eb44 0c02 	adc.w	ip, r4, r2
 800535e:	4658      	mov	r0, fp
 8005360:	4661      	mov	r1, ip
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f04f 0400 	mov.w	r4, #0
 800536a:	461a      	mov	r2, r3
 800536c:	4623      	mov	r3, r4
 800536e:	f7fa ff9f 	bl	80002b0 <__aeabi_uldivmod>
 8005372:	4603      	mov	r3, r0
 8005374:	460c      	mov	r4, r1
 8005376:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005378:	e0ab      	b.n	80054d2 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 8088 	beq.w	8005494 <UART_SetConfig+0xafc>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	2b01      	cmp	r3, #1
 800538a:	d05b      	beq.n	8005444 <UART_SetConfig+0xaac>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	2b02      	cmp	r3, #2
 8005392:	d052      	beq.n	800543a <UART_SetConfig+0xaa2>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	2b03      	cmp	r3, #3
 800539a:	d04a      	beq.n	8005432 <UART_SetConfig+0xa9a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d041      	beq.n	8005428 <UART_SetConfig+0xa90>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	2b05      	cmp	r3, #5
 80053aa:	d039      	beq.n	8005420 <UART_SetConfig+0xa88>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	2b06      	cmp	r3, #6
 80053b2:	d031      	beq.n	8005418 <UART_SetConfig+0xa80>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	2b07      	cmp	r3, #7
 80053ba:	d028      	beq.n	800540e <UART_SetConfig+0xa76>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d01f      	beq.n	8005404 <UART_SetConfig+0xa6c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	2b09      	cmp	r3, #9
 80053ca:	d016      	beq.n	80053fa <UART_SetConfig+0xa62>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	2b0a      	cmp	r3, #10
 80053d2:	d00d      	beq.n	80053f0 <UART_SetConfig+0xa58>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	2b0b      	cmp	r3, #11
 80053da:	d104      	bne.n	80053e6 <UART_SetConfig+0xa4e>
 80053dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053e0:	f04f 0400 	mov.w	r4, #0
 80053e4:	e05a      	b.n	800549c <UART_SetConfig+0xb04>
 80053e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80053ea:	f04f 0400 	mov.w	r4, #0
 80053ee:	e055      	b.n	800549c <UART_SetConfig+0xb04>
 80053f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053f4:	f04f 0400 	mov.w	r4, #0
 80053f8:	e050      	b.n	800549c <UART_SetConfig+0xb04>
 80053fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053fe:	f04f 0400 	mov.w	r4, #0
 8005402:	e04b      	b.n	800549c <UART_SetConfig+0xb04>
 8005404:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005408:	f04f 0400 	mov.w	r4, #0
 800540c:	e046      	b.n	800549c <UART_SetConfig+0xb04>
 800540e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005412:	f04f 0400 	mov.w	r4, #0
 8005416:	e041      	b.n	800549c <UART_SetConfig+0xb04>
 8005418:	4b1b      	ldr	r3, [pc, #108]	; (8005488 <UART_SetConfig+0xaf0>)
 800541a:	f04f 0400 	mov.w	r4, #0
 800541e:	e03d      	b.n	800549c <UART_SetConfig+0xb04>
 8005420:	4b1a      	ldr	r3, [pc, #104]	; (800548c <UART_SetConfig+0xaf4>)
 8005422:	f04f 0400 	mov.w	r4, #0
 8005426:	e039      	b.n	800549c <UART_SetConfig+0xb04>
 8005428:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800542c:	f04f 0400 	mov.w	r4, #0
 8005430:	e034      	b.n	800549c <UART_SetConfig+0xb04>
 8005432:	4b17      	ldr	r3, [pc, #92]	; (8005490 <UART_SetConfig+0xaf8>)
 8005434:	f04f 0400 	mov.w	r4, #0
 8005438:	e030      	b.n	800549c <UART_SetConfig+0xb04>
 800543a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800543e:	f04f 0400 	mov.w	r4, #0
 8005442:	e02b      	b.n	800549c <UART_SetConfig+0xb04>
 8005444:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005448:	f04f 0400 	mov.w	r4, #0
 800544c:	e026      	b.n	800549c <UART_SetConfig+0xb04>
 800544e:	bf00      	nop
 8005450:	14585500 	.word	0x14585500
 8005454:	00000000 	.word	0x00000000
 8005458:	28b0aa00 	.word	0x28b0aa00
 800545c:	00000000 	.word	0x00000000
 8005460:	00f42400 	.word	0x00f42400
 8005464:	f4240000 	.word	0xf4240000
 8005468:	01e84800 	.word	0x01e84800
 800546c:	03d09000 	.word	0x03d09000
 8005470:	07a12000 	.word	0x07a12000
 8005474:	0f424000 	.word	0x0f424000
 8005478:	186a0000 	.word	0x186a0000
 800547c:	1e848000 	.word	0x1e848000
 8005480:	3d090000 	.word	0x3d090000
 8005484:	7a120000 	.word	0x7a120000
 8005488:	000aaa00 	.word	0x000aaa00
 800548c:	000ccc00 	.word	0x000ccc00
 8005490:	00155500 	.word	0x00155500
 8005494:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005498:	f04f 0400 	mov.w	r4, #0
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6852      	ldr	r2, [r2, #4]
 80054a0:	0852      	lsrs	r2, r2, #1
 80054a2:	4611      	mov	r1, r2
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	eb13 0b01 	adds.w	fp, r3, r1
 80054ac:	eb44 0c02 	adc.w	ip, r4, r2
 80054b0:	4658      	mov	r0, fp
 80054b2:	4661      	mov	r1, ip
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f04f 0400 	mov.w	r4, #0
 80054bc:	461a      	mov	r2, r3
 80054be:	4623      	mov	r3, r4
 80054c0:	f7fa fef6 	bl	80002b0 <__aeabi_uldivmod>
 80054c4:	4603      	mov	r3, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80054ca:	e002      	b.n	80054d2 <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	76fb      	strb	r3, [r7, #27]
            break;
 80054d0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d8:	d309      	bcc.n	80054ee <UART_SetConfig+0xb56>
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e0:	d205      	bcs.n	80054ee <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69fa      	ldr	r2, [r7, #28]
 80054e8:	60da      	str	r2, [r3, #12]
 80054ea:	f000 bc18 	b.w	8005d1e <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	76fb      	strb	r3, [r7, #27]
 80054f2:	f000 bc14 	b.w	8005d1e <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fe:	f040 8204 	bne.w	800590a <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8005502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005506:	2b08      	cmp	r3, #8
 8005508:	f200 81df 	bhi.w	80058ca <UART_SetConfig+0xf32>
 800550c:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <UART_SetConfig+0xb7c>)
 800550e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005512:	bf00      	nop
 8005514:	08005539 	.word	0x08005539
 8005518:	080055f1 	.word	0x080055f1
 800551c:	080056a9 	.word	0x080056a9
 8005520:	080058cb 	.word	0x080058cb
 8005524:	08005751 	.word	0x08005751
 8005528:	080058cb 	.word	0x080058cb
 800552c:	080058cb 	.word	0x080058cb
 8005530:	080058cb 	.word	0x080058cb
 8005534:	08005809 	.word	0x08005809
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005538:	f7fd fc50 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 800553c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	2b00      	cmp	r3, #0
 8005544:	d044      	beq.n	80055d0 <UART_SetConfig+0xc38>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	2b01      	cmp	r3, #1
 800554c:	d03e      	beq.n	80055cc <UART_SetConfig+0xc34>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	2b02      	cmp	r3, #2
 8005554:	d038      	beq.n	80055c8 <UART_SetConfig+0xc30>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	2b03      	cmp	r3, #3
 800555c:	d032      	beq.n	80055c4 <UART_SetConfig+0xc2c>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	2b04      	cmp	r3, #4
 8005564:	d02c      	beq.n	80055c0 <UART_SetConfig+0xc28>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	2b05      	cmp	r3, #5
 800556c:	d026      	beq.n	80055bc <UART_SetConfig+0xc24>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	2b06      	cmp	r3, #6
 8005574:	d020      	beq.n	80055b8 <UART_SetConfig+0xc20>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	2b07      	cmp	r3, #7
 800557c:	d01a      	beq.n	80055b4 <UART_SetConfig+0xc1c>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	2b08      	cmp	r3, #8
 8005584:	d014      	beq.n	80055b0 <UART_SetConfig+0xc18>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	2b09      	cmp	r3, #9
 800558c:	d00e      	beq.n	80055ac <UART_SetConfig+0xc14>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	2b0a      	cmp	r3, #10
 8005594:	d008      	beq.n	80055a8 <UART_SetConfig+0xc10>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	2b0b      	cmp	r3, #11
 800559c:	d102      	bne.n	80055a4 <UART_SetConfig+0xc0c>
 800559e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055a2:	e016      	b.n	80055d2 <UART_SetConfig+0xc3a>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e014      	b.n	80055d2 <UART_SetConfig+0xc3a>
 80055a8:	2380      	movs	r3, #128	; 0x80
 80055aa:	e012      	b.n	80055d2 <UART_SetConfig+0xc3a>
 80055ac:	2340      	movs	r3, #64	; 0x40
 80055ae:	e010      	b.n	80055d2 <UART_SetConfig+0xc3a>
 80055b0:	2320      	movs	r3, #32
 80055b2:	e00e      	b.n	80055d2 <UART_SetConfig+0xc3a>
 80055b4:	2310      	movs	r3, #16
 80055b6:	e00c      	b.n	80055d2 <UART_SetConfig+0xc3a>
 80055b8:	230c      	movs	r3, #12
 80055ba:	e00a      	b.n	80055d2 <UART_SetConfig+0xc3a>
 80055bc:	230a      	movs	r3, #10
 80055be:	e008      	b.n	80055d2 <UART_SetConfig+0xc3a>
 80055c0:	2308      	movs	r3, #8
 80055c2:	e006      	b.n	80055d2 <UART_SetConfig+0xc3a>
 80055c4:	2306      	movs	r3, #6
 80055c6:	e004      	b.n	80055d2 <UART_SetConfig+0xc3a>
 80055c8:	2304      	movs	r3, #4
 80055ca:	e002      	b.n	80055d2 <UART_SetConfig+0xc3a>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e000      	b.n	80055d2 <UART_SetConfig+0xc3a>
 80055d0:	2301      	movs	r3, #1
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d8:	005a      	lsls	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	085b      	lsrs	r3, r3, #1
 80055e0:	441a      	add	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80055ee:	e16f      	b.n	80058d0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f0:	f7fd fc0a 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 80055f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d044      	beq.n	8005688 <UART_SetConfig+0xcf0>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	2b01      	cmp	r3, #1
 8005604:	d03e      	beq.n	8005684 <UART_SetConfig+0xcec>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	2b02      	cmp	r3, #2
 800560c:	d038      	beq.n	8005680 <UART_SetConfig+0xce8>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	2b03      	cmp	r3, #3
 8005614:	d032      	beq.n	800567c <UART_SetConfig+0xce4>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	2b04      	cmp	r3, #4
 800561c:	d02c      	beq.n	8005678 <UART_SetConfig+0xce0>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	2b05      	cmp	r3, #5
 8005624:	d026      	beq.n	8005674 <UART_SetConfig+0xcdc>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	2b06      	cmp	r3, #6
 800562c:	d020      	beq.n	8005670 <UART_SetConfig+0xcd8>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	2b07      	cmp	r3, #7
 8005634:	d01a      	beq.n	800566c <UART_SetConfig+0xcd4>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	2b08      	cmp	r3, #8
 800563c:	d014      	beq.n	8005668 <UART_SetConfig+0xcd0>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	2b09      	cmp	r3, #9
 8005644:	d00e      	beq.n	8005664 <UART_SetConfig+0xccc>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	2b0a      	cmp	r3, #10
 800564c:	d008      	beq.n	8005660 <UART_SetConfig+0xcc8>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	2b0b      	cmp	r3, #11
 8005654:	d102      	bne.n	800565c <UART_SetConfig+0xcc4>
 8005656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800565a:	e016      	b.n	800568a <UART_SetConfig+0xcf2>
 800565c:	2301      	movs	r3, #1
 800565e:	e014      	b.n	800568a <UART_SetConfig+0xcf2>
 8005660:	2380      	movs	r3, #128	; 0x80
 8005662:	e012      	b.n	800568a <UART_SetConfig+0xcf2>
 8005664:	2340      	movs	r3, #64	; 0x40
 8005666:	e010      	b.n	800568a <UART_SetConfig+0xcf2>
 8005668:	2320      	movs	r3, #32
 800566a:	e00e      	b.n	800568a <UART_SetConfig+0xcf2>
 800566c:	2310      	movs	r3, #16
 800566e:	e00c      	b.n	800568a <UART_SetConfig+0xcf2>
 8005670:	230c      	movs	r3, #12
 8005672:	e00a      	b.n	800568a <UART_SetConfig+0xcf2>
 8005674:	230a      	movs	r3, #10
 8005676:	e008      	b.n	800568a <UART_SetConfig+0xcf2>
 8005678:	2308      	movs	r3, #8
 800567a:	e006      	b.n	800568a <UART_SetConfig+0xcf2>
 800567c:	2306      	movs	r3, #6
 800567e:	e004      	b.n	800568a <UART_SetConfig+0xcf2>
 8005680:	2304      	movs	r3, #4
 8005682:	e002      	b.n	800568a <UART_SetConfig+0xcf2>
 8005684:	2302      	movs	r3, #2
 8005686:	e000      	b.n	800568a <UART_SetConfig+0xcf2>
 8005688:	2301      	movs	r3, #1
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	005a      	lsls	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	085b      	lsrs	r3, r3, #1
 8005698:	441a      	add	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80056a6:	e113      	b.n	80058d0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d043      	beq.n	8005738 <UART_SetConfig+0xda0>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d03d      	beq.n	8005734 <UART_SetConfig+0xd9c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d037      	beq.n	8005730 <UART_SetConfig+0xd98>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d031      	beq.n	800572c <UART_SetConfig+0xd94>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d02b      	beq.n	8005728 <UART_SetConfig+0xd90>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	2b05      	cmp	r3, #5
 80056d6:	d025      	beq.n	8005724 <UART_SetConfig+0xd8c>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	2b06      	cmp	r3, #6
 80056de:	d01f      	beq.n	8005720 <UART_SetConfig+0xd88>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	2b07      	cmp	r3, #7
 80056e6:	d019      	beq.n	800571c <UART_SetConfig+0xd84>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d013      	beq.n	8005718 <UART_SetConfig+0xd80>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	2b09      	cmp	r3, #9
 80056f6:	d00d      	beq.n	8005714 <UART_SetConfig+0xd7c>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	2b0a      	cmp	r3, #10
 80056fe:	d007      	beq.n	8005710 <UART_SetConfig+0xd78>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b0b      	cmp	r3, #11
 8005706:	d101      	bne.n	800570c <UART_SetConfig+0xd74>
 8005708:	4b8d      	ldr	r3, [pc, #564]	; (8005940 <UART_SetConfig+0xfa8>)
 800570a:	e016      	b.n	800573a <UART_SetConfig+0xda2>
 800570c:	4b8d      	ldr	r3, [pc, #564]	; (8005944 <UART_SetConfig+0xfac>)
 800570e:	e014      	b.n	800573a <UART_SetConfig+0xda2>
 8005710:	4b8d      	ldr	r3, [pc, #564]	; (8005948 <UART_SetConfig+0xfb0>)
 8005712:	e012      	b.n	800573a <UART_SetConfig+0xda2>
 8005714:	4b8d      	ldr	r3, [pc, #564]	; (800594c <UART_SetConfig+0xfb4>)
 8005716:	e010      	b.n	800573a <UART_SetConfig+0xda2>
 8005718:	4b8d      	ldr	r3, [pc, #564]	; (8005950 <UART_SetConfig+0xfb8>)
 800571a:	e00e      	b.n	800573a <UART_SetConfig+0xda2>
 800571c:	4b8d      	ldr	r3, [pc, #564]	; (8005954 <UART_SetConfig+0xfbc>)
 800571e:	e00c      	b.n	800573a <UART_SetConfig+0xda2>
 8005720:	4b8d      	ldr	r3, [pc, #564]	; (8005958 <UART_SetConfig+0xfc0>)
 8005722:	e00a      	b.n	800573a <UART_SetConfig+0xda2>
 8005724:	4b8d      	ldr	r3, [pc, #564]	; (800595c <UART_SetConfig+0xfc4>)
 8005726:	e008      	b.n	800573a <UART_SetConfig+0xda2>
 8005728:	4b8d      	ldr	r3, [pc, #564]	; (8005960 <UART_SetConfig+0xfc8>)
 800572a:	e006      	b.n	800573a <UART_SetConfig+0xda2>
 800572c:	4b8d      	ldr	r3, [pc, #564]	; (8005964 <UART_SetConfig+0xfcc>)
 800572e:	e004      	b.n	800573a <UART_SetConfig+0xda2>
 8005730:	4b8d      	ldr	r3, [pc, #564]	; (8005968 <UART_SetConfig+0xfd0>)
 8005732:	e002      	b.n	800573a <UART_SetConfig+0xda2>
 8005734:	4b8d      	ldr	r3, [pc, #564]	; (800596c <UART_SetConfig+0xfd4>)
 8005736:	e000      	b.n	800573a <UART_SetConfig+0xda2>
 8005738:	4b82      	ldr	r3, [pc, #520]	; (8005944 <UART_SetConfig+0xfac>)
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6852      	ldr	r2, [r2, #4]
 800573e:	0852      	lsrs	r2, r2, #1
 8005740:	441a      	add	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	fbb2 f3f3 	udiv	r3, r2, r3
 800574a:	b29b      	uxth	r3, r3
 800574c:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800574e:	e0bf      	b.n	80058d0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005750:	f7fd fab0 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8005754:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	2b00      	cmp	r3, #0
 800575c:	d044      	beq.n	80057e8 <UART_SetConfig+0xe50>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	2b01      	cmp	r3, #1
 8005764:	d03e      	beq.n	80057e4 <UART_SetConfig+0xe4c>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	2b02      	cmp	r3, #2
 800576c:	d038      	beq.n	80057e0 <UART_SetConfig+0xe48>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	2b03      	cmp	r3, #3
 8005774:	d032      	beq.n	80057dc <UART_SetConfig+0xe44>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b04      	cmp	r3, #4
 800577c:	d02c      	beq.n	80057d8 <UART_SetConfig+0xe40>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	2b05      	cmp	r3, #5
 8005784:	d026      	beq.n	80057d4 <UART_SetConfig+0xe3c>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	2b06      	cmp	r3, #6
 800578c:	d020      	beq.n	80057d0 <UART_SetConfig+0xe38>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	2b07      	cmp	r3, #7
 8005794:	d01a      	beq.n	80057cc <UART_SetConfig+0xe34>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	2b08      	cmp	r3, #8
 800579c:	d014      	beq.n	80057c8 <UART_SetConfig+0xe30>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	2b09      	cmp	r3, #9
 80057a4:	d00e      	beq.n	80057c4 <UART_SetConfig+0xe2c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	2b0a      	cmp	r3, #10
 80057ac:	d008      	beq.n	80057c0 <UART_SetConfig+0xe28>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	2b0b      	cmp	r3, #11
 80057b4:	d102      	bne.n	80057bc <UART_SetConfig+0xe24>
 80057b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057ba:	e016      	b.n	80057ea <UART_SetConfig+0xe52>
 80057bc:	2301      	movs	r3, #1
 80057be:	e014      	b.n	80057ea <UART_SetConfig+0xe52>
 80057c0:	2380      	movs	r3, #128	; 0x80
 80057c2:	e012      	b.n	80057ea <UART_SetConfig+0xe52>
 80057c4:	2340      	movs	r3, #64	; 0x40
 80057c6:	e010      	b.n	80057ea <UART_SetConfig+0xe52>
 80057c8:	2320      	movs	r3, #32
 80057ca:	e00e      	b.n	80057ea <UART_SetConfig+0xe52>
 80057cc:	2310      	movs	r3, #16
 80057ce:	e00c      	b.n	80057ea <UART_SetConfig+0xe52>
 80057d0:	230c      	movs	r3, #12
 80057d2:	e00a      	b.n	80057ea <UART_SetConfig+0xe52>
 80057d4:	230a      	movs	r3, #10
 80057d6:	e008      	b.n	80057ea <UART_SetConfig+0xe52>
 80057d8:	2308      	movs	r3, #8
 80057da:	e006      	b.n	80057ea <UART_SetConfig+0xe52>
 80057dc:	2306      	movs	r3, #6
 80057de:	e004      	b.n	80057ea <UART_SetConfig+0xe52>
 80057e0:	2304      	movs	r3, #4
 80057e2:	e002      	b.n	80057ea <UART_SetConfig+0xe52>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e000      	b.n	80057ea <UART_SetConfig+0xe52>
 80057e8:	2301      	movs	r3, #1
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f0:	005a      	lsls	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	085b      	lsrs	r3, r3, #1
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	b29b      	uxth	r3, r3
 8005804:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005806:	e063      	b.n	80058d0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	2b00      	cmp	r3, #0
 800580e:	d04f      	beq.n	80058b0 <UART_SetConfig+0xf18>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	2b01      	cmp	r3, #1
 8005816:	d048      	beq.n	80058aa <UART_SetConfig+0xf12>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	2b02      	cmp	r3, #2
 800581e:	d041      	beq.n	80058a4 <UART_SetConfig+0xf0c>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	2b03      	cmp	r3, #3
 8005826:	d03a      	beq.n	800589e <UART_SetConfig+0xf06>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	2b04      	cmp	r3, #4
 800582e:	d033      	beq.n	8005898 <UART_SetConfig+0xf00>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	2b05      	cmp	r3, #5
 8005836:	d02c      	beq.n	8005892 <UART_SetConfig+0xefa>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	2b06      	cmp	r3, #6
 800583e:	d025      	beq.n	800588c <UART_SetConfig+0xef4>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	2b07      	cmp	r3, #7
 8005846:	d01e      	beq.n	8005886 <UART_SetConfig+0xeee>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	2b08      	cmp	r3, #8
 800584e:	d017      	beq.n	8005880 <UART_SetConfig+0xee8>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	2b09      	cmp	r3, #9
 8005856:	d010      	beq.n	800587a <UART_SetConfig+0xee2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	2b0a      	cmp	r3, #10
 800585e:	d009      	beq.n	8005874 <UART_SetConfig+0xedc>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	2b0b      	cmp	r3, #11
 8005866:	d102      	bne.n	800586e <UART_SetConfig+0xed6>
 8005868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800586c:	e022      	b.n	80058b4 <UART_SetConfig+0xf1c>
 800586e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005872:	e01f      	b.n	80058b4 <UART_SetConfig+0xf1c>
 8005874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005878:	e01c      	b.n	80058b4 <UART_SetConfig+0xf1c>
 800587a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800587e:	e019      	b.n	80058b4 <UART_SetConfig+0xf1c>
 8005880:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005884:	e016      	b.n	80058b4 <UART_SetConfig+0xf1c>
 8005886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800588a:	e013      	b.n	80058b4 <UART_SetConfig+0xf1c>
 800588c:	f241 5354 	movw	r3, #5460	; 0x1554
 8005890:	e010      	b.n	80058b4 <UART_SetConfig+0xf1c>
 8005892:	f641 1398 	movw	r3, #6552	; 0x1998
 8005896:	e00d      	b.n	80058b4 <UART_SetConfig+0xf1c>
 8005898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800589c:	e00a      	b.n	80058b4 <UART_SetConfig+0xf1c>
 800589e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80058a2:	e007      	b.n	80058b4 <UART_SetConfig+0xf1c>
 80058a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058a8:	e004      	b.n	80058b4 <UART_SetConfig+0xf1c>
 80058aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ae:	e001      	b.n	80058b4 <UART_SetConfig+0xf1c>
 80058b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6852      	ldr	r2, [r2, #4]
 80058b8:	0852      	lsrs	r2, r2, #1
 80058ba:	441a      	add	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80058c8:	e002      	b.n	80058d0 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	76fb      	strb	r3, [r7, #27]
        break;
 80058ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	2b0f      	cmp	r3, #15
 80058d4:	d916      	bls.n	8005904 <UART_SetConfig+0xf6c>
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058dc:	d212      	bcs.n	8005904 <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f023 030f 	bic.w	r3, r3, #15
 80058e6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	085b      	lsrs	r3, r3, #1
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	89fb      	ldrh	r3, [r7, #14]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	89fa      	ldrh	r2, [r7, #14]
 8005900:	60da      	str	r2, [r3, #12]
 8005902:	e20c      	b.n	8005d1e <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	76fb      	strb	r3, [r7, #27]
 8005908:	e209      	b.n	8005d1e <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 800590a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800590e:	2b08      	cmp	r3, #8
 8005910:	f200 81f4 	bhi.w	8005cfc <UART_SetConfig+0x1364>
 8005914:	a201      	add	r2, pc, #4	; (adr r2, 800591c <UART_SetConfig+0xf84>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	08005971 	.word	0x08005971
 8005920:	08005a27 	.word	0x08005a27
 8005924:	08005add 	.word	0x08005add
 8005928:	08005cfd 	.word	0x08005cfd
 800592c:	08005b87 	.word	0x08005b87
 8005930:	08005cfd 	.word	0x08005cfd
 8005934:	08005cfd 	.word	0x08005cfd
 8005938:	08005cfd 	.word	0x08005cfd
 800593c:	08005c3d 	.word	0x08005c3d
 8005940:	0001e848 	.word	0x0001e848
 8005944:	01e84800 	.word	0x01e84800
 8005948:	0003d090 	.word	0x0003d090
 800594c:	0007a120 	.word	0x0007a120
 8005950:	000f4240 	.word	0x000f4240
 8005954:	001e8480 	.word	0x001e8480
 8005958:	0028b0aa 	.word	0x0028b0aa
 800595c:	0030d400 	.word	0x0030d400
 8005960:	003d0900 	.word	0x003d0900
 8005964:	00516154 	.word	0x00516154
 8005968:	007a1200 	.word	0x007a1200
 800596c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005970:	f7fd fa34 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 8005974:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	2b00      	cmp	r3, #0
 800597c:	d044      	beq.n	8005a08 <UART_SetConfig+0x1070>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b01      	cmp	r3, #1
 8005984:	d03e      	beq.n	8005a04 <UART_SetConfig+0x106c>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b02      	cmp	r3, #2
 800598c:	d038      	beq.n	8005a00 <UART_SetConfig+0x1068>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	2b03      	cmp	r3, #3
 8005994:	d032      	beq.n	80059fc <UART_SetConfig+0x1064>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b04      	cmp	r3, #4
 800599c:	d02c      	beq.n	80059f8 <UART_SetConfig+0x1060>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	2b05      	cmp	r3, #5
 80059a4:	d026      	beq.n	80059f4 <UART_SetConfig+0x105c>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	2b06      	cmp	r3, #6
 80059ac:	d020      	beq.n	80059f0 <UART_SetConfig+0x1058>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	2b07      	cmp	r3, #7
 80059b4:	d01a      	beq.n	80059ec <UART_SetConfig+0x1054>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d014      	beq.n	80059e8 <UART_SetConfig+0x1050>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	2b09      	cmp	r3, #9
 80059c4:	d00e      	beq.n	80059e4 <UART_SetConfig+0x104c>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	2b0a      	cmp	r3, #10
 80059cc:	d008      	beq.n	80059e0 <UART_SetConfig+0x1048>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	2b0b      	cmp	r3, #11
 80059d4:	d102      	bne.n	80059dc <UART_SetConfig+0x1044>
 80059d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059da:	e016      	b.n	8005a0a <UART_SetConfig+0x1072>
 80059dc:	2301      	movs	r3, #1
 80059de:	e014      	b.n	8005a0a <UART_SetConfig+0x1072>
 80059e0:	2380      	movs	r3, #128	; 0x80
 80059e2:	e012      	b.n	8005a0a <UART_SetConfig+0x1072>
 80059e4:	2340      	movs	r3, #64	; 0x40
 80059e6:	e010      	b.n	8005a0a <UART_SetConfig+0x1072>
 80059e8:	2320      	movs	r3, #32
 80059ea:	e00e      	b.n	8005a0a <UART_SetConfig+0x1072>
 80059ec:	2310      	movs	r3, #16
 80059ee:	e00c      	b.n	8005a0a <UART_SetConfig+0x1072>
 80059f0:	230c      	movs	r3, #12
 80059f2:	e00a      	b.n	8005a0a <UART_SetConfig+0x1072>
 80059f4:	230a      	movs	r3, #10
 80059f6:	e008      	b.n	8005a0a <UART_SetConfig+0x1072>
 80059f8:	2308      	movs	r3, #8
 80059fa:	e006      	b.n	8005a0a <UART_SetConfig+0x1072>
 80059fc:	2306      	movs	r3, #6
 80059fe:	e004      	b.n	8005a0a <UART_SetConfig+0x1072>
 8005a00:	2304      	movs	r3, #4
 8005a02:	e002      	b.n	8005a0a <UART_SetConfig+0x1072>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e000      	b.n	8005a0a <UART_SetConfig+0x1072>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	085b      	lsrs	r3, r3, #1
 8005a16:	441a      	add	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a24:	e16d      	b.n	8005d02 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a26:	f7fd f9ef 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 8005a2a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d044      	beq.n	8005abe <UART_SetConfig+0x1126>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d03e      	beq.n	8005aba <UART_SetConfig+0x1122>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d038      	beq.n	8005ab6 <UART_SetConfig+0x111e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d032      	beq.n	8005ab2 <UART_SetConfig+0x111a>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d02c      	beq.n	8005aae <UART_SetConfig+0x1116>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	2b05      	cmp	r3, #5
 8005a5a:	d026      	beq.n	8005aaa <UART_SetConfig+0x1112>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	2b06      	cmp	r3, #6
 8005a62:	d020      	beq.n	8005aa6 <UART_SetConfig+0x110e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	2b07      	cmp	r3, #7
 8005a6a:	d01a      	beq.n	8005aa2 <UART_SetConfig+0x110a>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d014      	beq.n	8005a9e <UART_SetConfig+0x1106>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	2b09      	cmp	r3, #9
 8005a7a:	d00e      	beq.n	8005a9a <UART_SetConfig+0x1102>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	2b0a      	cmp	r3, #10
 8005a82:	d008      	beq.n	8005a96 <UART_SetConfig+0x10fe>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	2b0b      	cmp	r3, #11
 8005a8a:	d102      	bne.n	8005a92 <UART_SetConfig+0x10fa>
 8005a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a90:	e016      	b.n	8005ac0 <UART_SetConfig+0x1128>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e014      	b.n	8005ac0 <UART_SetConfig+0x1128>
 8005a96:	2380      	movs	r3, #128	; 0x80
 8005a98:	e012      	b.n	8005ac0 <UART_SetConfig+0x1128>
 8005a9a:	2340      	movs	r3, #64	; 0x40
 8005a9c:	e010      	b.n	8005ac0 <UART_SetConfig+0x1128>
 8005a9e:	2320      	movs	r3, #32
 8005aa0:	e00e      	b.n	8005ac0 <UART_SetConfig+0x1128>
 8005aa2:	2310      	movs	r3, #16
 8005aa4:	e00c      	b.n	8005ac0 <UART_SetConfig+0x1128>
 8005aa6:	230c      	movs	r3, #12
 8005aa8:	e00a      	b.n	8005ac0 <UART_SetConfig+0x1128>
 8005aaa:	230a      	movs	r3, #10
 8005aac:	e008      	b.n	8005ac0 <UART_SetConfig+0x1128>
 8005aae:	2308      	movs	r3, #8
 8005ab0:	e006      	b.n	8005ac0 <UART_SetConfig+0x1128>
 8005ab2:	2306      	movs	r3, #6
 8005ab4:	e004      	b.n	8005ac0 <UART_SetConfig+0x1128>
 8005ab6:	2304      	movs	r3, #4
 8005ab8:	e002      	b.n	8005ac0 <UART_SetConfig+0x1128>
 8005aba:	2302      	movs	r3, #2
 8005abc:	e000      	b.n	8005ac0 <UART_SetConfig+0x1128>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	085b      	lsrs	r3, r3, #1
 8005acc:	441a      	add	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ada:	e112      	b.n	8005d02 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d044      	beq.n	8005b6e <UART_SetConfig+0x11d6>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d03e      	beq.n	8005b6a <UART_SetConfig+0x11d2>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d038      	beq.n	8005b66 <UART_SetConfig+0x11ce>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d032      	beq.n	8005b62 <UART_SetConfig+0x11ca>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d02c      	beq.n	8005b5e <UART_SetConfig+0x11c6>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2b05      	cmp	r3, #5
 8005b0a:	d026      	beq.n	8005b5a <UART_SetConfig+0x11c2>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	2b06      	cmp	r3, #6
 8005b12:	d020      	beq.n	8005b56 <UART_SetConfig+0x11be>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	2b07      	cmp	r3, #7
 8005b1a:	d01a      	beq.n	8005b52 <UART_SetConfig+0x11ba>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d014      	beq.n	8005b4e <UART_SetConfig+0x11b6>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	2b09      	cmp	r3, #9
 8005b2a:	d00e      	beq.n	8005b4a <UART_SetConfig+0x11b2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	2b0a      	cmp	r3, #10
 8005b32:	d008      	beq.n	8005b46 <UART_SetConfig+0x11ae>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	2b0b      	cmp	r3, #11
 8005b3a:	d102      	bne.n	8005b42 <UART_SetConfig+0x11aa>
 8005b3c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005b40:	e016      	b.n	8005b70 <UART_SetConfig+0x11d8>
 8005b42:	4b81      	ldr	r3, [pc, #516]	; (8005d48 <UART_SetConfig+0x13b0>)
 8005b44:	e014      	b.n	8005b70 <UART_SetConfig+0x11d8>
 8005b46:	4b81      	ldr	r3, [pc, #516]	; (8005d4c <UART_SetConfig+0x13b4>)
 8005b48:	e012      	b.n	8005b70 <UART_SetConfig+0x11d8>
 8005b4a:	4b81      	ldr	r3, [pc, #516]	; (8005d50 <UART_SetConfig+0x13b8>)
 8005b4c:	e010      	b.n	8005b70 <UART_SetConfig+0x11d8>
 8005b4e:	4b81      	ldr	r3, [pc, #516]	; (8005d54 <UART_SetConfig+0x13bc>)
 8005b50:	e00e      	b.n	8005b70 <UART_SetConfig+0x11d8>
 8005b52:	4b81      	ldr	r3, [pc, #516]	; (8005d58 <UART_SetConfig+0x13c0>)
 8005b54:	e00c      	b.n	8005b70 <UART_SetConfig+0x11d8>
 8005b56:	4b81      	ldr	r3, [pc, #516]	; (8005d5c <UART_SetConfig+0x13c4>)
 8005b58:	e00a      	b.n	8005b70 <UART_SetConfig+0x11d8>
 8005b5a:	4b81      	ldr	r3, [pc, #516]	; (8005d60 <UART_SetConfig+0x13c8>)
 8005b5c:	e008      	b.n	8005b70 <UART_SetConfig+0x11d8>
 8005b5e:	4b81      	ldr	r3, [pc, #516]	; (8005d64 <UART_SetConfig+0x13cc>)
 8005b60:	e006      	b.n	8005b70 <UART_SetConfig+0x11d8>
 8005b62:	4b81      	ldr	r3, [pc, #516]	; (8005d68 <UART_SetConfig+0x13d0>)
 8005b64:	e004      	b.n	8005b70 <UART_SetConfig+0x11d8>
 8005b66:	4b81      	ldr	r3, [pc, #516]	; (8005d6c <UART_SetConfig+0x13d4>)
 8005b68:	e002      	b.n	8005b70 <UART_SetConfig+0x11d8>
 8005b6a:	4b81      	ldr	r3, [pc, #516]	; (8005d70 <UART_SetConfig+0x13d8>)
 8005b6c:	e000      	b.n	8005b70 <UART_SetConfig+0x11d8>
 8005b6e:	4b76      	ldr	r3, [pc, #472]	; (8005d48 <UART_SetConfig+0x13b0>)
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6852      	ldr	r2, [r2, #4]
 8005b74:	0852      	lsrs	r2, r2, #1
 8005b76:	441a      	add	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b84:	e0bd      	b.n	8005d02 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b86:	f7fd f895 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8005b8a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d044      	beq.n	8005c1e <UART_SetConfig+0x1286>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d03e      	beq.n	8005c1a <UART_SetConfig+0x1282>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d038      	beq.n	8005c16 <UART_SetConfig+0x127e>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d032      	beq.n	8005c12 <UART_SetConfig+0x127a>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d02c      	beq.n	8005c0e <UART_SetConfig+0x1276>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	2b05      	cmp	r3, #5
 8005bba:	d026      	beq.n	8005c0a <UART_SetConfig+0x1272>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	2b06      	cmp	r3, #6
 8005bc2:	d020      	beq.n	8005c06 <UART_SetConfig+0x126e>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	2b07      	cmp	r3, #7
 8005bca:	d01a      	beq.n	8005c02 <UART_SetConfig+0x126a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d014      	beq.n	8005bfe <UART_SetConfig+0x1266>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	2b09      	cmp	r3, #9
 8005bda:	d00e      	beq.n	8005bfa <UART_SetConfig+0x1262>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	2b0a      	cmp	r3, #10
 8005be2:	d008      	beq.n	8005bf6 <UART_SetConfig+0x125e>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	2b0b      	cmp	r3, #11
 8005bea:	d102      	bne.n	8005bf2 <UART_SetConfig+0x125a>
 8005bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bf0:	e016      	b.n	8005c20 <UART_SetConfig+0x1288>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e014      	b.n	8005c20 <UART_SetConfig+0x1288>
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	e012      	b.n	8005c20 <UART_SetConfig+0x1288>
 8005bfa:	2340      	movs	r3, #64	; 0x40
 8005bfc:	e010      	b.n	8005c20 <UART_SetConfig+0x1288>
 8005bfe:	2320      	movs	r3, #32
 8005c00:	e00e      	b.n	8005c20 <UART_SetConfig+0x1288>
 8005c02:	2310      	movs	r3, #16
 8005c04:	e00c      	b.n	8005c20 <UART_SetConfig+0x1288>
 8005c06:	230c      	movs	r3, #12
 8005c08:	e00a      	b.n	8005c20 <UART_SetConfig+0x1288>
 8005c0a:	230a      	movs	r3, #10
 8005c0c:	e008      	b.n	8005c20 <UART_SetConfig+0x1288>
 8005c0e:	2308      	movs	r3, #8
 8005c10:	e006      	b.n	8005c20 <UART_SetConfig+0x1288>
 8005c12:	2306      	movs	r3, #6
 8005c14:	e004      	b.n	8005c20 <UART_SetConfig+0x1288>
 8005c16:	2304      	movs	r3, #4
 8005c18:	e002      	b.n	8005c20 <UART_SetConfig+0x1288>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e000      	b.n	8005c20 <UART_SetConfig+0x1288>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	085b      	lsrs	r3, r3, #1
 8005c2c:	441a      	add	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c3a:	e062      	b.n	8005d02 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d04e      	beq.n	8005ce2 <UART_SetConfig+0x134a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d047      	beq.n	8005cdc <UART_SetConfig+0x1344>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d040      	beq.n	8005cd6 <UART_SetConfig+0x133e>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d039      	beq.n	8005cd0 <UART_SetConfig+0x1338>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d032      	beq.n	8005cca <UART_SetConfig+0x1332>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	2b05      	cmp	r3, #5
 8005c6a:	d02b      	beq.n	8005cc4 <UART_SetConfig+0x132c>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	2b06      	cmp	r3, #6
 8005c72:	d024      	beq.n	8005cbe <UART_SetConfig+0x1326>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	2b07      	cmp	r3, #7
 8005c7a:	d01d      	beq.n	8005cb8 <UART_SetConfig+0x1320>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d016      	beq.n	8005cb2 <UART_SetConfig+0x131a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2b09      	cmp	r3, #9
 8005c8a:	d00f      	beq.n	8005cac <UART_SetConfig+0x1314>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2b0a      	cmp	r3, #10
 8005c92:	d008      	beq.n	8005ca6 <UART_SetConfig+0x130e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	2b0b      	cmp	r3, #11
 8005c9a:	d101      	bne.n	8005ca0 <UART_SetConfig+0x1308>
 8005c9c:	2380      	movs	r3, #128	; 0x80
 8005c9e:	e022      	b.n	8005ce6 <UART_SetConfig+0x134e>
 8005ca0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ca4:	e01f      	b.n	8005ce6 <UART_SetConfig+0x134e>
 8005ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005caa:	e01c      	b.n	8005ce6 <UART_SetConfig+0x134e>
 8005cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cb0:	e019      	b.n	8005ce6 <UART_SetConfig+0x134e>
 8005cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cb6:	e016      	b.n	8005ce6 <UART_SetConfig+0x134e>
 8005cb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cbc:	e013      	b.n	8005ce6 <UART_SetConfig+0x134e>
 8005cbe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005cc2:	e010      	b.n	8005ce6 <UART_SetConfig+0x134e>
 8005cc4:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005cc8:	e00d      	b.n	8005ce6 <UART_SetConfig+0x134e>
 8005cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cce:	e00a      	b.n	8005ce6 <UART_SetConfig+0x134e>
 8005cd0:	f241 5355 	movw	r3, #5461	; 0x1555
 8005cd4:	e007      	b.n	8005ce6 <UART_SetConfig+0x134e>
 8005cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cda:	e004      	b.n	8005ce6 <UART_SetConfig+0x134e>
 8005cdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ce0:	e001      	b.n	8005ce6 <UART_SetConfig+0x134e>
 8005ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6852      	ldr	r2, [r2, #4]
 8005cea:	0852      	lsrs	r2, r2, #1
 8005cec:	441a      	add	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005cfa:	e002      	b.n	8005d02 <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	76fb      	strb	r3, [r7, #27]
        break;
 8005d00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	2b0f      	cmp	r3, #15
 8005d06:	d908      	bls.n	8005d1a <UART_SetConfig+0x1382>
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0e:	d204      	bcs.n	8005d1a <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	60da      	str	r2, [r3, #12]
 8005d18:	e001      	b.n	8005d1e <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	76fb      	strb	r3, [r7, #27]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005d3a:	7efb      	ldrb	r3, [r7, #27]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3728      	adds	r7, #40	; 0x28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005d46:	bf00      	nop
 8005d48:	00f42400 	.word	0x00f42400
 8005d4c:	0001e848 	.word	0x0001e848
 8005d50:	0003d090 	.word	0x0003d090
 8005d54:	0007a120 	.word	0x0007a120
 8005d58:	000f4240 	.word	0x000f4240
 8005d5c:	00145855 	.word	0x00145855
 8005d60:	00186a00 	.word	0x00186a00
 8005d64:	001e8480 	.word	0x001e8480
 8005d68:	0028b0aa 	.word	0x0028b0aa
 8005d6c:	003d0900 	.word	0x003d0900
 8005d70:	007a1200 	.word	0x007a1200

08005d74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	f003 0310 	and.w	r3, r3, #16
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01a      	beq.n	8005e8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e72:	d10a      	bne.n	8005e8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	605a      	str	r2, [r3, #4]
  }
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005ec8:	f7fb fe20 	bl	8001b0c <HAL_GetTick>
 8005ecc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d10e      	bne.n	8005efa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f82c 	bl	8005f48 <UART_WaitOnFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e022      	b.n	8005f40 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d10e      	bne.n	8005f26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f816 	bl	8005f48 <UART_WaitOnFlagUntilTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e00c      	b.n	8005f40 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	4613      	mov	r3, r2
 8005f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f58:	e062      	b.n	8006020 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d05e      	beq.n	8006020 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f62:	f7fb fdd3 	bl	8001b0c <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d302      	bcc.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d11d      	bne.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f86:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0201 	bic.w	r2, r2, #1
 8005f96:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e045      	b.n	8006040 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d02e      	beq.n	8006020 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fd0:	d126      	bne.n	8006020 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fda:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fea:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0201 	bic.w	r2, r2, #1
 8005ffa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e00f      	b.n	8006040 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69da      	ldr	r2, [r3, #28]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	4013      	ands	r3, r2
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	429a      	cmp	r2, r3
 800602e:	bf0c      	ite	eq
 8006030:	2301      	moveq	r3, #1
 8006032:	2300      	movne	r3, #0
 8006034:	b2db      	uxtb	r3, r3
 8006036:	461a      	mov	r2, r3
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	429a      	cmp	r2, r3
 800603c:	d08d      	beq.n	8005f5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_UARTEx_DisableFifoMode+0x16>
 800605a:	2302      	movs	r3, #2
 800605c:	e027      	b.n	80060ae <HAL_UARTEx_DisableFifoMode+0x66>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2224      	movs	r2, #36	; 0x24
 800606a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0201 	bic.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800608c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e02d      	b.n	800612e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2224      	movs	r2, #36	; 0x24
 80060de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f850 	bl	80061b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2220      	movs	r2, #32
 8006120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800614a:	2302      	movs	r3, #2
 800614c:	e02d      	b.n	80061aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2224      	movs	r2, #36	; 0x24
 800615a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f812 	bl	80061b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
	...

080061b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b089      	sub	sp, #36	; 0x24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80061bc:	4a2f      	ldr	r2, [pc, #188]	; (800627c <UARTEx_SetNbDataToProcess+0xc8>)
 80061be:	f107 0314 	add.w	r3, r7, #20
 80061c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061c6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80061ca:	4a2d      	ldr	r2, [pc, #180]	; (8006280 <UARTEx_SetNbDataToProcess+0xcc>)
 80061cc:	f107 030c 	add.w	r3, r7, #12
 80061d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061d4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d108      	bne.n	80061f2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061f0:	e03d      	b.n	800626e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061f2:	2308      	movs	r3, #8
 80061f4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061f6:	2308      	movs	r3, #8
 80061f8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	0e5b      	lsrs	r3, r3, #25
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	0f5b      	lsrs	r3, r3, #29
 8006212:	b2db      	uxtb	r3, r3
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800621a:	7fbb      	ldrb	r3, [r7, #30]
 800621c:	7f3a      	ldrb	r2, [r7, #28]
 800621e:	f107 0120 	add.w	r1, r7, #32
 8006222:	440a      	add	r2, r1
 8006224:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006228:	fb02 f303 	mul.w	r3, r2, r3
 800622c:	7f3a      	ldrb	r2, [r7, #28]
 800622e:	f107 0120 	add.w	r1, r7, #32
 8006232:	440a      	add	r2, r1
 8006234:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006238:	fb93 f3f2 	sdiv	r3, r3, r2
 800623c:	b29a      	uxth	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006244:	7ffb      	ldrb	r3, [r7, #31]
 8006246:	7f7a      	ldrb	r2, [r7, #29]
 8006248:	f107 0120 	add.w	r1, r7, #32
 800624c:	440a      	add	r2, r1
 800624e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	7f7a      	ldrb	r2, [r7, #29]
 8006258:	f107 0120 	add.w	r1, r7, #32
 800625c:	440a      	add	r2, r1
 800625e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006262:	fb93 f3f2 	sdiv	r3, r3, r2
 8006266:	b29a      	uxth	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800626e:	bf00      	nop
 8006270:	3724      	adds	r7, #36	; 0x24
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	08006c44 	.word	0x08006c44
 8006280:	08006c4c 	.word	0x08006c4c

08006284 <__errno>:
 8006284:	4b01      	ldr	r3, [pc, #4]	; (800628c <__errno+0x8>)
 8006286:	6818      	ldr	r0, [r3, #0]
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	20000018 	.word	0x20000018

08006290 <__libc_init_array>:
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	4e0d      	ldr	r6, [pc, #52]	; (80062c8 <__libc_init_array+0x38>)
 8006294:	4c0d      	ldr	r4, [pc, #52]	; (80062cc <__libc_init_array+0x3c>)
 8006296:	1ba4      	subs	r4, r4, r6
 8006298:	10a4      	asrs	r4, r4, #2
 800629a:	2500      	movs	r5, #0
 800629c:	42a5      	cmp	r5, r4
 800629e:	d109      	bne.n	80062b4 <__libc_init_array+0x24>
 80062a0:	4e0b      	ldr	r6, [pc, #44]	; (80062d0 <__libc_init_array+0x40>)
 80062a2:	4c0c      	ldr	r4, [pc, #48]	; (80062d4 <__libc_init_array+0x44>)
 80062a4:	f000 fc28 	bl	8006af8 <_init>
 80062a8:	1ba4      	subs	r4, r4, r6
 80062aa:	10a4      	asrs	r4, r4, #2
 80062ac:	2500      	movs	r5, #0
 80062ae:	42a5      	cmp	r5, r4
 80062b0:	d105      	bne.n	80062be <__libc_init_array+0x2e>
 80062b2:	bd70      	pop	{r4, r5, r6, pc}
 80062b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062b8:	4798      	blx	r3
 80062ba:	3501      	adds	r5, #1
 80062bc:	e7ee      	b.n	800629c <__libc_init_array+0xc>
 80062be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062c2:	4798      	blx	r3
 80062c4:	3501      	adds	r5, #1
 80062c6:	e7f2      	b.n	80062ae <__libc_init_array+0x1e>
 80062c8:	08006ce8 	.word	0x08006ce8
 80062cc:	08006ce8 	.word	0x08006ce8
 80062d0:	08006ce8 	.word	0x08006ce8
 80062d4:	08006cec 	.word	0x08006cec

080062d8 <memcpy>:
 80062d8:	b510      	push	{r4, lr}
 80062da:	1e43      	subs	r3, r0, #1
 80062dc:	440a      	add	r2, r1
 80062de:	4291      	cmp	r1, r2
 80062e0:	d100      	bne.n	80062e4 <memcpy+0xc>
 80062e2:	bd10      	pop	{r4, pc}
 80062e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ec:	e7f7      	b.n	80062de <memcpy+0x6>

080062ee <memset>:
 80062ee:	4402      	add	r2, r0
 80062f0:	4603      	mov	r3, r0
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d100      	bne.n	80062f8 <memset+0xa>
 80062f6:	4770      	bx	lr
 80062f8:	f803 1b01 	strb.w	r1, [r3], #1
 80062fc:	e7f9      	b.n	80062f2 <memset+0x4>
	...

08006300 <siprintf>:
 8006300:	b40e      	push	{r1, r2, r3}
 8006302:	b500      	push	{lr}
 8006304:	b09c      	sub	sp, #112	; 0x70
 8006306:	ab1d      	add	r3, sp, #116	; 0x74
 8006308:	9002      	str	r0, [sp, #8]
 800630a:	9006      	str	r0, [sp, #24]
 800630c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006310:	4809      	ldr	r0, [pc, #36]	; (8006338 <siprintf+0x38>)
 8006312:	9107      	str	r1, [sp, #28]
 8006314:	9104      	str	r1, [sp, #16]
 8006316:	4909      	ldr	r1, [pc, #36]	; (800633c <siprintf+0x3c>)
 8006318:	f853 2b04 	ldr.w	r2, [r3], #4
 800631c:	9105      	str	r1, [sp, #20]
 800631e:	6800      	ldr	r0, [r0, #0]
 8006320:	9301      	str	r3, [sp, #4]
 8006322:	a902      	add	r1, sp, #8
 8006324:	f000 f866 	bl	80063f4 <_svfiprintf_r>
 8006328:	9b02      	ldr	r3, [sp, #8]
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	b01c      	add	sp, #112	; 0x70
 8006330:	f85d eb04 	ldr.w	lr, [sp], #4
 8006334:	b003      	add	sp, #12
 8006336:	4770      	bx	lr
 8006338:	20000018 	.word	0x20000018
 800633c:	ffff0208 	.word	0xffff0208

08006340 <__ssputs_r>:
 8006340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006344:	688e      	ldr	r6, [r1, #8]
 8006346:	429e      	cmp	r6, r3
 8006348:	4682      	mov	sl, r0
 800634a:	460c      	mov	r4, r1
 800634c:	4690      	mov	r8, r2
 800634e:	4699      	mov	r9, r3
 8006350:	d837      	bhi.n	80063c2 <__ssputs_r+0x82>
 8006352:	898a      	ldrh	r2, [r1, #12]
 8006354:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006358:	d031      	beq.n	80063be <__ssputs_r+0x7e>
 800635a:	6825      	ldr	r5, [r4, #0]
 800635c:	6909      	ldr	r1, [r1, #16]
 800635e:	1a6f      	subs	r7, r5, r1
 8006360:	6965      	ldr	r5, [r4, #20]
 8006362:	2302      	movs	r3, #2
 8006364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006368:	fb95 f5f3 	sdiv	r5, r5, r3
 800636c:	f109 0301 	add.w	r3, r9, #1
 8006370:	443b      	add	r3, r7
 8006372:	429d      	cmp	r5, r3
 8006374:	bf38      	it	cc
 8006376:	461d      	movcc	r5, r3
 8006378:	0553      	lsls	r3, r2, #21
 800637a:	d530      	bpl.n	80063de <__ssputs_r+0x9e>
 800637c:	4629      	mov	r1, r5
 800637e:	f000 fb21 	bl	80069c4 <_malloc_r>
 8006382:	4606      	mov	r6, r0
 8006384:	b950      	cbnz	r0, 800639c <__ssputs_r+0x5c>
 8006386:	230c      	movs	r3, #12
 8006388:	f8ca 3000 	str.w	r3, [sl]
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006392:	81a3      	strh	r3, [r4, #12]
 8006394:	f04f 30ff 	mov.w	r0, #4294967295
 8006398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639c:	463a      	mov	r2, r7
 800639e:	6921      	ldr	r1, [r4, #16]
 80063a0:	f7ff ff9a 	bl	80062d8 <memcpy>
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ae:	81a3      	strh	r3, [r4, #12]
 80063b0:	6126      	str	r6, [r4, #16]
 80063b2:	6165      	str	r5, [r4, #20]
 80063b4:	443e      	add	r6, r7
 80063b6:	1bed      	subs	r5, r5, r7
 80063b8:	6026      	str	r6, [r4, #0]
 80063ba:	60a5      	str	r5, [r4, #8]
 80063bc:	464e      	mov	r6, r9
 80063be:	454e      	cmp	r6, r9
 80063c0:	d900      	bls.n	80063c4 <__ssputs_r+0x84>
 80063c2:	464e      	mov	r6, r9
 80063c4:	4632      	mov	r2, r6
 80063c6:	4641      	mov	r1, r8
 80063c8:	6820      	ldr	r0, [r4, #0]
 80063ca:	f000 fa93 	bl	80068f4 <memmove>
 80063ce:	68a3      	ldr	r3, [r4, #8]
 80063d0:	1b9b      	subs	r3, r3, r6
 80063d2:	60a3      	str	r3, [r4, #8]
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	441e      	add	r6, r3
 80063d8:	6026      	str	r6, [r4, #0]
 80063da:	2000      	movs	r0, #0
 80063dc:	e7dc      	b.n	8006398 <__ssputs_r+0x58>
 80063de:	462a      	mov	r2, r5
 80063e0:	f000 fb4a 	bl	8006a78 <_realloc_r>
 80063e4:	4606      	mov	r6, r0
 80063e6:	2800      	cmp	r0, #0
 80063e8:	d1e2      	bne.n	80063b0 <__ssputs_r+0x70>
 80063ea:	6921      	ldr	r1, [r4, #16]
 80063ec:	4650      	mov	r0, sl
 80063ee:	f000 fa9b 	bl	8006928 <_free_r>
 80063f2:	e7c8      	b.n	8006386 <__ssputs_r+0x46>

080063f4 <_svfiprintf_r>:
 80063f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f8:	461d      	mov	r5, r3
 80063fa:	898b      	ldrh	r3, [r1, #12]
 80063fc:	061f      	lsls	r7, r3, #24
 80063fe:	b09d      	sub	sp, #116	; 0x74
 8006400:	4680      	mov	r8, r0
 8006402:	460c      	mov	r4, r1
 8006404:	4616      	mov	r6, r2
 8006406:	d50f      	bpl.n	8006428 <_svfiprintf_r+0x34>
 8006408:	690b      	ldr	r3, [r1, #16]
 800640a:	b96b      	cbnz	r3, 8006428 <_svfiprintf_r+0x34>
 800640c:	2140      	movs	r1, #64	; 0x40
 800640e:	f000 fad9 	bl	80069c4 <_malloc_r>
 8006412:	6020      	str	r0, [r4, #0]
 8006414:	6120      	str	r0, [r4, #16]
 8006416:	b928      	cbnz	r0, 8006424 <_svfiprintf_r+0x30>
 8006418:	230c      	movs	r3, #12
 800641a:	f8c8 3000 	str.w	r3, [r8]
 800641e:	f04f 30ff 	mov.w	r0, #4294967295
 8006422:	e0c8      	b.n	80065b6 <_svfiprintf_r+0x1c2>
 8006424:	2340      	movs	r3, #64	; 0x40
 8006426:	6163      	str	r3, [r4, #20]
 8006428:	2300      	movs	r3, #0
 800642a:	9309      	str	r3, [sp, #36]	; 0x24
 800642c:	2320      	movs	r3, #32
 800642e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006432:	2330      	movs	r3, #48	; 0x30
 8006434:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006438:	9503      	str	r5, [sp, #12]
 800643a:	f04f 0b01 	mov.w	fp, #1
 800643e:	4637      	mov	r7, r6
 8006440:	463d      	mov	r5, r7
 8006442:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006446:	b10b      	cbz	r3, 800644c <_svfiprintf_r+0x58>
 8006448:	2b25      	cmp	r3, #37	; 0x25
 800644a:	d13e      	bne.n	80064ca <_svfiprintf_r+0xd6>
 800644c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006450:	d00b      	beq.n	800646a <_svfiprintf_r+0x76>
 8006452:	4653      	mov	r3, sl
 8006454:	4632      	mov	r2, r6
 8006456:	4621      	mov	r1, r4
 8006458:	4640      	mov	r0, r8
 800645a:	f7ff ff71 	bl	8006340 <__ssputs_r>
 800645e:	3001      	adds	r0, #1
 8006460:	f000 80a4 	beq.w	80065ac <_svfiprintf_r+0x1b8>
 8006464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006466:	4453      	add	r3, sl
 8006468:	9309      	str	r3, [sp, #36]	; 0x24
 800646a:	783b      	ldrb	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 809d 	beq.w	80065ac <_svfiprintf_r+0x1b8>
 8006472:	2300      	movs	r3, #0
 8006474:	f04f 32ff 	mov.w	r2, #4294967295
 8006478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800647c:	9304      	str	r3, [sp, #16]
 800647e:	9307      	str	r3, [sp, #28]
 8006480:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006484:	931a      	str	r3, [sp, #104]	; 0x68
 8006486:	462f      	mov	r7, r5
 8006488:	2205      	movs	r2, #5
 800648a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800648e:	4850      	ldr	r0, [pc, #320]	; (80065d0 <_svfiprintf_r+0x1dc>)
 8006490:	f7f9 febe 	bl	8000210 <memchr>
 8006494:	9b04      	ldr	r3, [sp, #16]
 8006496:	b9d0      	cbnz	r0, 80064ce <_svfiprintf_r+0xda>
 8006498:	06d9      	lsls	r1, r3, #27
 800649a:	bf44      	itt	mi
 800649c:	2220      	movmi	r2, #32
 800649e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064a2:	071a      	lsls	r2, r3, #28
 80064a4:	bf44      	itt	mi
 80064a6:	222b      	movmi	r2, #43	; 0x2b
 80064a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064ac:	782a      	ldrb	r2, [r5, #0]
 80064ae:	2a2a      	cmp	r2, #42	; 0x2a
 80064b0:	d015      	beq.n	80064de <_svfiprintf_r+0xea>
 80064b2:	9a07      	ldr	r2, [sp, #28]
 80064b4:	462f      	mov	r7, r5
 80064b6:	2000      	movs	r0, #0
 80064b8:	250a      	movs	r5, #10
 80064ba:	4639      	mov	r1, r7
 80064bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064c0:	3b30      	subs	r3, #48	; 0x30
 80064c2:	2b09      	cmp	r3, #9
 80064c4:	d94d      	bls.n	8006562 <_svfiprintf_r+0x16e>
 80064c6:	b1b8      	cbz	r0, 80064f8 <_svfiprintf_r+0x104>
 80064c8:	e00f      	b.n	80064ea <_svfiprintf_r+0xf6>
 80064ca:	462f      	mov	r7, r5
 80064cc:	e7b8      	b.n	8006440 <_svfiprintf_r+0x4c>
 80064ce:	4a40      	ldr	r2, [pc, #256]	; (80065d0 <_svfiprintf_r+0x1dc>)
 80064d0:	1a80      	subs	r0, r0, r2
 80064d2:	fa0b f000 	lsl.w	r0, fp, r0
 80064d6:	4318      	orrs	r0, r3
 80064d8:	9004      	str	r0, [sp, #16]
 80064da:	463d      	mov	r5, r7
 80064dc:	e7d3      	b.n	8006486 <_svfiprintf_r+0x92>
 80064de:	9a03      	ldr	r2, [sp, #12]
 80064e0:	1d11      	adds	r1, r2, #4
 80064e2:	6812      	ldr	r2, [r2, #0]
 80064e4:	9103      	str	r1, [sp, #12]
 80064e6:	2a00      	cmp	r2, #0
 80064e8:	db01      	blt.n	80064ee <_svfiprintf_r+0xfa>
 80064ea:	9207      	str	r2, [sp, #28]
 80064ec:	e004      	b.n	80064f8 <_svfiprintf_r+0x104>
 80064ee:	4252      	negs	r2, r2
 80064f0:	f043 0302 	orr.w	r3, r3, #2
 80064f4:	9207      	str	r2, [sp, #28]
 80064f6:	9304      	str	r3, [sp, #16]
 80064f8:	783b      	ldrb	r3, [r7, #0]
 80064fa:	2b2e      	cmp	r3, #46	; 0x2e
 80064fc:	d10c      	bne.n	8006518 <_svfiprintf_r+0x124>
 80064fe:	787b      	ldrb	r3, [r7, #1]
 8006500:	2b2a      	cmp	r3, #42	; 0x2a
 8006502:	d133      	bne.n	800656c <_svfiprintf_r+0x178>
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	1d1a      	adds	r2, r3, #4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	9203      	str	r2, [sp, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	bfb8      	it	lt
 8006510:	f04f 33ff 	movlt.w	r3, #4294967295
 8006514:	3702      	adds	r7, #2
 8006516:	9305      	str	r3, [sp, #20]
 8006518:	4d2e      	ldr	r5, [pc, #184]	; (80065d4 <_svfiprintf_r+0x1e0>)
 800651a:	7839      	ldrb	r1, [r7, #0]
 800651c:	2203      	movs	r2, #3
 800651e:	4628      	mov	r0, r5
 8006520:	f7f9 fe76 	bl	8000210 <memchr>
 8006524:	b138      	cbz	r0, 8006536 <_svfiprintf_r+0x142>
 8006526:	2340      	movs	r3, #64	; 0x40
 8006528:	1b40      	subs	r0, r0, r5
 800652a:	fa03 f000 	lsl.w	r0, r3, r0
 800652e:	9b04      	ldr	r3, [sp, #16]
 8006530:	4303      	orrs	r3, r0
 8006532:	3701      	adds	r7, #1
 8006534:	9304      	str	r3, [sp, #16]
 8006536:	7839      	ldrb	r1, [r7, #0]
 8006538:	4827      	ldr	r0, [pc, #156]	; (80065d8 <_svfiprintf_r+0x1e4>)
 800653a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800653e:	2206      	movs	r2, #6
 8006540:	1c7e      	adds	r6, r7, #1
 8006542:	f7f9 fe65 	bl	8000210 <memchr>
 8006546:	2800      	cmp	r0, #0
 8006548:	d038      	beq.n	80065bc <_svfiprintf_r+0x1c8>
 800654a:	4b24      	ldr	r3, [pc, #144]	; (80065dc <_svfiprintf_r+0x1e8>)
 800654c:	bb13      	cbnz	r3, 8006594 <_svfiprintf_r+0x1a0>
 800654e:	9b03      	ldr	r3, [sp, #12]
 8006550:	3307      	adds	r3, #7
 8006552:	f023 0307 	bic.w	r3, r3, #7
 8006556:	3308      	adds	r3, #8
 8006558:	9303      	str	r3, [sp, #12]
 800655a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800655c:	444b      	add	r3, r9
 800655e:	9309      	str	r3, [sp, #36]	; 0x24
 8006560:	e76d      	b.n	800643e <_svfiprintf_r+0x4a>
 8006562:	fb05 3202 	mla	r2, r5, r2, r3
 8006566:	2001      	movs	r0, #1
 8006568:	460f      	mov	r7, r1
 800656a:	e7a6      	b.n	80064ba <_svfiprintf_r+0xc6>
 800656c:	2300      	movs	r3, #0
 800656e:	3701      	adds	r7, #1
 8006570:	9305      	str	r3, [sp, #20]
 8006572:	4619      	mov	r1, r3
 8006574:	250a      	movs	r5, #10
 8006576:	4638      	mov	r0, r7
 8006578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800657c:	3a30      	subs	r2, #48	; 0x30
 800657e:	2a09      	cmp	r2, #9
 8006580:	d903      	bls.n	800658a <_svfiprintf_r+0x196>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0c8      	beq.n	8006518 <_svfiprintf_r+0x124>
 8006586:	9105      	str	r1, [sp, #20]
 8006588:	e7c6      	b.n	8006518 <_svfiprintf_r+0x124>
 800658a:	fb05 2101 	mla	r1, r5, r1, r2
 800658e:	2301      	movs	r3, #1
 8006590:	4607      	mov	r7, r0
 8006592:	e7f0      	b.n	8006576 <_svfiprintf_r+0x182>
 8006594:	ab03      	add	r3, sp, #12
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	4622      	mov	r2, r4
 800659a:	4b11      	ldr	r3, [pc, #68]	; (80065e0 <_svfiprintf_r+0x1ec>)
 800659c:	a904      	add	r1, sp, #16
 800659e:	4640      	mov	r0, r8
 80065a0:	f3af 8000 	nop.w
 80065a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80065a8:	4681      	mov	r9, r0
 80065aa:	d1d6      	bne.n	800655a <_svfiprintf_r+0x166>
 80065ac:	89a3      	ldrh	r3, [r4, #12]
 80065ae:	065b      	lsls	r3, r3, #25
 80065b0:	f53f af35 	bmi.w	800641e <_svfiprintf_r+0x2a>
 80065b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065b6:	b01d      	add	sp, #116	; 0x74
 80065b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065bc:	ab03      	add	r3, sp, #12
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	4622      	mov	r2, r4
 80065c2:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <_svfiprintf_r+0x1ec>)
 80065c4:	a904      	add	r1, sp, #16
 80065c6:	4640      	mov	r0, r8
 80065c8:	f000 f882 	bl	80066d0 <_printf_i>
 80065cc:	e7ea      	b.n	80065a4 <_svfiprintf_r+0x1b0>
 80065ce:	bf00      	nop
 80065d0:	08006cac 	.word	0x08006cac
 80065d4:	08006cb2 	.word	0x08006cb2
 80065d8:	08006cb6 	.word	0x08006cb6
 80065dc:	00000000 	.word	0x00000000
 80065e0:	08006341 	.word	0x08006341

080065e4 <_printf_common>:
 80065e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e8:	4691      	mov	r9, r2
 80065ea:	461f      	mov	r7, r3
 80065ec:	688a      	ldr	r2, [r1, #8]
 80065ee:	690b      	ldr	r3, [r1, #16]
 80065f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065f4:	4293      	cmp	r3, r2
 80065f6:	bfb8      	it	lt
 80065f8:	4613      	movlt	r3, r2
 80065fa:	f8c9 3000 	str.w	r3, [r9]
 80065fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006602:	4606      	mov	r6, r0
 8006604:	460c      	mov	r4, r1
 8006606:	b112      	cbz	r2, 800660e <_printf_common+0x2a>
 8006608:	3301      	adds	r3, #1
 800660a:	f8c9 3000 	str.w	r3, [r9]
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	0699      	lsls	r1, r3, #26
 8006612:	bf42      	ittt	mi
 8006614:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006618:	3302      	addmi	r3, #2
 800661a:	f8c9 3000 	strmi.w	r3, [r9]
 800661e:	6825      	ldr	r5, [r4, #0]
 8006620:	f015 0506 	ands.w	r5, r5, #6
 8006624:	d107      	bne.n	8006636 <_printf_common+0x52>
 8006626:	f104 0a19 	add.w	sl, r4, #25
 800662a:	68e3      	ldr	r3, [r4, #12]
 800662c:	f8d9 2000 	ldr.w	r2, [r9]
 8006630:	1a9b      	subs	r3, r3, r2
 8006632:	42ab      	cmp	r3, r5
 8006634:	dc28      	bgt.n	8006688 <_printf_common+0xa4>
 8006636:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800663a:	6822      	ldr	r2, [r4, #0]
 800663c:	3300      	adds	r3, #0
 800663e:	bf18      	it	ne
 8006640:	2301      	movne	r3, #1
 8006642:	0692      	lsls	r2, r2, #26
 8006644:	d42d      	bmi.n	80066a2 <_printf_common+0xbe>
 8006646:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800664a:	4639      	mov	r1, r7
 800664c:	4630      	mov	r0, r6
 800664e:	47c0      	blx	r8
 8006650:	3001      	adds	r0, #1
 8006652:	d020      	beq.n	8006696 <_printf_common+0xb2>
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	68e5      	ldr	r5, [r4, #12]
 8006658:	f8d9 2000 	ldr.w	r2, [r9]
 800665c:	f003 0306 	and.w	r3, r3, #6
 8006660:	2b04      	cmp	r3, #4
 8006662:	bf08      	it	eq
 8006664:	1aad      	subeq	r5, r5, r2
 8006666:	68a3      	ldr	r3, [r4, #8]
 8006668:	6922      	ldr	r2, [r4, #16]
 800666a:	bf0c      	ite	eq
 800666c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006670:	2500      	movne	r5, #0
 8006672:	4293      	cmp	r3, r2
 8006674:	bfc4      	itt	gt
 8006676:	1a9b      	subgt	r3, r3, r2
 8006678:	18ed      	addgt	r5, r5, r3
 800667a:	f04f 0900 	mov.w	r9, #0
 800667e:	341a      	adds	r4, #26
 8006680:	454d      	cmp	r5, r9
 8006682:	d11a      	bne.n	80066ba <_printf_common+0xd6>
 8006684:	2000      	movs	r0, #0
 8006686:	e008      	b.n	800669a <_printf_common+0xb6>
 8006688:	2301      	movs	r3, #1
 800668a:	4652      	mov	r2, sl
 800668c:	4639      	mov	r1, r7
 800668e:	4630      	mov	r0, r6
 8006690:	47c0      	blx	r8
 8006692:	3001      	adds	r0, #1
 8006694:	d103      	bne.n	800669e <_printf_common+0xba>
 8006696:	f04f 30ff 	mov.w	r0, #4294967295
 800669a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800669e:	3501      	adds	r5, #1
 80066a0:	e7c3      	b.n	800662a <_printf_common+0x46>
 80066a2:	18e1      	adds	r1, r4, r3
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	2030      	movs	r0, #48	; 0x30
 80066a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066ac:	4422      	add	r2, r4
 80066ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066b6:	3302      	adds	r3, #2
 80066b8:	e7c5      	b.n	8006646 <_printf_common+0x62>
 80066ba:	2301      	movs	r3, #1
 80066bc:	4622      	mov	r2, r4
 80066be:	4639      	mov	r1, r7
 80066c0:	4630      	mov	r0, r6
 80066c2:	47c0      	blx	r8
 80066c4:	3001      	adds	r0, #1
 80066c6:	d0e6      	beq.n	8006696 <_printf_common+0xb2>
 80066c8:	f109 0901 	add.w	r9, r9, #1
 80066cc:	e7d8      	b.n	8006680 <_printf_common+0x9c>
	...

080066d0 <_printf_i>:
 80066d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80066d8:	460c      	mov	r4, r1
 80066da:	7e09      	ldrb	r1, [r1, #24]
 80066dc:	b085      	sub	sp, #20
 80066de:	296e      	cmp	r1, #110	; 0x6e
 80066e0:	4617      	mov	r7, r2
 80066e2:	4606      	mov	r6, r0
 80066e4:	4698      	mov	r8, r3
 80066e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066e8:	f000 80b3 	beq.w	8006852 <_printf_i+0x182>
 80066ec:	d822      	bhi.n	8006734 <_printf_i+0x64>
 80066ee:	2963      	cmp	r1, #99	; 0x63
 80066f0:	d036      	beq.n	8006760 <_printf_i+0x90>
 80066f2:	d80a      	bhi.n	800670a <_printf_i+0x3a>
 80066f4:	2900      	cmp	r1, #0
 80066f6:	f000 80b9 	beq.w	800686c <_printf_i+0x19c>
 80066fa:	2958      	cmp	r1, #88	; 0x58
 80066fc:	f000 8083 	beq.w	8006806 <_printf_i+0x136>
 8006700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006704:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006708:	e032      	b.n	8006770 <_printf_i+0xa0>
 800670a:	2964      	cmp	r1, #100	; 0x64
 800670c:	d001      	beq.n	8006712 <_printf_i+0x42>
 800670e:	2969      	cmp	r1, #105	; 0x69
 8006710:	d1f6      	bne.n	8006700 <_printf_i+0x30>
 8006712:	6820      	ldr	r0, [r4, #0]
 8006714:	6813      	ldr	r3, [r2, #0]
 8006716:	0605      	lsls	r5, r0, #24
 8006718:	f103 0104 	add.w	r1, r3, #4
 800671c:	d52a      	bpl.n	8006774 <_printf_i+0xa4>
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6011      	str	r1, [r2, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	da03      	bge.n	800672e <_printf_i+0x5e>
 8006726:	222d      	movs	r2, #45	; 0x2d
 8006728:	425b      	negs	r3, r3
 800672a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800672e:	486f      	ldr	r0, [pc, #444]	; (80068ec <_printf_i+0x21c>)
 8006730:	220a      	movs	r2, #10
 8006732:	e039      	b.n	80067a8 <_printf_i+0xd8>
 8006734:	2973      	cmp	r1, #115	; 0x73
 8006736:	f000 809d 	beq.w	8006874 <_printf_i+0x1a4>
 800673a:	d808      	bhi.n	800674e <_printf_i+0x7e>
 800673c:	296f      	cmp	r1, #111	; 0x6f
 800673e:	d020      	beq.n	8006782 <_printf_i+0xb2>
 8006740:	2970      	cmp	r1, #112	; 0x70
 8006742:	d1dd      	bne.n	8006700 <_printf_i+0x30>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	f043 0320 	orr.w	r3, r3, #32
 800674a:	6023      	str	r3, [r4, #0]
 800674c:	e003      	b.n	8006756 <_printf_i+0x86>
 800674e:	2975      	cmp	r1, #117	; 0x75
 8006750:	d017      	beq.n	8006782 <_printf_i+0xb2>
 8006752:	2978      	cmp	r1, #120	; 0x78
 8006754:	d1d4      	bne.n	8006700 <_printf_i+0x30>
 8006756:	2378      	movs	r3, #120	; 0x78
 8006758:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800675c:	4864      	ldr	r0, [pc, #400]	; (80068f0 <_printf_i+0x220>)
 800675e:	e055      	b.n	800680c <_printf_i+0x13c>
 8006760:	6813      	ldr	r3, [r2, #0]
 8006762:	1d19      	adds	r1, r3, #4
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6011      	str	r1, [r2, #0]
 8006768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800676c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006770:	2301      	movs	r3, #1
 8006772:	e08c      	b.n	800688e <_printf_i+0x1be>
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6011      	str	r1, [r2, #0]
 8006778:	f010 0f40 	tst.w	r0, #64	; 0x40
 800677c:	bf18      	it	ne
 800677e:	b21b      	sxthne	r3, r3
 8006780:	e7cf      	b.n	8006722 <_printf_i+0x52>
 8006782:	6813      	ldr	r3, [r2, #0]
 8006784:	6825      	ldr	r5, [r4, #0]
 8006786:	1d18      	adds	r0, r3, #4
 8006788:	6010      	str	r0, [r2, #0]
 800678a:	0628      	lsls	r0, r5, #24
 800678c:	d501      	bpl.n	8006792 <_printf_i+0xc2>
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	e002      	b.n	8006798 <_printf_i+0xc8>
 8006792:	0668      	lsls	r0, r5, #25
 8006794:	d5fb      	bpl.n	800678e <_printf_i+0xbe>
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	4854      	ldr	r0, [pc, #336]	; (80068ec <_printf_i+0x21c>)
 800679a:	296f      	cmp	r1, #111	; 0x6f
 800679c:	bf14      	ite	ne
 800679e:	220a      	movne	r2, #10
 80067a0:	2208      	moveq	r2, #8
 80067a2:	2100      	movs	r1, #0
 80067a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067a8:	6865      	ldr	r5, [r4, #4]
 80067aa:	60a5      	str	r5, [r4, #8]
 80067ac:	2d00      	cmp	r5, #0
 80067ae:	f2c0 8095 	blt.w	80068dc <_printf_i+0x20c>
 80067b2:	6821      	ldr	r1, [r4, #0]
 80067b4:	f021 0104 	bic.w	r1, r1, #4
 80067b8:	6021      	str	r1, [r4, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d13d      	bne.n	800683a <_printf_i+0x16a>
 80067be:	2d00      	cmp	r5, #0
 80067c0:	f040 808e 	bne.w	80068e0 <_printf_i+0x210>
 80067c4:	4665      	mov	r5, ip
 80067c6:	2a08      	cmp	r2, #8
 80067c8:	d10b      	bne.n	80067e2 <_printf_i+0x112>
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	07db      	lsls	r3, r3, #31
 80067ce:	d508      	bpl.n	80067e2 <_printf_i+0x112>
 80067d0:	6923      	ldr	r3, [r4, #16]
 80067d2:	6862      	ldr	r2, [r4, #4]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	bfde      	ittt	le
 80067d8:	2330      	movle	r3, #48	; 0x30
 80067da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067e2:	ebac 0305 	sub.w	r3, ip, r5
 80067e6:	6123      	str	r3, [r4, #16]
 80067e8:	f8cd 8000 	str.w	r8, [sp]
 80067ec:	463b      	mov	r3, r7
 80067ee:	aa03      	add	r2, sp, #12
 80067f0:	4621      	mov	r1, r4
 80067f2:	4630      	mov	r0, r6
 80067f4:	f7ff fef6 	bl	80065e4 <_printf_common>
 80067f8:	3001      	adds	r0, #1
 80067fa:	d14d      	bne.n	8006898 <_printf_i+0x1c8>
 80067fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006800:	b005      	add	sp, #20
 8006802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006806:	4839      	ldr	r0, [pc, #228]	; (80068ec <_printf_i+0x21c>)
 8006808:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800680c:	6813      	ldr	r3, [r2, #0]
 800680e:	6821      	ldr	r1, [r4, #0]
 8006810:	1d1d      	adds	r5, r3, #4
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6015      	str	r5, [r2, #0]
 8006816:	060a      	lsls	r2, r1, #24
 8006818:	d50b      	bpl.n	8006832 <_printf_i+0x162>
 800681a:	07ca      	lsls	r2, r1, #31
 800681c:	bf44      	itt	mi
 800681e:	f041 0120 	orrmi.w	r1, r1, #32
 8006822:	6021      	strmi	r1, [r4, #0]
 8006824:	b91b      	cbnz	r3, 800682e <_printf_i+0x15e>
 8006826:	6822      	ldr	r2, [r4, #0]
 8006828:	f022 0220 	bic.w	r2, r2, #32
 800682c:	6022      	str	r2, [r4, #0]
 800682e:	2210      	movs	r2, #16
 8006830:	e7b7      	b.n	80067a2 <_printf_i+0xd2>
 8006832:	064d      	lsls	r5, r1, #25
 8006834:	bf48      	it	mi
 8006836:	b29b      	uxthmi	r3, r3
 8006838:	e7ef      	b.n	800681a <_printf_i+0x14a>
 800683a:	4665      	mov	r5, ip
 800683c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006840:	fb02 3311 	mls	r3, r2, r1, r3
 8006844:	5cc3      	ldrb	r3, [r0, r3]
 8006846:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800684a:	460b      	mov	r3, r1
 800684c:	2900      	cmp	r1, #0
 800684e:	d1f5      	bne.n	800683c <_printf_i+0x16c>
 8006850:	e7b9      	b.n	80067c6 <_printf_i+0xf6>
 8006852:	6813      	ldr	r3, [r2, #0]
 8006854:	6825      	ldr	r5, [r4, #0]
 8006856:	6961      	ldr	r1, [r4, #20]
 8006858:	1d18      	adds	r0, r3, #4
 800685a:	6010      	str	r0, [r2, #0]
 800685c:	0628      	lsls	r0, r5, #24
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	d501      	bpl.n	8006866 <_printf_i+0x196>
 8006862:	6019      	str	r1, [r3, #0]
 8006864:	e002      	b.n	800686c <_printf_i+0x19c>
 8006866:	066a      	lsls	r2, r5, #25
 8006868:	d5fb      	bpl.n	8006862 <_printf_i+0x192>
 800686a:	8019      	strh	r1, [r3, #0]
 800686c:	2300      	movs	r3, #0
 800686e:	6123      	str	r3, [r4, #16]
 8006870:	4665      	mov	r5, ip
 8006872:	e7b9      	b.n	80067e8 <_printf_i+0x118>
 8006874:	6813      	ldr	r3, [r2, #0]
 8006876:	1d19      	adds	r1, r3, #4
 8006878:	6011      	str	r1, [r2, #0]
 800687a:	681d      	ldr	r5, [r3, #0]
 800687c:	6862      	ldr	r2, [r4, #4]
 800687e:	2100      	movs	r1, #0
 8006880:	4628      	mov	r0, r5
 8006882:	f7f9 fcc5 	bl	8000210 <memchr>
 8006886:	b108      	cbz	r0, 800688c <_printf_i+0x1bc>
 8006888:	1b40      	subs	r0, r0, r5
 800688a:	6060      	str	r0, [r4, #4]
 800688c:	6863      	ldr	r3, [r4, #4]
 800688e:	6123      	str	r3, [r4, #16]
 8006890:	2300      	movs	r3, #0
 8006892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006896:	e7a7      	b.n	80067e8 <_printf_i+0x118>
 8006898:	6923      	ldr	r3, [r4, #16]
 800689a:	462a      	mov	r2, r5
 800689c:	4639      	mov	r1, r7
 800689e:	4630      	mov	r0, r6
 80068a0:	47c0      	blx	r8
 80068a2:	3001      	adds	r0, #1
 80068a4:	d0aa      	beq.n	80067fc <_printf_i+0x12c>
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	079b      	lsls	r3, r3, #30
 80068aa:	d413      	bmi.n	80068d4 <_printf_i+0x204>
 80068ac:	68e0      	ldr	r0, [r4, #12]
 80068ae:	9b03      	ldr	r3, [sp, #12]
 80068b0:	4298      	cmp	r0, r3
 80068b2:	bfb8      	it	lt
 80068b4:	4618      	movlt	r0, r3
 80068b6:	e7a3      	b.n	8006800 <_printf_i+0x130>
 80068b8:	2301      	movs	r3, #1
 80068ba:	464a      	mov	r2, r9
 80068bc:	4639      	mov	r1, r7
 80068be:	4630      	mov	r0, r6
 80068c0:	47c0      	blx	r8
 80068c2:	3001      	adds	r0, #1
 80068c4:	d09a      	beq.n	80067fc <_printf_i+0x12c>
 80068c6:	3501      	adds	r5, #1
 80068c8:	68e3      	ldr	r3, [r4, #12]
 80068ca:	9a03      	ldr	r2, [sp, #12]
 80068cc:	1a9b      	subs	r3, r3, r2
 80068ce:	42ab      	cmp	r3, r5
 80068d0:	dcf2      	bgt.n	80068b8 <_printf_i+0x1e8>
 80068d2:	e7eb      	b.n	80068ac <_printf_i+0x1dc>
 80068d4:	2500      	movs	r5, #0
 80068d6:	f104 0919 	add.w	r9, r4, #25
 80068da:	e7f5      	b.n	80068c8 <_printf_i+0x1f8>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1ac      	bne.n	800683a <_printf_i+0x16a>
 80068e0:	7803      	ldrb	r3, [r0, #0]
 80068e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068ea:	e76c      	b.n	80067c6 <_printf_i+0xf6>
 80068ec:	08006cbd 	.word	0x08006cbd
 80068f0:	08006cce 	.word	0x08006cce

080068f4 <memmove>:
 80068f4:	4288      	cmp	r0, r1
 80068f6:	b510      	push	{r4, lr}
 80068f8:	eb01 0302 	add.w	r3, r1, r2
 80068fc:	d807      	bhi.n	800690e <memmove+0x1a>
 80068fe:	1e42      	subs	r2, r0, #1
 8006900:	4299      	cmp	r1, r3
 8006902:	d00a      	beq.n	800691a <memmove+0x26>
 8006904:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006908:	f802 4f01 	strb.w	r4, [r2, #1]!
 800690c:	e7f8      	b.n	8006900 <memmove+0xc>
 800690e:	4283      	cmp	r3, r0
 8006910:	d9f5      	bls.n	80068fe <memmove+0xa>
 8006912:	1881      	adds	r1, r0, r2
 8006914:	1ad2      	subs	r2, r2, r3
 8006916:	42d3      	cmn	r3, r2
 8006918:	d100      	bne.n	800691c <memmove+0x28>
 800691a:	bd10      	pop	{r4, pc}
 800691c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006920:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006924:	e7f7      	b.n	8006916 <memmove+0x22>
	...

08006928 <_free_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4605      	mov	r5, r0
 800692c:	2900      	cmp	r1, #0
 800692e:	d045      	beq.n	80069bc <_free_r+0x94>
 8006930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006934:	1f0c      	subs	r4, r1, #4
 8006936:	2b00      	cmp	r3, #0
 8006938:	bfb8      	it	lt
 800693a:	18e4      	addlt	r4, r4, r3
 800693c:	f000 f8d2 	bl	8006ae4 <__malloc_lock>
 8006940:	4a1f      	ldr	r2, [pc, #124]	; (80069c0 <_free_r+0x98>)
 8006942:	6813      	ldr	r3, [r2, #0]
 8006944:	4610      	mov	r0, r2
 8006946:	b933      	cbnz	r3, 8006956 <_free_r+0x2e>
 8006948:	6063      	str	r3, [r4, #4]
 800694a:	6014      	str	r4, [r2, #0]
 800694c:	4628      	mov	r0, r5
 800694e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006952:	f000 b8c8 	b.w	8006ae6 <__malloc_unlock>
 8006956:	42a3      	cmp	r3, r4
 8006958:	d90c      	bls.n	8006974 <_free_r+0x4c>
 800695a:	6821      	ldr	r1, [r4, #0]
 800695c:	1862      	adds	r2, r4, r1
 800695e:	4293      	cmp	r3, r2
 8006960:	bf04      	itt	eq
 8006962:	681a      	ldreq	r2, [r3, #0]
 8006964:	685b      	ldreq	r3, [r3, #4]
 8006966:	6063      	str	r3, [r4, #4]
 8006968:	bf04      	itt	eq
 800696a:	1852      	addeq	r2, r2, r1
 800696c:	6022      	streq	r2, [r4, #0]
 800696e:	6004      	str	r4, [r0, #0]
 8006970:	e7ec      	b.n	800694c <_free_r+0x24>
 8006972:	4613      	mov	r3, r2
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	b10a      	cbz	r2, 800697c <_free_r+0x54>
 8006978:	42a2      	cmp	r2, r4
 800697a:	d9fa      	bls.n	8006972 <_free_r+0x4a>
 800697c:	6819      	ldr	r1, [r3, #0]
 800697e:	1858      	adds	r0, r3, r1
 8006980:	42a0      	cmp	r0, r4
 8006982:	d10b      	bne.n	800699c <_free_r+0x74>
 8006984:	6820      	ldr	r0, [r4, #0]
 8006986:	4401      	add	r1, r0
 8006988:	1858      	adds	r0, r3, r1
 800698a:	4282      	cmp	r2, r0
 800698c:	6019      	str	r1, [r3, #0]
 800698e:	d1dd      	bne.n	800694c <_free_r+0x24>
 8006990:	6810      	ldr	r0, [r2, #0]
 8006992:	6852      	ldr	r2, [r2, #4]
 8006994:	605a      	str	r2, [r3, #4]
 8006996:	4401      	add	r1, r0
 8006998:	6019      	str	r1, [r3, #0]
 800699a:	e7d7      	b.n	800694c <_free_r+0x24>
 800699c:	d902      	bls.n	80069a4 <_free_r+0x7c>
 800699e:	230c      	movs	r3, #12
 80069a0:	602b      	str	r3, [r5, #0]
 80069a2:	e7d3      	b.n	800694c <_free_r+0x24>
 80069a4:	6820      	ldr	r0, [r4, #0]
 80069a6:	1821      	adds	r1, r4, r0
 80069a8:	428a      	cmp	r2, r1
 80069aa:	bf04      	itt	eq
 80069ac:	6811      	ldreq	r1, [r2, #0]
 80069ae:	6852      	ldreq	r2, [r2, #4]
 80069b0:	6062      	str	r2, [r4, #4]
 80069b2:	bf04      	itt	eq
 80069b4:	1809      	addeq	r1, r1, r0
 80069b6:	6021      	streq	r1, [r4, #0]
 80069b8:	605c      	str	r4, [r3, #4]
 80069ba:	e7c7      	b.n	800694c <_free_r+0x24>
 80069bc:	bd38      	pop	{r3, r4, r5, pc}
 80069be:	bf00      	nop
 80069c0:	200001ac 	.word	0x200001ac

080069c4 <_malloc_r>:
 80069c4:	b570      	push	{r4, r5, r6, lr}
 80069c6:	1ccd      	adds	r5, r1, #3
 80069c8:	f025 0503 	bic.w	r5, r5, #3
 80069cc:	3508      	adds	r5, #8
 80069ce:	2d0c      	cmp	r5, #12
 80069d0:	bf38      	it	cc
 80069d2:	250c      	movcc	r5, #12
 80069d4:	2d00      	cmp	r5, #0
 80069d6:	4606      	mov	r6, r0
 80069d8:	db01      	blt.n	80069de <_malloc_r+0x1a>
 80069da:	42a9      	cmp	r1, r5
 80069dc:	d903      	bls.n	80069e6 <_malloc_r+0x22>
 80069de:	230c      	movs	r3, #12
 80069e0:	6033      	str	r3, [r6, #0]
 80069e2:	2000      	movs	r0, #0
 80069e4:	bd70      	pop	{r4, r5, r6, pc}
 80069e6:	f000 f87d 	bl	8006ae4 <__malloc_lock>
 80069ea:	4a21      	ldr	r2, [pc, #132]	; (8006a70 <_malloc_r+0xac>)
 80069ec:	6814      	ldr	r4, [r2, #0]
 80069ee:	4621      	mov	r1, r4
 80069f0:	b991      	cbnz	r1, 8006a18 <_malloc_r+0x54>
 80069f2:	4c20      	ldr	r4, [pc, #128]	; (8006a74 <_malloc_r+0xb0>)
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	b91b      	cbnz	r3, 8006a00 <_malloc_r+0x3c>
 80069f8:	4630      	mov	r0, r6
 80069fa:	f000 f863 	bl	8006ac4 <_sbrk_r>
 80069fe:	6020      	str	r0, [r4, #0]
 8006a00:	4629      	mov	r1, r5
 8006a02:	4630      	mov	r0, r6
 8006a04:	f000 f85e 	bl	8006ac4 <_sbrk_r>
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	d124      	bne.n	8006a56 <_malloc_r+0x92>
 8006a0c:	230c      	movs	r3, #12
 8006a0e:	6033      	str	r3, [r6, #0]
 8006a10:	4630      	mov	r0, r6
 8006a12:	f000 f868 	bl	8006ae6 <__malloc_unlock>
 8006a16:	e7e4      	b.n	80069e2 <_malloc_r+0x1e>
 8006a18:	680b      	ldr	r3, [r1, #0]
 8006a1a:	1b5b      	subs	r3, r3, r5
 8006a1c:	d418      	bmi.n	8006a50 <_malloc_r+0x8c>
 8006a1e:	2b0b      	cmp	r3, #11
 8006a20:	d90f      	bls.n	8006a42 <_malloc_r+0x7e>
 8006a22:	600b      	str	r3, [r1, #0]
 8006a24:	50cd      	str	r5, [r1, r3]
 8006a26:	18cc      	adds	r4, r1, r3
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f000 f85c 	bl	8006ae6 <__malloc_unlock>
 8006a2e:	f104 000b 	add.w	r0, r4, #11
 8006a32:	1d23      	adds	r3, r4, #4
 8006a34:	f020 0007 	bic.w	r0, r0, #7
 8006a38:	1ac3      	subs	r3, r0, r3
 8006a3a:	d0d3      	beq.n	80069e4 <_malloc_r+0x20>
 8006a3c:	425a      	negs	r2, r3
 8006a3e:	50e2      	str	r2, [r4, r3]
 8006a40:	e7d0      	b.n	80069e4 <_malloc_r+0x20>
 8006a42:	428c      	cmp	r4, r1
 8006a44:	684b      	ldr	r3, [r1, #4]
 8006a46:	bf16      	itet	ne
 8006a48:	6063      	strne	r3, [r4, #4]
 8006a4a:	6013      	streq	r3, [r2, #0]
 8006a4c:	460c      	movne	r4, r1
 8006a4e:	e7eb      	b.n	8006a28 <_malloc_r+0x64>
 8006a50:	460c      	mov	r4, r1
 8006a52:	6849      	ldr	r1, [r1, #4]
 8006a54:	e7cc      	b.n	80069f0 <_malloc_r+0x2c>
 8006a56:	1cc4      	adds	r4, r0, #3
 8006a58:	f024 0403 	bic.w	r4, r4, #3
 8006a5c:	42a0      	cmp	r0, r4
 8006a5e:	d005      	beq.n	8006a6c <_malloc_r+0xa8>
 8006a60:	1a21      	subs	r1, r4, r0
 8006a62:	4630      	mov	r0, r6
 8006a64:	f000 f82e 	bl	8006ac4 <_sbrk_r>
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d0cf      	beq.n	8006a0c <_malloc_r+0x48>
 8006a6c:	6025      	str	r5, [r4, #0]
 8006a6e:	e7db      	b.n	8006a28 <_malloc_r+0x64>
 8006a70:	200001ac 	.word	0x200001ac
 8006a74:	200001b0 	.word	0x200001b0

08006a78 <_realloc_r>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	4607      	mov	r7, r0
 8006a7c:	4614      	mov	r4, r2
 8006a7e:	460e      	mov	r6, r1
 8006a80:	b921      	cbnz	r1, 8006a8c <_realloc_r+0x14>
 8006a82:	4611      	mov	r1, r2
 8006a84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a88:	f7ff bf9c 	b.w	80069c4 <_malloc_r>
 8006a8c:	b922      	cbnz	r2, 8006a98 <_realloc_r+0x20>
 8006a8e:	f7ff ff4b 	bl	8006928 <_free_r>
 8006a92:	4625      	mov	r5, r4
 8006a94:	4628      	mov	r0, r5
 8006a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a98:	f000 f826 	bl	8006ae8 <_malloc_usable_size_r>
 8006a9c:	42a0      	cmp	r0, r4
 8006a9e:	d20f      	bcs.n	8006ac0 <_realloc_r+0x48>
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	f7ff ff8e 	bl	80069c4 <_malloc_r>
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d0f2      	beq.n	8006a94 <_realloc_r+0x1c>
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4622      	mov	r2, r4
 8006ab2:	f7ff fc11 	bl	80062d8 <memcpy>
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	4638      	mov	r0, r7
 8006aba:	f7ff ff35 	bl	8006928 <_free_r>
 8006abe:	e7e9      	b.n	8006a94 <_realloc_r+0x1c>
 8006ac0:	4635      	mov	r5, r6
 8006ac2:	e7e7      	b.n	8006a94 <_realloc_r+0x1c>

08006ac4 <_sbrk_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4c06      	ldr	r4, [pc, #24]	; (8006ae0 <_sbrk_r+0x1c>)
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4605      	mov	r5, r0
 8006acc:	4608      	mov	r0, r1
 8006ace:	6023      	str	r3, [r4, #0]
 8006ad0:	f7fa ff2c 	bl	800192c <_sbrk>
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	d102      	bne.n	8006ade <_sbrk_r+0x1a>
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	b103      	cbz	r3, 8006ade <_sbrk_r+0x1a>
 8006adc:	602b      	str	r3, [r5, #0]
 8006ade:	bd38      	pop	{r3, r4, r5, pc}
 8006ae0:	200002e0 	.word	0x200002e0

08006ae4 <__malloc_lock>:
 8006ae4:	4770      	bx	lr

08006ae6 <__malloc_unlock>:
 8006ae6:	4770      	bx	lr

08006ae8 <_malloc_usable_size_r>:
 8006ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aec:	1f18      	subs	r0, r3, #4
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	bfbc      	itt	lt
 8006af2:	580b      	ldrlt	r3, [r1, r0]
 8006af4:	18c0      	addlt	r0, r0, r3
 8006af6:	4770      	bx	lr

08006af8 <_init>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	bf00      	nop
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr

08006b04 <_fini>:
 8006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b06:	bf00      	nop
 8006b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0a:	bc08      	pop	{r3}
 8006b0c:	469e      	mov	lr, r3
 8006b0e:	4770      	bx	lr
