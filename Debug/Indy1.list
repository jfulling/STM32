
Indy1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a38  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071d0  080071d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080071d0  080071d0  000171d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071d8  080071d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071d8  080071d8  000171d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071dc  080071dc  000171dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080071e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000070  08007250  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08007250  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f17d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e6f  00000000  00000000  0002f21d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d70  00000000  00000000  00031090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c78  00000000  00000000  00031e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030358  00000000  00000000  00032a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad6e  00000000  00000000  00062dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00121f21  00000000  00000000  0006db3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018fa5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a3c  00000000  00000000  0018fadc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006be0 	.word	0x08006be0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08006be0 	.word	0x08006be0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d008      	beq.n	80005d0 <NRF24_csn+0x20>
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <NRF24_csn+0x38>)
 80005c0:	6818      	ldr	r0, [r3, #0]
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <NRF24_csn+0x3c>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	f001 fdb9 	bl	8002140 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80005ce:	e007      	b.n	80005e0 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <NRF24_csn+0x38>)
 80005d2:	6818      	ldr	r0, [r3, #0]
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <NRF24_csn+0x3c>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	2200      	movs	r2, #0
 80005da:	4619      	mov	r1, r3
 80005dc:	f001 fdb0 	bl	8002140 <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000090 	.word	0x20000090
 80005ec:	20000094 	.word	0x20000094

080005f0 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d008      	beq.n	8000610 <NRF24_ce+0x20>
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <NRF24_ce+0x38>)
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <NRF24_ce+0x3c>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	2201      	movs	r2, #1
 8000608:	4619      	mov	r1, r3
 800060a:	f001 fd99 	bl	8002140 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800060e:	e007      	b.n	8000620 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <NRF24_ce+0x38>)
 8000612:	6818      	ldr	r0, [r3, #0]
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <NRF24_ce+0x3c>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	2200      	movs	r2, #0
 800061a:	4619      	mov	r1, r3
 800061c:	f001 fd90 	bl	8002140 <HAL_GPIO_WritePin>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000090 	.word	0x20000090
 800062c:	20000096 	.word	0x20000096

08000630 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff ffb8 	bl	80005b0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 031f 	and.w	r3, r3, #31
 8000646:	b2db      	uxtb	r3, r3
 8000648:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800064a:	f107 010c 	add.w	r1, r7, #12
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	2201      	movs	r2, #1
 8000652:	480a      	ldr	r0, [pc, #40]	; (800067c <NRF24_read_register+0x4c>)
 8000654:	f003 fb14 	bl	8003c80 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	1c59      	adds	r1, r3, #1
 800065e:	2364      	movs	r3, #100	; 0x64
 8000660:	2201      	movs	r2, #1
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <NRF24_read_register+0x4c>)
 8000664:	f003 fc72 	bl	8003f4c <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000668:	7b7b      	ldrb	r3, [r7, #13]
 800066a:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f7ff ff9f 	bl	80005b0 <NRF24_csn>
	return retData;
 8000672:	7bfb      	ldrb	r3, [r7, #15]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000098 	.word	0x20000098

08000680 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff8d 	bl	80005b0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f003 031f 	and.w	r3, r3, #31
 800069c:	b2db      	uxtb	r3, r3
 800069e:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006a0:	f107 010c 	add.w	r1, r7, #12
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	2201      	movs	r2, #1
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <NRF24_read_registerN+0x4c>)
 80006aa:	f003 fae9 	bl	8003c80 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	6839      	ldr	r1, [r7, #0]
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <NRF24_read_registerN+0x4c>)
 80006b8:	f003 fc48 	bl	8003f4c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ff77 	bl	80005b0 <NRF24_csn>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000098 	.word	0x20000098

080006d0 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff ff65 	bl	80005b0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f043 0320 	orr.w	r3, r3, #32
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80006f4:	f107 010c 	add.w	r1, r7, #12
 80006f8:	2364      	movs	r3, #100	; 0x64
 80006fa:	2202      	movs	r2, #2
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <NRF24_write_register+0x40>)
 80006fe:	f003 fabf 	bl	8003c80 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff ff54 	bl	80005b0 <NRF24_csn>
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000098 	.word	0x20000098

08000714 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	4613      	mov	r3, r2
 8000722:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff ff43 	bl	80005b0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f043 0320 	orr.w	r3, r3, #32
 8000730:	b2db      	uxtb	r3, r3
 8000732:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000734:	f107 010c 	add.w	r1, r7, #12
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	2201      	movs	r2, #1
 800073c:	4808      	ldr	r0, [pc, #32]	; (8000760 <NRF24_write_registerN+0x4c>)
 800073e:	f003 fa9f 	bl	8003c80 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	b29a      	uxth	r2, r3
 8000746:	2364      	movs	r3, #100	; 0x64
 8000748:	6839      	ldr	r1, [r7, #0]
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <NRF24_write_registerN+0x4c>)
 800074c:	f003 fa98 	bl	8003c80 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff2d 	bl	80005b0 <NRF24_csn>
}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000098 	.word	0x20000098

08000764 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000768:	21ff      	movs	r1, #255	; 0xff
 800076a:	20e1      	movs	r0, #225	; 0xe1
 800076c:	f7ff ffb0 	bl	80006d0 <NRF24_write_register>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000778:	21ff      	movs	r1, #255	; 0xff
 800077a:	20e2      	movs	r0, #226	; 0xe2
 800077c:	f7ff ffa8 	bl	80006d0 <NRF24_write_register>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <NRF24_Check>:
	statReg = NRF24_read_register(REG_STATUS);
	return statReg;
}


uint8_t NRF24_Check(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <NRF24_Check+0x5c>)
 8000790:	60bb      	str	r3, [r7, #8]

	NRF24_write_registerN(REG_TX_ADDR, ptr, 5);
 8000792:	2205      	movs	r2, #5
 8000794:	68b9      	ldr	r1, [r7, #8]
 8000796:	2010      	movs	r0, #16
 8000798:	f7ff ffbc 	bl	8000714 <NRF24_write_registerN>
	NRF24_read_registerN(REG_TX_ADDR, rxbuf, 5);
 800079c:	463b      	mov	r3, r7
 800079e:	2205      	movs	r2, #5
 80007a0:	4619      	mov	r1, r3
 80007a2:	2010      	movs	r0, #16
 80007a4:	f7ff ff6c 	bl	8000680 <NRF24_read_registerN>

	for (i = 0; i < 5; i++) {
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]
 80007ac:	e010      	b.n	80007d0 <NRF24_Check+0x4c>
		if (rxbuf[i] != *ptr++) return 0;
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	f107 0210 	add.w	r2, r7, #16
 80007b4:	4413      	add	r3, r2
 80007b6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	1c59      	adds	r1, r3, #1
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d001      	beq.n	80007ca <NRF24_Check+0x46>
 80007c6:	2300      	movs	r3, #0
 80007c8:	e006      	b.n	80007d8 <NRF24_Check+0x54>
	for (i = 0; i < 5; i++) {
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	3301      	adds	r3, #1
 80007ce:	73fb      	strb	r3, [r7, #15]
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d9eb      	bls.n	80007ae <NRF24_Check+0x2a>
	}

	return 1;
 80007d6:	2301      	movs	r3, #1

}//end NRF24_CHECK
 80007d8:	4618      	mov	r0, r3
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	08006bf8 	.word	0x08006bf8

080007e4 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80007e4:	b082      	sub	sp, #8
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b084      	sub	sp, #16
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	61fb      	str	r3, [r7, #28]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
 80007f4:	4613      	mov	r3, r2
 80007f6:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80007f8:	4b66      	ldr	r3, [pc, #408]	; (8000994 <NRF24_begin+0x1b0>)
 80007fa:	4618      	mov	r0, r3
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	2264      	movs	r2, #100	; 0x64
 8000802:	4619      	mov	r1, r3
 8000804:	f005 fddc 	bl	80063c0 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000808:	4a63      	ldr	r2, [pc, #396]	; (8000998 <NRF24_begin+0x1b4>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800080e:	4a63      	ldr	r2, [pc, #396]	; (800099c <NRF24_begin+0x1b8>)
 8000810:	887b      	ldrh	r3, [r7, #2]
 8000812:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000814:	4a62      	ldr	r2, [pc, #392]	; (80009a0 <NRF24_begin+0x1bc>)
 8000816:	883b      	ldrh	r3, [r7, #0]
 8000818:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff fec8 	bl	80005b0 <NRF24_csn>
	NRF24_ce(0);
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff fee5 	bl	80005f0 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000826:	2005      	movs	r0, #5
 8000828:	f001 f9f0 	bl	8001c0c <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800082c:	2108      	movs	r1, #8
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff ff4e 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000834:	213f      	movs	r1, #63	; 0x3f
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff ff4a 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800083c:	2103      	movs	r1, #3
 800083e:	2002      	movs	r0, #2
 8000840:	f7ff ff46 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000844:	2103      	movs	r1, #3
 8000846:	2003      	movs	r0, #3
 8000848:	f7ff ff42 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800084c:	2103      	movs	r1, #3
 800084e:	2004      	movs	r0, #4
 8000850:	f7ff ff3e 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000854:	2102      	movs	r1, #2
 8000856:	2005      	movs	r0, #5
 8000858:	f7ff ff3a 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 800085c:	210f      	movs	r1, #15
 800085e:	2006      	movs	r0, #6
 8000860:	f7ff ff36 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000864:	210e      	movs	r1, #14
 8000866:	2007      	movs	r0, #7
 8000868:	f7ff ff32 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 800086c:	2100      	movs	r1, #0
 800086e:	2008      	movs	r0, #8
 8000870:	f7ff ff2e 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000874:	2100      	movs	r1, #0
 8000876:	2009      	movs	r0, #9
 8000878:	f7ff ff2a 	bl	80006d0 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800087c:	23e7      	movs	r3, #231	; 0xe7
 800087e:	733b      	strb	r3, [r7, #12]
 8000880:	23e7      	movs	r3, #231	; 0xe7
 8000882:	72fb      	strb	r3, [r7, #11]
 8000884:	23e7      	movs	r3, #231	; 0xe7
 8000886:	72bb      	strb	r3, [r7, #10]
 8000888:	23e7      	movs	r3, #231	; 0xe7
 800088a:	727b      	strb	r3, [r7, #9]
 800088c:	23e7      	movs	r3, #231	; 0xe7
 800088e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000890:	f107 0308 	add.w	r3, r7, #8
 8000894:	2205      	movs	r2, #5
 8000896:	4619      	mov	r1, r3
 8000898:	200a      	movs	r0, #10
 800089a:	f7ff ff3b 	bl	8000714 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800089e:	23c2      	movs	r3, #194	; 0xc2
 80008a0:	733b      	strb	r3, [r7, #12]
 80008a2:	23c2      	movs	r3, #194	; 0xc2
 80008a4:	72fb      	strb	r3, [r7, #11]
 80008a6:	23c2      	movs	r3, #194	; 0xc2
 80008a8:	72bb      	strb	r3, [r7, #10]
 80008aa:	23c2      	movs	r3, #194	; 0xc2
 80008ac:	727b      	strb	r3, [r7, #9]
 80008ae:	23c2      	movs	r3, #194	; 0xc2
 80008b0:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2205      	movs	r2, #5
 80008b8:	4619      	mov	r1, r3
 80008ba:	200b      	movs	r0, #11
 80008bc:	f7ff ff2a 	bl	8000714 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80008c0:	21c3      	movs	r1, #195	; 0xc3
 80008c2:	200c      	movs	r0, #12
 80008c4:	f7ff ff04 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80008c8:	21c4      	movs	r1, #196	; 0xc4
 80008ca:	200d      	movs	r0, #13
 80008cc:	f7ff ff00 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80008d0:	21c5      	movs	r1, #197	; 0xc5
 80008d2:	200e      	movs	r0, #14
 80008d4:	f7ff fefc 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80008d8:	21c6      	movs	r1, #198	; 0xc6
 80008da:	200f      	movs	r0, #15
 80008dc:	f7ff fef8 	bl	80006d0 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80008e0:	23e7      	movs	r3, #231	; 0xe7
 80008e2:	733b      	strb	r3, [r7, #12]
 80008e4:	23e7      	movs	r3, #231	; 0xe7
 80008e6:	72fb      	strb	r3, [r7, #11]
 80008e8:	23e7      	movs	r3, #231	; 0xe7
 80008ea:	72bb      	strb	r3, [r7, #10]
 80008ec:	23e7      	movs	r3, #231	; 0xe7
 80008ee:	727b      	strb	r3, [r7, #9]
 80008f0:	23e7      	movs	r3, #231	; 0xe7
 80008f2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	2205      	movs	r2, #5
 80008fa:	4619      	mov	r1, r3
 80008fc:	2010      	movs	r0, #16
 80008fe:	f7ff ff09 	bl	8000714 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000902:	2100      	movs	r1, #0
 8000904:	2011      	movs	r0, #17
 8000906:	f7ff fee3 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800090a:	2100      	movs	r1, #0
 800090c:	2012      	movs	r0, #18
 800090e:	f7ff fedf 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000912:	2100      	movs	r1, #0
 8000914:	2013      	movs	r0, #19
 8000916:	f7ff fedb 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800091a:	2100      	movs	r1, #0
 800091c:	2014      	movs	r0, #20
 800091e:	f7ff fed7 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000922:	2100      	movs	r1, #0
 8000924:	2015      	movs	r0, #21
 8000926:	f7ff fed3 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800092a:	2100      	movs	r1, #0
 800092c:	2016      	movs	r0, #22
 800092e:	f7ff fecf 	bl	80006d0 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000932:	f000 f957 	bl	8000be4 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000936:	2100      	movs	r1, #0
 8000938:	201c      	movs	r0, #28
 800093a:	f7ff fec9 	bl	80006d0 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800093e:	2100      	movs	r1, #0
 8000940:	201d      	movs	r0, #29
 8000942:	f7ff fec5 	bl	80006d0 <NRF24_write_register>
	printRadioSettings();
 8000946:	f000 f967 	bl	8000c18 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800094a:	210f      	movs	r1, #15
 800094c:	200f      	movs	r0, #15
 800094e:	f000 f829 	bl	80009a4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000952:	2003      	movs	r0, #3
 8000954:	f000 f886 	bl	8000a64 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000958:	2001      	movs	r0, #1
 800095a:	f000 f8bd 	bl	8000ad8 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800095e:	2002      	movs	r0, #2
 8000960:	f000 f900 	bl	8000b64 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000964:	f000 f866 	bl	8000a34 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000968:	2020      	movs	r0, #32
 800096a:	f000 f84b 	bl	8000a04 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 800096e:	f000 f930 	bl	8000bd2 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000972:	204c      	movs	r0, #76	; 0x4c
 8000974:	f000 f831 	bl	80009da <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000978:	f7ff fef4 	bl	8000764 <NRF24_flush_tx>
	NRF24_flush_rx();
 800097c:	f7ff fefa 	bl	8000774 <NRF24_flush_rx>

	NRF24_powerDown();
 8000980:	f000 f918 	bl	8000bb4 <NRF24_powerDown>

}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800098e:	b002      	add	sp, #8
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000098 	.word	0x20000098
 8000998:	20000090 	.word	0x20000090
 800099c:	20000094 	.word	0x20000094
 80009a0:	20000096 	.word	0x20000096

080009a4 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	460a      	mov	r2, r1
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	4613      	mov	r3, r2
 80009b2:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	b25a      	sxtb	r2, r3
 80009ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	b25b      	sxtb	r3, r3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4619      	mov	r1, r3
 80009cc:	2004      	movs	r0, #4
 80009ce:	f7ff fe7f 	bl	80006d0 <NRF24_write_register>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b084      	sub	sp, #16
 80009de:	af00      	add	r7, sp, #0
 80009e0:	4603      	mov	r3, r0
 80009e2:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80009e4:	237f      	movs	r3, #127	; 0x7f
 80009e6:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80009e8:	7bfa      	ldrb	r2, [r7, #15]
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4293      	cmp	r3, r2
 80009ee:	bf28      	it	cs
 80009f0:	4613      	movcs	r3, r2
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	2005      	movs	r0, #5
 80009f8:	f7ff fe6a 	bl	80006d0 <NRF24_write_register>
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000a0e:	2320      	movs	r3, #32
 8000a10:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000a12:	7bfa      	ldrb	r2, [r7, #15]
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4293      	cmp	r3, r2
 8000a18:	bf28      	it	cs
 8000a1a:	4613      	movcs	r3, r2
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <NRF24_setPayloadSize+0x2c>)
 8000a20:	701a      	strb	r2, [r3, #0]
}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	2000008c 	.word	0x2000008c

08000a34 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000a38:	201d      	movs	r0, #29
 8000a3a:	f7ff fdf9 	bl	8000630 <NRF24_read_register>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f023 0304 	bic.w	r3, r3, #4
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	4619      	mov	r1, r3
 8000a48:	201d      	movs	r0, #29
 8000a4a:	f7ff fe41 	bl	80006d0 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	201c      	movs	r0, #28
 8000a52:	f7ff fe3d 	bl	80006d0 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000a56:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <NRF24_disableDynamicPayloads+0x2c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000008d 	.word	0x2000008d

08000a64 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000a6e:	2006      	movs	r0, #6
 8000a70:	f7ff fdde 	bl	8000630 <NRF24_read_register>
 8000a74:	4603      	mov	r3, r0
 8000a76:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	f023 0306 	bic.w	r3, r3, #6
 8000a7e:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d104      	bne.n	8000a90 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	f043 0306 	orr.w	r3, r3, #6
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	e019      	b.n	8000ac4 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d104      	bne.n	8000aa0 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	e011      	b.n	8000ac4 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d104      	bne.n	8000ab0 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	73fb      	strb	r3, [r7, #15]
 8000aae:	e009      	b.n	8000ac4 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d006      	beq.n	8000ac4 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d103      	bne.n	8000ac4 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	f043 0306 	orr.w	r3, r3, #6
 8000ac2:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	2006      	movs	r0, #6
 8000aca:	f7ff fe01 	bl	80006d0 <NRF24_write_register>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ae6:	2006      	movs	r0, #6
 8000ae8:	f7ff fda2 	bl	8000630 <NRF24_read_register>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <NRF24_setDataRate+0x88>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000af6:	7bbb      	ldrb	r3, [r7, #14]
 8000af8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000afc:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d107      	bne.n	8000b14 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <NRF24_setDataRate+0x88>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	f043 0320 	orr.w	r3, r3, #32
 8000b10:	73bb      	strb	r3, [r7, #14]
 8000b12:	e00d      	b.n	8000b30 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d107      	bne.n	8000b2a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <NRF24_setDataRate+0x88>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	73bb      	strb	r3, [r7, #14]
 8000b28:	e002      	b.n	8000b30 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <NRF24_setDataRate+0x88>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000b30:	7bbb      	ldrb	r3, [r7, #14]
 8000b32:	4619      	mov	r1, r3
 8000b34:	2006      	movs	r0, #6
 8000b36:	f7ff fdcb 	bl	80006d0 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000b3a:	2006      	movs	r0, #6
 8000b3c:	f7ff fd78 	bl	8000630 <NRF24_read_register>
 8000b40:	4603      	mov	r3, r0
 8000b42:	461a      	mov	r2, r3
 8000b44:	7bbb      	ldrb	r3, [r7, #14]
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d102      	bne.n	8000b50 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	e002      	b.n	8000b56 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <NRF24_setDataRate+0x88>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2000008e 	.word	0x2000008e

08000b64 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff fd5e 	bl	8000630 <NRF24_read_register>
 8000b74:	4603      	mov	r3, r0
 8000b76:	f023 030c 	bic.w	r3, r3, #12
 8000b7a:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d00f      	beq.n	8000ba2 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d104      	bne.n	8000b92 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	f043 0308 	orr.w	r3, r3, #8
 8000b8e:	73fb      	strb	r3, [r7, #15]
 8000b90:	e007      	b.n	8000ba2 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff fd92 	bl	80006d0 <NRF24_write_register>
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fd39 	bl	8000630 <NRF24_read_register>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f023 0302 	bic.w	r3, r3, #2
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fd81 	bl	80006d0 <NRF24_write_register>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000bd6:	2170      	movs	r1, #112	; 0x70
 8000bd8:	2007      	movs	r0, #7
 8000bda:	f7ff fd79 	bl	80006d0 <NRF24_write_register>
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff fce0 	bl	80005b0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000bf0:	2350      	movs	r3, #80	; 0x50
 8000bf2:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000bf4:	2373      	movs	r3, #115	; 0x73
 8000bf6:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000bf8:	1d39      	adds	r1, r7, #4
 8000bfa:	2364      	movs	r3, #100	; 0x64
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <NRF24_ACTIVATE_cmd+0x30>)
 8000c00:	f003 f83e 	bl	8003c80 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff fcd3 	bl	80005b0 <NRF24_csn>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000098 	.word	0x20000098

08000c18 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1a:	b0a1      	sub	sp, #132	; 0x84
 8000c1c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	4ab6      	ldr	r2, [pc, #728]	; (8000efc <printRadioSettings+0x2e4>)
 8000c24:	461c      	mov	r4, r3
 8000c26:	4615      	mov	r5, r2
 8000c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	8022      	strh	r2, [r4, #0]
 8000c3a:	3402      	adds	r4, #2
 8000c3c:	0c1b      	lsrs	r3, r3, #16
 8000c3e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fadb 	bl	8000200 <strlen>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	f107 0108 	add.w	r1, r7, #8
 8000c52:	230a      	movs	r3, #10
 8000c54:	48aa      	ldr	r0, [pc, #680]	; (8000f00 <printRadioSettings+0x2e8>)
 8000c56:	f003 fe79 	bl	800494c <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff fce8 	bl	8000630 <NRF24_read_register>
 8000c60:	4603      	mov	r3, r0
 8000c62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000c66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c6a:	f003 0308 	and.w	r3, r3, #8
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d020      	beq.n	8000cb4 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000c72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d00b      	beq.n	8000c96 <printRadioSettings+0x7e>
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4aa0      	ldr	r2, [pc, #640]	; (8000f04 <printRadioSettings+0x2ec>)
 8000c84:	461c      	mov	r4, r3
 8000c86:	4615      	mov	r5, r2
 8000c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c94:	e017      	b.n	8000cc6 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	4a9b      	ldr	r2, [pc, #620]	; (8000f08 <printRadioSettings+0x2f0>)
 8000c9c:	461c      	mov	r4, r3
 8000c9e:	4615      	mov	r5, r2
 8000ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ca8:	c403      	stmia	r4!, {r0, r1}
 8000caa:	8022      	strh	r2, [r4, #0]
 8000cac:	3402      	adds	r4, #2
 8000cae:	0c13      	lsrs	r3, r2, #16
 8000cb0:	7023      	strb	r3, [r4, #0]
 8000cb2:	e008      	b.n	8000cc6 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	4a94      	ldr	r2, [pc, #592]	; (8000f0c <printRadioSettings+0x2f4>)
 8000cba:	461c      	mov	r4, r3
 8000cbc:	4615      	mov	r5, r2
 8000cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc2:	682b      	ldr	r3, [r5, #0]
 8000cc4:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fa98 	bl	8000200 <strlen>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	f107 0108 	add.w	r1, r7, #8
 8000cd8:	230a      	movs	r3, #10
 8000cda:	4889      	ldr	r0, [pc, #548]	; (8000f00 <printRadioSettings+0x2e8>)
 8000cdc:	f003 fe36 	bl	800494c <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f7ff fca5 	bl	8000630 <NRF24_read_register>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cf0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	bfcc      	ite	gt
 8000cf8:	2301      	movgt	r3, #1
 8000cfa:	2300      	movle	r3, #0
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d04:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	bfcc      	ite	gt
 8000d0c:	2301      	movgt	r3, #1
 8000d0e:	2300      	movle	r3, #0
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d18:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	bfcc      	ite	gt
 8000d20:	2301      	movgt	r3, #1
 8000d22:	2300      	movle	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d28:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d2c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	bfcc      	ite	gt
 8000d34:	2301      	movgt	r3, #1
 8000d36:	2300      	movle	r3, #0
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d3c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d40:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	bfcc      	ite	gt
 8000d48:	2301      	movgt	r3, #1
 8000d4a:	2300      	movle	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d54:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	bfcc      	ite	gt
 8000d5c:	2301      	movgt	r3, #1
 8000d5e:	2300      	movle	r3, #0
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f107 0008 	add.w	r0, r7, #8
 8000d66:	9303      	str	r3, [sp, #12]
 8000d68:	9402      	str	r4, [sp, #8]
 8000d6a:	9101      	str	r1, [sp, #4]
 8000d6c:	9200      	str	r2, [sp, #0]
 8000d6e:	4633      	mov	r3, r6
 8000d70:	462a      	mov	r2, r5
 8000d72:	4967      	ldr	r1, [pc, #412]	; (8000f10 <printRadioSettings+0x2f8>)
 8000d74:	f005 fb38 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fa3f 	bl	8000200 <strlen>
 8000d82:	4603      	mov	r3, r0
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	f107 0108 	add.w	r1, r7, #8
 8000d8a:	230a      	movs	r3, #10
 8000d8c:	485c      	ldr	r0, [pc, #368]	; (8000f00 <printRadioSettings+0x2e8>)
 8000d8e:	f003 fddd 	bl	800494c <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000d92:	2002      	movs	r0, #2
 8000d94:	f7ff fc4c 	bl	8000630 <NRF24_read_register>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000da2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	bfcc      	ite	gt
 8000daa:	2301      	movgt	r3, #1
 8000dac:	2300      	movle	r3, #0
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000db2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000db6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	bfcc      	ite	gt
 8000dbe:	2301      	movgt	r3, #1
 8000dc0:	2300      	movle	r3, #0
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dca:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bfcc      	ite	gt
 8000dd2:	2301      	movgt	r3, #1
 8000dd4:	2300      	movle	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dde:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	bfcc      	ite	gt
 8000de6:	2301      	movgt	r3, #1
 8000de8:	2300      	movle	r3, #0
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000df2:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bfcc      	ite	gt
 8000dfa:	2301      	movgt	r3, #1
 8000dfc:	2300      	movle	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e06:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	bfcc      	ite	gt
 8000e0e:	2301      	movgt	r3, #1
 8000e10:	2300      	movle	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f107 0008 	add.w	r0, r7, #8
 8000e18:	9303      	str	r3, [sp, #12]
 8000e1a:	9402      	str	r4, [sp, #8]
 8000e1c:	9101      	str	r1, [sp, #4]
 8000e1e:	9200      	str	r2, [sp, #0]
 8000e20:	4633      	mov	r3, r6
 8000e22:	462a      	mov	r2, r5
 8000e24:	493b      	ldr	r1, [pc, #236]	; (8000f14 <printRadioSettings+0x2fc>)
 8000e26:	f005 fadf 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff f9e6 	bl	8000200 <strlen>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	f107 0108 	add.w	r1, r7, #8
 8000e3c:	230a      	movs	r3, #10
 8000e3e:	4830      	ldr	r0, [pc, #192]	; (8000f00 <printRadioSettings+0x2e8>)
 8000e40:	f003 fd84 	bl	800494c <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000e44:	2003      	movs	r0, #3
 8000e46:	f7ff fbf3 	bl	8000630 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000e54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e58:	3302      	adds	r3, #2
 8000e5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000e5e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	492c      	ldr	r1, [pc, #176]	; (8000f18 <printRadioSettings+0x300>)
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f005 fabd 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff f9c4 	bl	8000200 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f107 0108 	add.w	r1, r7, #8
 8000e80:	230a      	movs	r3, #10
 8000e82:	481f      	ldr	r0, [pc, #124]	; (8000f00 <printRadioSettings+0x2e8>)
 8000e84:	f003 fd62 	bl	800494c <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000e88:	2005      	movs	r0, #5
 8000e8a:	f7ff fbd1 	bl	8000630 <NRF24_read_register>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000e94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	491e      	ldr	r1, [pc, #120]	; (8000f1c <printRadioSettings+0x304>)
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f005 faa0 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff f9a7 	bl	8000200 <strlen>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	f107 0108 	add.w	r1, r7, #8
 8000eba:	230a      	movs	r3, #10
 8000ebc:	4810      	ldr	r0, [pc, #64]	; (8000f00 <printRadioSettings+0x2e8>)
 8000ebe:	f003 fd45 	bl	800494c <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000ec2:	2006      	movs	r0, #6
 8000ec4:	f7ff fbb4 	bl	8000630 <NRF24_read_register>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000ece:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d024      	beq.n	8000f24 <printRadioSettings+0x30c>
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <printRadioSettings+0x308>)
 8000ee0:	461c      	mov	r4, r3
 8000ee2:	4615      	mov	r5, r2
 8000ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000eec:	6020      	str	r0, [r4, #0]
 8000eee:	3404      	adds	r4, #4
 8000ef0:	8021      	strh	r1, [r4, #0]
 8000ef2:	3402      	adds	r4, #2
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	7023      	strb	r3, [r4, #0]
 8000ef8:	e023      	b.n	8000f42 <printRadioSettings+0x32a>
 8000efa:	bf00      	nop
 8000efc:	08006c00 	.word	0x08006c00
 8000f00:	200000fc 	.word	0x200000fc
 8000f04:	08006c34 	.word	0x08006c34
 8000f08:	08006c50 	.word	0x08006c50
 8000f0c:	08006c6c 	.word	0x08006c6c
 8000f10:	08006c80 	.word	0x08006c80
 8000f14:	08006cc4 	.word	0x08006cc4
 8000f18:	08006d10 	.word	0x08006d10
 8000f1c:	08006d2c 	.word	0x08006d2c
 8000f20:	08006d40 	.word	0x08006d40
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	4a29      	ldr	r2, [pc, #164]	; (8000fd0 <printRadioSettings+0x3b8>)
 8000f2a:	461c      	mov	r4, r3
 8000f2c:	4615      	mov	r5, r2
 8000f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f36:	6020      	str	r0, [r4, #0]
 8000f38:	3404      	adds	r4, #4
 8000f3a:	8021      	strh	r1, [r4, #0]
 8000f3c:	3402      	adds	r4, #2
 8000f3e:	0c0b      	lsrs	r3, r1, #16
 8000f40:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff f95a 	bl	8000200 <strlen>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	f107 0108 	add.w	r1, r7, #8
 8000f54:	230a      	movs	r3, #10
 8000f56:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <printRadioSettings+0x3bc>)
 8000f58:	f003 fcf8 	bl	800494c <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000f5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f60:	f003 0306 	and.w	r3, r3, #6
 8000f64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000f68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f6c:	085b      	lsrs	r3, r3, #1
 8000f6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000f72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d109      	bne.n	8000f8e <printRadioSettings+0x376>
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <printRadioSettings+0x3c0>)
 8000f80:	461c      	mov	r4, r3
 8000f82:	4615      	mov	r5, r2
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	682b      	ldr	r3, [r5, #0]
 8000f8a:	6023      	str	r3, [r4, #0]
 8000f8c:	e037      	b.n	8000ffe <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000f8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d109      	bne.n	8000faa <printRadioSettings+0x392>
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <printRadioSettings+0x3c4>)
 8000f9c:	461c      	mov	r4, r3
 8000f9e:	4615      	mov	r5, r2
 8000fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa4:	682b      	ldr	r3, [r5, #0]
 8000fa6:	6023      	str	r3, [r4, #0]
 8000fa8:	e029      	b.n	8000ffe <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000faa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d118      	bne.n	8000fe4 <printRadioSettings+0x3cc>
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <printRadioSettings+0x3c8>)
 8000fb8:	461c      	mov	r4, r3
 8000fba:	4615      	mov	r5, r2
 8000fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	8022      	strh	r2, [r4, #0]
 8000fc6:	3402      	adds	r4, #2
 8000fc8:	0c1b      	lsrs	r3, r3, #16
 8000fca:	7023      	strb	r3, [r4, #0]
 8000fcc:	e017      	b.n	8000ffe <printRadioSettings+0x3e6>
 8000fce:	bf00      	nop
 8000fd0:	08006d58 	.word	0x08006d58
 8000fd4:	200000fc 	.word	0x200000fc
 8000fd8:	08006d70 	.word	0x08006d70
 8000fdc:	08006d84 	.word	0x08006d84
 8000fe0:	08006d98 	.word	0x08006d98
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000fe4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d108      	bne.n	8000ffe <printRadioSettings+0x3e6>
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	4ad7      	ldr	r2, [pc, #860]	; (8001350 <printRadioSettings+0x738>)
 8000ff2:	461c      	mov	r4, r3
 8000ff4:	4615      	mov	r5, r2
 8000ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffa:	682b      	ldr	r3, [r5, #0]
 8000ffc:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff f8fc 	bl	8000200 <strlen>
 8001008:	4603      	mov	r3, r0
 800100a:	b29a      	uxth	r2, r3
 800100c:	f107 0108 	add.w	r1, r7, #8
 8001010:	230a      	movs	r3, #10
 8001012:	48d0      	ldr	r0, [pc, #832]	; (8001354 <printRadioSettings+0x73c>)
 8001014:	f003 fc9a 	bl	800494c <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001018:	463b      	mov	r3, r7
 800101a:	2205      	movs	r2, #5
 800101c:	4619      	mov	r1, r3
 800101e:	200a      	movs	r0, #10
 8001020:	f7ff fb2e 	bl	8000680 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001024:	793b      	ldrb	r3, [r7, #4]
 8001026:	461c      	mov	r4, r3
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	461d      	mov	r5, r3
 800102c:	78bb      	ldrb	r3, [r7, #2]
 800102e:	787a      	ldrb	r2, [r7, #1]
 8001030:	7839      	ldrb	r1, [r7, #0]
 8001032:	f107 0008 	add.w	r0, r7, #8
 8001036:	9102      	str	r1, [sp, #8]
 8001038:	9201      	str	r2, [sp, #4]
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	462b      	mov	r3, r5
 800103e:	4622      	mov	r2, r4
 8001040:	49c5      	ldr	r1, [pc, #788]	; (8001358 <printRadioSettings+0x740>)
 8001042:	f005 f9d1 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f8d8 	bl	8000200 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	f107 0108 	add.w	r1, r7, #8
 8001058:	230a      	movs	r3, #10
 800105a:	48be      	ldr	r0, [pc, #760]	; (8001354 <printRadioSettings+0x73c>)
 800105c:	f003 fc76 	bl	800494c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001060:	463b      	mov	r3, r7
 8001062:	2205      	movs	r2, #5
 8001064:	4619      	mov	r1, r3
 8001066:	200b      	movs	r0, #11
 8001068:	f7ff fb0a 	bl	8000680 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800106c:	793b      	ldrb	r3, [r7, #4]
 800106e:	461c      	mov	r4, r3
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	461d      	mov	r5, r3
 8001074:	78bb      	ldrb	r3, [r7, #2]
 8001076:	787a      	ldrb	r2, [r7, #1]
 8001078:	7839      	ldrb	r1, [r7, #0]
 800107a:	f107 0008 	add.w	r0, r7, #8
 800107e:	9102      	str	r1, [sp, #8]
 8001080:	9201      	str	r2, [sp, #4]
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	462b      	mov	r3, r5
 8001086:	4622      	mov	r2, r4
 8001088:	49b4      	ldr	r1, [pc, #720]	; (800135c <printRadioSettings+0x744>)
 800108a:	f005 f9ad 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f8b4 	bl	8000200 <strlen>
 8001098:	4603      	mov	r3, r0
 800109a:	b29a      	uxth	r2, r3
 800109c:	f107 0108 	add.w	r1, r7, #8
 80010a0:	230a      	movs	r3, #10
 80010a2:	48ac      	ldr	r0, [pc, #688]	; (8001354 <printRadioSettings+0x73c>)
 80010a4:	f003 fc52 	bl	800494c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80010a8:	463b      	mov	r3, r7
 80010aa:	2201      	movs	r2, #1
 80010ac:	4619      	mov	r1, r3
 80010ae:	200c      	movs	r0, #12
 80010b0:	f7ff fae6 	bl	8000680 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010b4:	783b      	ldrb	r3, [r7, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	49a8      	ldr	r1, [pc, #672]	; (8001360 <printRadioSettings+0x748>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f005 f992 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f899 	bl	8000200 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f107 0108 	add.w	r1, r7, #8
 80010d6:	230a      	movs	r3, #10
 80010d8:	489e      	ldr	r0, [pc, #632]	; (8001354 <printRadioSettings+0x73c>)
 80010da:	f003 fc37 	bl	800494c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80010de:	463b      	mov	r3, r7
 80010e0:	2201      	movs	r2, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	200d      	movs	r0, #13
 80010e6:	f7ff facb 	bl	8000680 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010ea:	783b      	ldrb	r3, [r7, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	499c      	ldr	r1, [pc, #624]	; (8001364 <printRadioSettings+0x74c>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 f977 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f87e 	bl	8000200 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	b29a      	uxth	r2, r3
 8001108:	f107 0108 	add.w	r1, r7, #8
 800110c:	230a      	movs	r3, #10
 800110e:	4891      	ldr	r0, [pc, #580]	; (8001354 <printRadioSettings+0x73c>)
 8001110:	f003 fc1c 	bl	800494c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001114:	463b      	mov	r3, r7
 8001116:	2201      	movs	r2, #1
 8001118:	4619      	mov	r1, r3
 800111a:	200e      	movs	r0, #14
 800111c:	f7ff fab0 	bl	8000680 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001120:	783b      	ldrb	r3, [r7, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	498f      	ldr	r1, [pc, #572]	; (8001368 <printRadioSettings+0x750>)
 800112a:	4618      	mov	r0, r3
 800112c:	f005 f95c 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f863 	bl	8000200 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	f107 0108 	add.w	r1, r7, #8
 8001142:	230a      	movs	r3, #10
 8001144:	4883      	ldr	r0, [pc, #524]	; (8001354 <printRadioSettings+0x73c>)
 8001146:	f003 fc01 	bl	800494c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800114a:	463b      	mov	r3, r7
 800114c:	2201      	movs	r2, #1
 800114e:	4619      	mov	r1, r3
 8001150:	200f      	movs	r0, #15
 8001152:	f7ff fa95 	bl	8000680 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001156:	783b      	ldrb	r3, [r7, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4983      	ldr	r1, [pc, #524]	; (800136c <printRadioSettings+0x754>)
 8001160:	4618      	mov	r0, r3
 8001162:	f005 f941 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f848 	bl	8000200 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f107 0108 	add.w	r1, r7, #8
 8001178:	230a      	movs	r3, #10
 800117a:	4876      	ldr	r0, [pc, #472]	; (8001354 <printRadioSettings+0x73c>)
 800117c:	f003 fbe6 	bl	800494c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001180:	463b      	mov	r3, r7
 8001182:	2205      	movs	r2, #5
 8001184:	4619      	mov	r1, r3
 8001186:	2010      	movs	r0, #16
 8001188:	f7ff fa7a 	bl	8000680 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800118c:	793b      	ldrb	r3, [r7, #4]
 800118e:	461c      	mov	r4, r3
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	461d      	mov	r5, r3
 8001194:	78bb      	ldrb	r3, [r7, #2]
 8001196:	787a      	ldrb	r2, [r7, #1]
 8001198:	7839      	ldrb	r1, [r7, #0]
 800119a:	f107 0008 	add.w	r0, r7, #8
 800119e:	9102      	str	r1, [sp, #8]
 80011a0:	9201      	str	r2, [sp, #4]
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	462b      	mov	r3, r5
 80011a6:	4622      	mov	r2, r4
 80011a8:	4971      	ldr	r1, [pc, #452]	; (8001370 <printRadioSettings+0x758>)
 80011aa:	f005 f91d 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f824 	bl	8000200 <strlen>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f107 0108 	add.w	r1, r7, #8
 80011c0:	230a      	movs	r3, #10
 80011c2:	4864      	ldr	r0, [pc, #400]	; (8001354 <printRadioSettings+0x73c>)
 80011c4:	f003 fbc2 	bl	800494c <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80011c8:	2011      	movs	r0, #17
 80011ca:	f7ff fa31 	bl	8000630 <NRF24_read_register>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	4964      	ldr	r1, [pc, #400]	; (8001374 <printRadioSettings+0x75c>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f005 f900 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f807 	bl	8000200 <strlen>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f107 0108 	add.w	r1, r7, #8
 80011fa:	230a      	movs	r3, #10
 80011fc:	4855      	ldr	r0, [pc, #340]	; (8001354 <printRadioSettings+0x73c>)
 80011fe:	f003 fba5 	bl	800494c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001202:	2012      	movs	r0, #18
 8001204:	f7ff fa14 	bl	8000630 <NRF24_read_register>
 8001208:	4603      	mov	r3, r0
 800120a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800120e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4957      	ldr	r1, [pc, #348]	; (8001378 <printRadioSettings+0x760>)
 800121c:	4618      	mov	r0, r3
 800121e:	f005 f8e3 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	4618      	mov	r0, r3
 8001228:	f7fe ffea 	bl	8000200 <strlen>
 800122c:	4603      	mov	r3, r0
 800122e:	b29a      	uxth	r2, r3
 8001230:	f107 0108 	add.w	r1, r7, #8
 8001234:	230a      	movs	r3, #10
 8001236:	4847      	ldr	r0, [pc, #284]	; (8001354 <printRadioSettings+0x73c>)
 8001238:	f003 fb88 	bl	800494c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 800123c:	2013      	movs	r0, #19
 800123e:	f7ff f9f7 	bl	8000630 <NRF24_read_register>
 8001242:	4603      	mov	r3, r0
 8001244:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001248:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800124c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4949      	ldr	r1, [pc, #292]	; (800137c <printRadioSettings+0x764>)
 8001256:	4618      	mov	r0, r3
 8001258:	f005 f8c6 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	4618      	mov	r0, r3
 8001262:	f7fe ffcd 	bl	8000200 <strlen>
 8001266:	4603      	mov	r3, r0
 8001268:	b29a      	uxth	r2, r3
 800126a:	f107 0108 	add.w	r1, r7, #8
 800126e:	230a      	movs	r3, #10
 8001270:	4838      	ldr	r0, [pc, #224]	; (8001354 <printRadioSettings+0x73c>)
 8001272:	f003 fb6b 	bl	800494c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8001276:	2014      	movs	r0, #20
 8001278:	f7ff f9da 	bl	8000630 <NRF24_read_register>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001282:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	493c      	ldr	r1, [pc, #240]	; (8001380 <printRadioSettings+0x768>)
 8001290:	4618      	mov	r0, r3
 8001292:	f005 f8a9 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	4618      	mov	r0, r3
 800129c:	f7fe ffb0 	bl	8000200 <strlen>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	f107 0108 	add.w	r1, r7, #8
 80012a8:	230a      	movs	r3, #10
 80012aa:	482a      	ldr	r0, [pc, #168]	; (8001354 <printRadioSettings+0x73c>)
 80012ac:	f003 fb4e 	bl	800494c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80012b0:	2015      	movs	r0, #21
 80012b2:	f7ff f9bd 	bl	8000630 <NRF24_read_register>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80012bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	492e      	ldr	r1, [pc, #184]	; (8001384 <printRadioSettings+0x76c>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f005 f88c 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7fe ff93 	bl	8000200 <strlen>
 80012da:	4603      	mov	r3, r0
 80012dc:	b29a      	uxth	r2, r3
 80012de:	f107 0108 	add.w	r1, r7, #8
 80012e2:	230a      	movs	r3, #10
 80012e4:	481b      	ldr	r0, [pc, #108]	; (8001354 <printRadioSettings+0x73c>)
 80012e6:	f003 fb31 	bl	800494c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 80012ea:	2016      	movs	r0, #22
 80012ec:	f7ff f9a0 	bl	8000630 <NRF24_read_register>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80012f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	4921      	ldr	r1, [pc, #132]	; (8001388 <printRadioSettings+0x770>)
 8001304:	4618      	mov	r0, r3
 8001306:	f005 f86f 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ff76 	bl	8000200 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	b29a      	uxth	r2, r3
 8001318:	f107 0108 	add.w	r1, r7, #8
 800131c:	230a      	movs	r3, #10
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <printRadioSettings+0x73c>)
 8001320:	f003 fb14 	bl	800494c <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001324:	201c      	movs	r0, #28
 8001326:	f7ff f983 	bl	8000630 <NRF24_read_register>
 800132a:	4603      	mov	r3, r0
 800132c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001330:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001334:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001338:	2b00      	cmp	r3, #0
 800133a:	bfcc      	ite	gt
 800133c:	2301      	movgt	r3, #1
 800133e:	2300      	movle	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001344:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	e01e      	b.n	800138c <printRadioSettings+0x774>
 800134e:	bf00      	nop
 8001350:	08006dac 	.word	0x08006dac
 8001354:	200000fc 	.word	0x200000fc
 8001358:	08006dc0 	.word	0x08006dc0
 800135c:	08006df0 	.word	0x08006df0
 8001360:	08006e20 	.word	0x08006e20
 8001364:	08006e48 	.word	0x08006e48
 8001368:	08006e70 	.word	0x08006e70
 800136c:	08006e98 	.word	0x08006e98
 8001370:	08006ec0 	.word	0x08006ec0
 8001374:	08006eec 	.word	0x08006eec
 8001378:	08006f08 	.word	0x08006f08
 800137c:	08006f24 	.word	0x08006f24
 8001380:	08006f40 	.word	0x08006f40
 8001384:	08006f5c 	.word	0x08006f5c
 8001388:	08006f78 	.word	0x08006f78
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800138c:	2b00      	cmp	r3, #0
 800138e:	bfcc      	ite	gt
 8001390:	2301      	movgt	r3, #1
 8001392:	2300      	movle	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001398:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800139c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bfcc      	ite	gt
 80013a4:	2301      	movgt	r3, #1
 80013a6:	2300      	movle	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013b0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bfcc      	ite	gt
 80013b8:	2301      	movgt	r3, #1
 80013ba:	2300      	movle	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bfcc      	ite	gt
 80013cc:	2301      	movgt	r3, #1
 80013ce:	2300      	movle	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80013d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bfcc      	ite	gt
 80013e0:	2301      	movgt	r3, #1
 80013e2:	2300      	movle	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	f107 0008 	add.w	r0, r7, #8
 80013ea:	9303      	str	r3, [sp, #12]
 80013ec:	9402      	str	r4, [sp, #8]
 80013ee:	9101      	str	r1, [sp, #4]
 80013f0:	9200      	str	r2, [sp, #0]
 80013f2:	4633      	mov	r3, r6
 80013f4:	462a      	mov	r2, r5
 80013f6:	494a      	ldr	r1, [pc, #296]	; (8001520 <printRadioSettings+0x908>)
 80013f8:	f004 fff6 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4618      	mov	r0, r3
 8001402:	f7fe fefd 	bl	8000200 <strlen>
 8001406:	4603      	mov	r3, r0
 8001408:	b29a      	uxth	r2, r3
 800140a:	f107 0108 	add.w	r1, r7, #8
 800140e:	230a      	movs	r3, #10
 8001410:	4844      	ldr	r0, [pc, #272]	; (8001524 <printRadioSettings+0x90c>)
 8001412:	f003 fa9b 	bl	800494c <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001416:	201d      	movs	r0, #29
 8001418:	f7ff f90a 	bl	8000630 <NRF24_read_register>
 800141c:	4603      	mov	r3, r0
 800141e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001422:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00c      	beq.n	8001448 <printRadioSettings+0x830>
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	4a3d      	ldr	r2, [pc, #244]	; (8001528 <printRadioSettings+0x910>)
 8001434:	461c      	mov	r4, r3
 8001436:	4615      	mov	r5, r2
 8001438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001440:	6020      	str	r0, [r4, #0]
 8001442:	3404      	adds	r4, #4
 8001444:	8021      	strh	r1, [r4, #0]
 8001446:	e00e      	b.n	8001466 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	4a37      	ldr	r2, [pc, #220]	; (800152c <printRadioSettings+0x914>)
 800144e:	461c      	mov	r4, r3
 8001450:	4615      	mov	r5, r2
 8001452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001456:	e895 0003 	ldmia.w	r5, {r0, r1}
 800145a:	6020      	str	r0, [r4, #0]
 800145c:	3404      	adds	r4, #4
 800145e:	8021      	strh	r1, [r4, #0]
 8001460:	3402      	adds	r4, #2
 8001462:	0c0b      	lsrs	r3, r1, #16
 8001464:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe fec8 	bl	8000200 <strlen>
 8001470:	4603      	mov	r3, r0
 8001472:	b29a      	uxth	r2, r3
 8001474:	f107 0108 	add.w	r1, r7, #8
 8001478:	230a      	movs	r3, #10
 800147a:	482a      	ldr	r0, [pc, #168]	; (8001524 <printRadioSettings+0x90c>)
 800147c:	f003 fa66 	bl	800494c <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001480:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00b      	beq.n	80014a4 <printRadioSettings+0x88c>
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	4a27      	ldr	r2, [pc, #156]	; (8001530 <printRadioSettings+0x918>)
 8001492:	461c      	mov	r4, r3
 8001494:	4615      	mov	r5, r2
 8001496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800149a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800149e:	c403      	stmia	r4!, {r0, r1}
 80014a0:	8022      	strh	r2, [r4, #0]
 80014a2:	e00d      	b.n	80014c0 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	4a22      	ldr	r2, [pc, #136]	; (8001534 <printRadioSettings+0x91c>)
 80014aa:	461c      	mov	r4, r3
 80014ac:	4615      	mov	r5, r2
 80014ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014b6:	c403      	stmia	r4!, {r0, r1}
 80014b8:	8022      	strh	r2, [r4, #0]
 80014ba:	3402      	adds	r4, #2
 80014bc:	0c13      	lsrs	r3, r2, #16
 80014be:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe fe9b 	bl	8000200 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	f107 0108 	add.w	r1, r7, #8
 80014d2:	230a      	movs	r3, #10
 80014d4:	4813      	ldr	r0, [pc, #76]	; (8001524 <printRadioSettings+0x90c>)
 80014d6:	f003 fa39 	bl	800494c <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	4a16      	ldr	r2, [pc, #88]	; (8001538 <printRadioSettings+0x920>)
 80014e0:	461c      	mov	r4, r3
 80014e2:	4615      	mov	r5, r2
 80014e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	8022      	strh	r2, [r4, #0]
 80014f6:	3402      	adds	r4, #2
 80014f8:	0c1b      	lsrs	r3, r3, #16
 80014fa:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe fe7d 	bl	8000200 <strlen>
 8001506:	4603      	mov	r3, r0
 8001508:	b29a      	uxth	r2, r3
 800150a:	f107 0108 	add.w	r1, r7, #8
 800150e:	230a      	movs	r3, #10
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <printRadioSettings+0x90c>)
 8001512:	f003 fa1b 	bl	800494c <HAL_UART_Transmit>
}
 8001516:	bf00      	nop
 8001518:	3774      	adds	r7, #116	; 0x74
 800151a:	46bd      	mov	sp, r7
 800151c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151e:	bf00      	nop
 8001520:	08006f94 	.word	0x08006f94
 8001524:	200000fc 	.word	0x200000fc
 8001528:	08006fe0 	.word	0x08006fe0
 800152c:	08006ff8 	.word	0x08006ff8
 8001530:	08007010 	.word	0x08007010
 8001534:	0800702c 	.word	0x0800702c
 8001538:	08006c00 	.word	0x08006c00

0800153c <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 800153c:	b084      	sub	sp, #16
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
 8001542:	f107 0c08 	add.w	ip, r7, #8
 8001546:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <nrf24_DebugUART_Init+0x2c>)
 800154c:	4618      	mov	r0, r3
 800154e:	f107 0108 	add.w	r1, r7, #8
 8001552:	238c      	movs	r3, #140	; 0x8c
 8001554:	461a      	mov	r2, r3
 8001556:	f004 ff33 	bl	80063c0 <memcpy>
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001562:	b004      	add	sp, #16
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200000fc 	.word	0x200000fc

0800156c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b0a1      	sub	sp, #132	; 0x84
 8001570:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001572:	f000 fada 	bl	8001b2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001576:	f000 f82f 	bl	80015d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157a:	f000 f92d 	bl	80017d8 <MX_GPIO_Init>
  MX_SPI2_Init();
 800157e:	f000 f8a1 	bl	80016c4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001582:	f000 f8dd 	bl	8001740 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  NRF24_begin(CEpin_GPIO_Port, CSNpin_Pin, CEpin_Pin, hspi2);
 8001586:	4c12      	ldr	r4, [pc, #72]	; (80015d0 <main+0x64>)
 8001588:	4668      	mov	r0, sp
 800158a:	1d23      	adds	r3, r4, #4
 800158c:	2260      	movs	r2, #96	; 0x60
 800158e:	4619      	mov	r1, r3
 8001590:	f004 ff16 	bl	80063c0 <memcpy>
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	2201      	movs	r2, #1
 8001598:	2120      	movs	r1, #32
 800159a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159e:	f7ff f921 	bl	80007e4 <NRF24_begin>
  nrf24_DebugUART_Init(huart2);
 80015a2:	4c0c      	ldr	r4, [pc, #48]	; (80015d4 <main+0x68>)
 80015a4:	4668      	mov	r0, sp
 80015a6:	f104 0310 	add.w	r3, r4, #16
 80015aa:	227c      	movs	r2, #124	; 0x7c
 80015ac:	4619      	mov	r1, r3
 80015ae:	f004 ff07 	bl	80063c0 <memcpy>
 80015b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015b6:	f7ff ffc1 	bl	800153c <nrf24_DebugUART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if(NRF24_Check()){
 80015ba:	f7ff f8e3 	bl	8000784 <NRF24_Check>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <main+0x5e>
	  //Success!
	  printRadioSettings();
 80015c4:	f7ff fb28 	bl	8000c18 <printRadioSettings>
 80015c8:	e000      	b.n	80015cc <main+0x60>
  }//end if
  else{
	  //Failure
	  while(1){};
 80015ca:	e7fe      	b.n	80015ca <main+0x5e>
  }//end else
  while (1)
 80015cc:	e7fe      	b.n	80015cc <main+0x60>
 80015ce:	bf00      	nop
 80015d0:	20000194 	.word	0x20000194
 80015d4:	200001f8 	.word	0x200001f8

080015d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0be      	sub	sp, #248	; 0xf8
 80015dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015de:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015e2:	2244      	movs	r2, #68	; 0x44
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f004 fef5 	bl	80063d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	229c      	movs	r2, #156	; 0x9c
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f004 fee7 	bl	80063d6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001608:	2000      	movs	r0, #0
 800160a:	f000 fdd1 	bl	80021b0 <HAL_PWREx_ControlVoltageScaling>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001614:	f000 f91e 	bl	8001854 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001618:	2310      	movs	r3, #16
 800161a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800161e:	2301      	movs	r3, #1
 8001620:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800162a:	2360      	movs	r3, #96	; 0x60
 800162c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001636:	2301      	movs	r3, #1
 8001638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800163c:	2301      	movs	r3, #1
 800163e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001642:	233c      	movs	r3, #60	; 0x3c
 8001644:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8001648:	2305      	movs	r3, #5
 800164a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800164e:	2302      	movs	r3, #2
 8001650:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fe4a 	bl	80022f8 <HAL_RCC_OscConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800166a:	f000 f8f3 	bl	8001854 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166e:	230f      	movs	r3, #15
 8001670:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001674:	2303      	movs	r3, #3
 8001676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800168c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001690:	2105      	movs	r1, #5
 8001692:	4618      	mov	r0, r3
 8001694:	f001 fa56 	bl	8002b44 <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800169e:	f000 f8d9 	bl	8001854 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 fcf5 	bl	800309c <HAL_RCCEx_PeriphCLKConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80016b8:	f000 f8cc 	bl	8001854 <Error_Handler>
  }
}
 80016bc:	bf00      	nop
 80016be:	37f8      	adds	r7, #248	; 0xf8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <MX_SPI2_Init+0x74>)
 80016ca:	4a1c      	ldr	r2, [pc, #112]	; (800173c <MX_SPI2_Init+0x78>)
 80016cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_SPI2_Init+0x74>)
 80016d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <MX_SPI2_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <MX_SPI2_Init+0x74>)
 80016de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_SPI2_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <MX_SPI2_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_SPI2_Init+0x74>)
 80016f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_SPI2_Init+0x74>)
 80016fa:	2220      	movs	r2, #32
 80016fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_SPI2_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_SPI2_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_SPI2_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_SPI2_Init+0x74>)
 8001712:	2207      	movs	r2, #7
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_SPI2_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_SPI2_Init+0x74>)
 800171e:	2208      	movs	r2, #8
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_SPI2_Init+0x74>)
 8001724:	f002 fa22 	bl	8003b6c <HAL_SPI_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800172e:	f000 f891 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000194 	.word	0x20000194
 800173c:	40003800 	.word	0x40003800

08001740 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <MX_USART2_UART_Init+0x90>)
 8001746:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <MX_USART2_UART_Init+0x94>)
 8001748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <MX_USART2_UART_Init+0x90>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <MX_USART2_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <MX_USART2_UART_Init+0x90>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <MX_USART2_UART_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MX_USART2_UART_Init+0x90>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <MX_USART2_UART_Init+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <MX_USART2_UART_Init+0x90>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <MX_USART2_UART_Init+0x90>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <MX_USART2_UART_Init+0x90>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <MX_USART2_UART_Init+0x90>)
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001788:	4811      	ldr	r0, [pc, #68]	; (80017d0 <MX_USART2_UART_Init+0x90>)
 800178a:	f003 f88f 	bl	80048ac <HAL_UART_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001794:	f000 f85e 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	480d      	ldr	r0, [pc, #52]	; (80017d0 <MX_USART2_UART_Init+0x90>)
 800179c:	f004 fd01 	bl	80061a2 <HAL_UARTEx_SetTxFifoThreshold>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80017a6:	f000 f855 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017aa:	2100      	movs	r1, #0
 80017ac:	4808      	ldr	r0, [pc, #32]	; (80017d0 <MX_USART2_UART_Init+0x90>)
 80017ae:	f004 fd36 	bl	800621e <HAL_UARTEx_SetRxFifoThreshold>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80017b8:	f000 f84c 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017bc:	4804      	ldr	r0, [pc, #16]	; (80017d0 <MX_USART2_UART_Init+0x90>)
 80017be:	f004 fcb7 	bl	8006130 <HAL_UARTEx_DisableFifoMode>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017c8:	f000 f844 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200001f8 	.word	0x200001f8
 80017d4:	40004400 	.word	0x40004400

080017d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_GPIO_Init+0x78>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	4a17      	ldr	r2, [pc, #92]	; (8001850 <MX_GPIO_Init+0x78>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_GPIO_Init+0x78>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_GPIO_Init+0x78>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	4a11      	ldr	r2, [pc, #68]	; (8001850 <MX_GPIO_Init+0x78>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_GPIO_Init+0x78>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CEpin_Pin|CSNpin_Pin, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	2121      	movs	r1, #33	; 0x21
 8001822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001826:	f000 fc8b 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CEpin_Pin CSNpin_Pin */
  GPIO_InitStruct.Pin = CEpin_Pin|CSNpin_Pin;
 800182a:	2321      	movs	r3, #33	; 0x21
 800182c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	4619      	mov	r1, r3
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f000 faea 	bl	8001e1c <HAL_GPIO_Init>

}
 8001848:	bf00      	nop
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000

08001854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_MspInit+0x44>)
 800186c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186e:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <HAL_MspInit+0x44>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6613      	str	r3, [r2, #96]	; 0x60
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_MspInit+0x44>)
 8001878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_MspInit+0x44>)
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <HAL_MspInit+0x44>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	6593      	str	r3, [r2, #88]	; 0x58
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_MspInit+0x44>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000

080018ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a17      	ldr	r2, [pc, #92]	; (8001928 <HAL_SPI_MspInit+0x7c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d128      	bne.n	8001920 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	4a16      	ldr	r2, [pc, #88]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d8:	6593      	str	r3, [r2, #88]	; 0x58
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13;
 80018fe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001910:	2305      	movs	r3, #5
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_SPI_MspInit+0x84>)
 800191c:	f000 fa7e 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	; 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40003800 	.word	0x40003800
 800192c:	40021000 	.word	0x40021000
 8001930:	48000400 	.word	0x48000400

08001934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <HAL_UART_MspInit+0x7c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d128      	bne.n	80019a8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <HAL_UART_MspInit+0x80>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <HAL_UART_MspInit+0x80>)
 800195c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001960:	6593      	str	r3, [r2, #88]	; 0x58
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_UART_MspInit+0x80>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_UART_MspInit+0x80>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a10      	ldr	r2, [pc, #64]	; (80019b4 <HAL_UART_MspInit+0x80>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_UART_MspInit+0x80>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8001986:	230c      	movs	r3, #12
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001996:	2307      	movs	r3, #7
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a4:	f000 fa3a 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40004400 	.word	0x40004400
 80019b4:	40021000 	.word	0x40021000

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <HardFault_Handler+0x4>

080019cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <MemManage_Handler+0x4>

080019d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <UsageFault_Handler+0x4>

080019de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0c:	f000 f8e0 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <_sbrk+0x50>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x16>
		heap_end = &end;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <_sbrk+0x50>)
 8001a26:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <_sbrk+0x54>)
 8001a28:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <_sbrk+0x50>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <_sbrk+0x50>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	466a      	mov	r2, sp
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d907      	bls.n	8001a4e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a3e:	f004 fc95 	bl	800636c <__errno>
 8001a42:	4602      	mov	r2, r0
 8001a44:	230c      	movs	r3, #12
 8001a46:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4c:	e006      	b.n	8001a5c <_sbrk+0x48>
	}

	heap_end += incr;
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <_sbrk+0x50>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a03      	ldr	r2, [pc, #12]	; (8001a64 <_sbrk+0x50>)
 8001a58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000188 	.word	0x20000188
 8001a68:	20000290 	.word	0x20000290

08001a6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <SystemInit+0x64>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a76:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <SystemInit+0x64>)
 8001a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <SystemInit+0x68>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <SystemInit+0x68>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <SystemInit+0x68>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <SystemInit+0x68>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a0f      	ldr	r2, [pc, #60]	; (8001ad4 <SystemInit+0x68>)
 8001a98:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a9c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001aa0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <SystemInit+0x68>)
 8001aa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <SystemInit+0x68>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <SystemInit+0x68>)
 8001ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <SystemInit+0x68>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <SystemInit+0x64>)
 8001abe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ac2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001adc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ade:	e003      	b.n	8001ae8 <LoopCopyDataInit>

08001ae0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ae2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ae4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ae6:	3104      	adds	r1, #4

08001ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ae8:	480b      	ldr	r0, [pc, #44]	; (8001b18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001aec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001aee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001af0:	d3f6      	bcc.n	8001ae0 <CopyDataInit>
	ldr	r2, =_sbss
 8001af2:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001af4:	e002      	b.n	8001afc <LoopFillZerobss>

08001af6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001af6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001af8:	f842 3b04 	str.w	r3, [r2], #4

08001afc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <LoopForever+0x16>)
	cmp	r2, r3
 8001afe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b00:	d3f9      	bcc.n	8001af6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b02:	f7ff ffb3 	bl	8001a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b06:	f004 fc37 	bl	8006378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b0a:	f7ff fd2f 	bl	800156c <main>

08001b0e <LoopForever>:

LoopForever:
    b LoopForever
 8001b0e:	e7fe      	b.n	8001b0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b10:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001b14:	080071e0 	.word	0x080071e0
	ldr	r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b1c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001b20:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001b24:	2000028c 	.word	0x2000028c

08001b28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC1_IRQHandler>

08001b2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b34:	2003      	movs	r0, #3
 8001b36:	f000 f93d 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f000 f80e 	bl	8001b5c <HAL_InitTick>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	71fb      	strb	r3, [r7, #7]
 8001b4a:	e001      	b.n	8001b50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b4c:	f7ff fe8a 	bl	8001864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b50:	79fb      	ldrb	r3, [r7, #7]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <HAL_InitTick+0x68>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d022      	beq.n	8001bb6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_InitTick+0x6c>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_InitTick+0x68>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 f93c 	bl	8001e02 <HAL_SYSTICK_Config>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10f      	bne.n	8001bb0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b0f      	cmp	r3, #15
 8001b94:	d809      	bhi.n	8001baa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b96:	2200      	movs	r2, #0
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9e:	f000 f914 	bl	8001dca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <HAL_InitTick+0x70>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	e007      	b.n	8001bba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e004      	b.n	8001bba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e001      	b.n	8001bba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_IncTick+0x1c>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_IncTick+0x20>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a03      	ldr	r2, [pc, #12]	; (8001bec <HAL_IncTick+0x1c>)
 8001be0:	6013      	str	r3, [r2, #0]
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	20000284 	.word	0x20000284
 8001bf0:	20000008 	.word	0x20000008

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_GetTick+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000284 	.word	0x20000284

08001c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff ffee 	bl	8001bf4 <HAL_GetTick>
 8001c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d004      	beq.n	8001c30 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_Delay+0x40>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c30:	bf00      	nop
 8001c32:	f7ff ffdf 	bl	8001bf4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d8f7      	bhi.n	8001c32 <HAL_Delay+0x26>
  {
  }
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000008 	.word	0x20000008

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	db0a      	blt.n	8001cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	490c      	ldr	r1, [pc, #48]	; (8001d00 <__NVIC_SetPriority+0x4c>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cdc:	e00a      	b.n	8001cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4908      	ldr	r1, [pc, #32]	; (8001d04 <__NVIC_SetPriority+0x50>)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3b04      	subs	r3, #4
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	761a      	strb	r2, [r3, #24]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f1c3 0307 	rsb	r3, r3, #7
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf28      	it	cs
 8001d26:	2304      	movcs	r3, #4
 8001d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d902      	bls.n	8001d38 <NVIC_EncodePriority+0x30>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b03      	subs	r3, #3
 8001d36:	e000      	b.n	8001d3a <NVIC_EncodePriority+0x32>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	4313      	orrs	r3, r2
         );
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d80:	d301      	bcc.n	8001d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00f      	b.n	8001da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <SysTick_Config+0x40>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8e:	210f      	movs	r1, #15
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f7ff ff8e 	bl	8001cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <SysTick_Config+0x40>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <SysTick_Config+0x40>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	e000e010 	.word	0xe000e010

08001db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff47 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff ff5c 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff8e 	bl	8001d08 <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5d 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffb0 	bl	8001d70 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2a:	e166      	b.n	80020fa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8158 	beq.w	80020f4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d00b      	beq.n	8001e64 <HAL_GPIO_Init+0x48>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d007      	beq.n	8001e64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e58:	2b11      	cmp	r3, #17
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b12      	cmp	r3, #18
 8001e62:	d130      	bne.n	8001ec6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	f003 0201 	and.w	r2, r3, #1
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0xea>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b12      	cmp	r3, #18
 8001f04:	d123      	bne.n	8001f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	08da      	lsrs	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3208      	adds	r2, #8
 8001f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3208      	adds	r2, #8
 8001f48:	6939      	ldr	r1, [r7, #16]
 8001f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0203 	and.w	r2, r3, #3
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80b2 	beq.w	80020f4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f90:	4b61      	ldr	r3, [pc, #388]	; (8002118 <HAL_GPIO_Init+0x2fc>)
 8001f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f94:	4a60      	ldr	r2, [pc, #384]	; (8002118 <HAL_GPIO_Init+0x2fc>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f9c:	4b5e      	ldr	r3, [pc, #376]	; (8002118 <HAL_GPIO_Init+0x2fc>)
 8001f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa8:	4a5c      	ldr	r2, [pc, #368]	; (800211c <HAL_GPIO_Init+0x300>)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	3302      	adds	r3, #2
 8001fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fd2:	d02b      	beq.n	800202c <HAL_GPIO_Init+0x210>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a52      	ldr	r2, [pc, #328]	; (8002120 <HAL_GPIO_Init+0x304>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d025      	beq.n	8002028 <HAL_GPIO_Init+0x20c>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a51      	ldr	r2, [pc, #324]	; (8002124 <HAL_GPIO_Init+0x308>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d01f      	beq.n	8002024 <HAL_GPIO_Init+0x208>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a50      	ldr	r2, [pc, #320]	; (8002128 <HAL_GPIO_Init+0x30c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d019      	beq.n	8002020 <HAL_GPIO_Init+0x204>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a4f      	ldr	r2, [pc, #316]	; (800212c <HAL_GPIO_Init+0x310>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <HAL_GPIO_Init+0x200>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a4e      	ldr	r2, [pc, #312]	; (8002130 <HAL_GPIO_Init+0x314>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00d      	beq.n	8002018 <HAL_GPIO_Init+0x1fc>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a4d      	ldr	r2, [pc, #308]	; (8002134 <HAL_GPIO_Init+0x318>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d007      	beq.n	8002014 <HAL_GPIO_Init+0x1f8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a4c      	ldr	r2, [pc, #304]	; (8002138 <HAL_GPIO_Init+0x31c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_GPIO_Init+0x1f4>
 800200c:	2307      	movs	r3, #7
 800200e:	e00e      	b.n	800202e <HAL_GPIO_Init+0x212>
 8002010:	2308      	movs	r3, #8
 8002012:	e00c      	b.n	800202e <HAL_GPIO_Init+0x212>
 8002014:	2306      	movs	r3, #6
 8002016:	e00a      	b.n	800202e <HAL_GPIO_Init+0x212>
 8002018:	2305      	movs	r3, #5
 800201a:	e008      	b.n	800202e <HAL_GPIO_Init+0x212>
 800201c:	2304      	movs	r3, #4
 800201e:	e006      	b.n	800202e <HAL_GPIO_Init+0x212>
 8002020:	2303      	movs	r3, #3
 8002022:	e004      	b.n	800202e <HAL_GPIO_Init+0x212>
 8002024:	2302      	movs	r3, #2
 8002026:	e002      	b.n	800202e <HAL_GPIO_Init+0x212>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_GPIO_Init+0x212>
 800202c:	2300      	movs	r3, #0
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	f002 0203 	and.w	r2, r2, #3
 8002034:	0092      	lsls	r2, r2, #2
 8002036:	4093      	lsls	r3, r2
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800203e:	4937      	ldr	r1, [pc, #220]	; (800211c <HAL_GPIO_Init+0x300>)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800204c:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HAL_GPIO_Init+0x320>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002070:	4a32      	ldr	r2, [pc, #200]	; (800213c <HAL_GPIO_Init+0x320>)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002076:	4b31      	ldr	r3, [pc, #196]	; (800213c <HAL_GPIO_Init+0x320>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43db      	mvns	r3, r3
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800209a:	4a28      	ldr	r2, [pc, #160]	; (800213c <HAL_GPIO_Init+0x320>)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020a0:	4b26      	ldr	r3, [pc, #152]	; (800213c <HAL_GPIO_Init+0x320>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020c4:	4a1d      	ldr	r2, [pc, #116]	; (800213c <HAL_GPIO_Init+0x320>)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <HAL_GPIO_Init+0x320>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4013      	ands	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ee:	4a13      	ldr	r2, [pc, #76]	; (800213c <HAL_GPIO_Init+0x320>)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	3301      	adds	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	f47f ae91 	bne.w	8001e2c <HAL_GPIO_Init+0x10>
  }
}
 800210a:	bf00      	nop
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	40010000 	.word	0x40010000
 8002120:	48000400 	.word	0x48000400
 8002124:	48000800 	.word	0x48000800
 8002128:	48000c00 	.word	0x48000c00
 800212c:	48001000 	.word	0x48001000
 8002130:	48001400 	.word	0x48001400
 8002134:	48001800 	.word	0x48001800
 8002138:	48001c00 	.word	0x48001c00
 800213c:	40010400 	.word	0x40010400

08002140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
 800214c:	4613      	mov	r3, r2
 800214e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002150:	787b      	ldrb	r3, [r7, #1]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800215c:	e002      	b.n	8002164 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <HAL_PWREx_GetVoltageRange+0x3c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800217c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002180:	d102      	bne.n	8002188 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002186:	e00b      	b.n	80021a0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_PWREx_GetVoltageRange+0x3c>)
 800218a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002196:	d102      	bne.n	800219e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800219c:	e000      	b.n	80021a0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800219e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40007000 	.word	0x40007000

080021b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d141      	bne.n	8002242 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021be:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ca:	d131      	bne.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021cc:	4b47      	ldr	r3, [pc, #284]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021d2:	4a46      	ldr	r2, [pc, #280]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021dc:	4b43      	ldr	r3, [pc, #268]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021e4:	4a41      	ldr	r2, [pc, #260]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80021ec:	4b40      	ldr	r3, [pc, #256]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2232      	movs	r2, #50	; 0x32
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
 80021f6:	4a3f      	ldr	r2, [pc, #252]	; (80022f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	0c9b      	lsrs	r3, r3, #18
 80021fe:	3301      	adds	r3, #1
 8002200:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002202:	e002      	b.n	800220a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3b01      	subs	r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220a:	4b38      	ldr	r3, [pc, #224]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002216:	d102      	bne.n	800221e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f2      	bne.n	8002204 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800221e:	4b33      	ldr	r3, [pc, #204]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222a:	d158      	bne.n	80022de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e057      	b.n	80022e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002230:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002236:	4a2d      	ldr	r2, [pc, #180]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800223c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002240:	e04d      	b.n	80022de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002248:	d141      	bne.n	80022ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800224a:	4b28      	ldr	r3, [pc, #160]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002256:	d131      	bne.n	80022bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002258:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800225e:	4a23      	ldr	r2, [pc, #140]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002264:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002268:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002270:	4a1e      	ldr	r2, [pc, #120]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002276:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2232      	movs	r2, #50	; 0x32
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	0c9b      	lsrs	r3, r3, #18
 800228a:	3301      	adds	r3, #1
 800228c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800228e:	e002      	b.n	8002296 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3b01      	subs	r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a2:	d102      	bne.n	80022aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f2      	bne.n	8002290 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b6:	d112      	bne.n	80022de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e011      	b.n	80022e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022cc:	e007      	b.n	80022de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022dc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40007000 	.word	0x40007000
 80022f0:	20000000 	.word	0x20000000
 80022f4:	431bde83 	.word	0x431bde83

080022f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d102      	bne.n	800230c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	f000 bc16 	b.w	8002b38 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800230c:	4ba0      	ldr	r3, [pc, #640]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 030c 	and.w	r3, r3, #12
 8002314:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002316:	4b9e      	ldr	r3, [pc, #632]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80e4 	beq.w	80024f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d007      	beq.n	8002344 <HAL_RCC_OscConfig+0x4c>
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b0c      	cmp	r3, #12
 8002338:	f040 808b 	bne.w	8002452 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2b01      	cmp	r3, #1
 8002340:	f040 8087 	bne.w	8002452 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002344:	4b92      	ldr	r3, [pc, #584]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_RCC_OscConfig+0x64>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e3ed      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	4b8b      	ldr	r3, [pc, #556]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d004      	beq.n	8002376 <HAL_RCC_OscConfig+0x7e>
 800236c:	4b88      	ldr	r3, [pc, #544]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002374:	e005      	b.n	8002382 <HAL_RCC_OscConfig+0x8a>
 8002376:	4b86      	ldr	r3, [pc, #536]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 8002378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002382:	4293      	cmp	r3, r2
 8002384:	d223      	bcs.n	80023ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fdc6 	bl	8002f1c <RCC_SetFlashLatencyFromMSIRange>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e3ce      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239a:	4b7d      	ldr	r3, [pc, #500]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7c      	ldr	r2, [pc, #496]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b7a      	ldr	r3, [pc, #488]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4977      	ldr	r1, [pc, #476]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b8:	4b75      	ldr	r3, [pc, #468]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	4972      	ldr	r1, [pc, #456]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
 80023cc:	e025      	b.n	800241a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ce:	4b70      	ldr	r3, [pc, #448]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a6f      	ldr	r2, [pc, #444]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80023d4:	f043 0308 	orr.w	r3, r3, #8
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	4b6d      	ldr	r3, [pc, #436]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	496a      	ldr	r1, [pc, #424]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ec:	4b68      	ldr	r3, [pc, #416]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	4965      	ldr	r1, [pc, #404]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fd86 	bl	8002f1c <RCC_SetFlashLatencyFromMSIRange>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e38e      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800241a:	f000 fcbf 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 800241e:	4601      	mov	r1, r0
 8002420:	4b5b      	ldr	r3, [pc, #364]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	4a5a      	ldr	r2, [pc, #360]	; (8002594 <HAL_RCC_OscConfig+0x29c>)
 800242c:	5cd3      	ldrb	r3, [r2, r3]
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	fa21 f303 	lsr.w	r3, r1, r3
 8002436:	4a58      	ldr	r2, [pc, #352]	; (8002598 <HAL_RCC_OscConfig+0x2a0>)
 8002438:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800243a:	4b58      	ldr	r3, [pc, #352]	; (800259c <HAL_RCC_OscConfig+0x2a4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fb8c 	bl	8001b5c <HAL_InitTick>
 8002444:	4603      	mov	r3, r0
 8002446:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d052      	beq.n	80024f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	e372      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d032      	beq.n	80024c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800245a:	4b4d      	ldr	r3, [pc, #308]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a4c      	ldr	r2, [pc, #304]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002466:	f7ff fbc5 	bl	8001bf4 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800246e:	f7ff fbc1 	bl	8001bf4 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e35b      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002480:	4b43      	ldr	r3, [pc, #268]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800248c:	4b40      	ldr	r3, [pc, #256]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a3f      	ldr	r2, [pc, #252]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 8002492:	f043 0308 	orr.w	r3, r3, #8
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b3d      	ldr	r3, [pc, #244]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	493a      	ldr	r1, [pc, #232]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024aa:	4b39      	ldr	r3, [pc, #228]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	4935      	ldr	r1, [pc, #212]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
 80024be:	e01a      	b.n	80024f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024c0:	4b33      	ldr	r3, [pc, #204]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a32      	ldr	r2, [pc, #200]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024cc:	f7ff fb92 	bl	8001bf4 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024d4:	f7ff fb8e 	bl	8001bf4 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e328      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024e6:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x1dc>
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d073      	beq.n	80025ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d005      	beq.n	8002514 <HAL_RCC_OscConfig+0x21c>
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d10e      	bne.n	800252c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d10b      	bne.n	800252c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	4b1e      	ldr	r3, [pc, #120]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d063      	beq.n	80025e8 <HAL_RCC_OscConfig+0x2f0>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d15f      	bne.n	80025e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e305      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x24c>
 8002536:	4b16      	ldr	r3, [pc, #88]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a15      	ldr	r2, [pc, #84]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e01d      	b.n	8002580 <HAL_RCC_OscConfig+0x288>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x270>
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a0c      	ldr	r2, [pc, #48]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0x288>
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a08      	ldr	r2, [pc, #32]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a05      	ldr	r2, [pc, #20]	; (8002590 <HAL_RCC_OscConfig+0x298>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7ff fb34 	bl	8001bf4 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800258e:	e010      	b.n	80025b2 <HAL_RCC_OscConfig+0x2ba>
 8002590:	40021000 	.word	0x40021000
 8002594:	08007154 	.word	0x08007154
 8002598:	20000000 	.word	0x20000000
 800259c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a0:	f7ff fb28 	bl	8001bf4 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e2c2      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025b2:	4baf      	ldr	r3, [pc, #700]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x2a8>
 80025be:	e014      	b.n	80025ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7ff fb18 	bl	8001bf4 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7ff fb14 	bl	8001bf4 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e2ae      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025da:	4ba5      	ldr	r3, [pc, #660]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x2d0>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d060      	beq.n	80026b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_OscConfig+0x310>
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d119      	bne.n	8002636 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d116      	bne.n	8002636 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002608:	4b99      	ldr	r3, [pc, #612]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_OscConfig+0x328>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e28b      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	4b93      	ldr	r3, [pc, #588]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	061b      	lsls	r3, r3, #24
 800262e:	4990      	ldr	r1, [pc, #576]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002634:	e040      	b.n	80026b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d023      	beq.n	8002686 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800263e:	4b8c      	ldr	r3, [pc, #560]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a8b      	ldr	r2, [pc, #556]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 8002644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7ff fad3 	bl	8001bf4 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002652:	f7ff facf 	bl	8001bf4 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e269      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002664:	4b82      	ldr	r3, [pc, #520]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4b7f      	ldr	r3, [pc, #508]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	061b      	lsls	r3, r3, #24
 800267e:	497c      	ldr	r1, [pc, #496]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
 8002684:	e018      	b.n	80026b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002686:	4b7a      	ldr	r3, [pc, #488]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a79      	ldr	r2, [pc, #484]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 800268c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7ff faaf 	bl	8001bf4 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269a:	f7ff faab 	bl	8001bf4 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e245      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026ac:	4b70      	ldr	r3, [pc, #448]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f0      	bne.n	800269a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d03c      	beq.n	800273e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01c      	beq.n	8002706 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026cc:	4b68      	ldr	r3, [pc, #416]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 80026ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d2:	4a67      	ldr	r2, [pc, #412]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7ff fa8a 	bl	8001bf4 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e4:	f7ff fa86 	bl	8001bf4 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e220      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026f6:	4b5e      	ldr	r3, [pc, #376]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 80026f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0ef      	beq.n	80026e4 <HAL_RCC_OscConfig+0x3ec>
 8002704:	e01b      	b.n	800273e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002706:	4b5a      	ldr	r3, [pc, #360]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 8002708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800270c:	4a58      	ldr	r2, [pc, #352]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 800270e:	f023 0301 	bic.w	r3, r3, #1
 8002712:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002716:	f7ff fa6d 	bl	8001bf4 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271e:	f7ff fa69 	bl	8001bf4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e203      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002730:	4b4f      	ldr	r3, [pc, #316]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 8002732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1ef      	bne.n	800271e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80a6 	beq.w	8002898 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002750:	4b47      	ldr	r3, [pc, #284]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10d      	bne.n	8002778 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275c:	4b44      	ldr	r3, [pc, #272]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	4a43      	ldr	r2, [pc, #268]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 8002762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002766:	6593      	str	r3, [r2, #88]	; 0x58
 8002768:	4b41      	ldr	r3, [pc, #260]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002774:	2301      	movs	r3, #1
 8002776:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002778:	4b3e      	ldr	r3, [pc, #248]	; (8002874 <HAL_RCC_OscConfig+0x57c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d118      	bne.n	80027b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002784:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_RCC_OscConfig+0x57c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a3a      	ldr	r2, [pc, #232]	; (8002874 <HAL_RCC_OscConfig+0x57c>)
 800278a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002790:	f7ff fa30 	bl	8001bf4 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002798:	f7ff fa2c 	bl	8001bf4 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e1c6      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027aa:	4b32      	ldr	r3, [pc, #200]	; (8002874 <HAL_RCC_OscConfig+0x57c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d108      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4d8>
 80027be:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c4:	4a2a      	ldr	r2, [pc, #168]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027ce:	e024      	b.n	800281a <HAL_RCC_OscConfig+0x522>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d110      	bne.n	80027fa <HAL_RCC_OscConfig+0x502>
 80027d8:	4b25      	ldr	r3, [pc, #148]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027de:	4a24      	ldr	r2, [pc, #144]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 80027e0:	f043 0304 	orr.w	r3, r3, #4
 80027e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ee:	4a20      	ldr	r2, [pc, #128]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027f8:	e00f      	b.n	800281a <HAL_RCC_OscConfig+0x522>
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002800:	4a1b      	ldr	r2, [pc, #108]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 8002802:	f023 0301 	bic.w	r3, r3, #1
 8002806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800280a:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002810:	4a17      	ldr	r2, [pc, #92]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 8002812:	f023 0304 	bic.w	r3, r3, #4
 8002816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d016      	beq.n	8002850 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002822:	f7ff f9e7 	bl	8001bf4 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7ff f9e3 	bl	8001bf4 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	; 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e17b      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCC_OscConfig+0x578>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0ed      	beq.n	800282a <HAL_RCC_OscConfig+0x532>
 800284e:	e01a      	b.n	8002886 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7ff f9d0 	bl	8001bf4 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002856:	e00f      	b.n	8002878 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002858:	f7ff f9cc 	bl	8001bf4 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	; 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d906      	bls.n	8002878 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e164      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002878:	4ba8      	ldr	r3, [pc, #672]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1e8      	bne.n	8002858 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002886:	7ffb      	ldrb	r3, [r7, #31]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288c:	4ba3      	ldr	r3, [pc, #652]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	4aa2      	ldr	r2, [pc, #648]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002896:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d03c      	beq.n	800291e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01c      	beq.n	80028e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028ac:	4b9b      	ldr	r3, [pc, #620]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 80028ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028b2:	4a9a      	ldr	r2, [pc, #616]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7ff f99a 	bl	8001bf4 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c4:	f7ff f996 	bl	8001bf4 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e130      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028d6:	4b91      	ldr	r3, [pc, #580]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 80028d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0ef      	beq.n	80028c4 <HAL_RCC_OscConfig+0x5cc>
 80028e4:	e01b      	b.n	800291e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028e6:	4b8d      	ldr	r3, [pc, #564]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 80028e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028ec:	4a8b      	ldr	r2, [pc, #556]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f6:	f7ff f97d 	bl	8001bf4 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028fe:	f7ff f979 	bl	8001bf4 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e113      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002910:	4b82      	ldr	r3, [pc, #520]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002912:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1ef      	bne.n	80028fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8107 	beq.w	8002b36 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	2b02      	cmp	r3, #2
 800292e:	f040 80cb 	bne.w	8002ac8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002932:	4b7a      	ldr	r3, [pc, #488]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f003 0203 	and.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	429a      	cmp	r2, r3
 8002944:	d12c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	3b01      	subs	r3, #1
 8002952:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002954:	429a      	cmp	r2, r3
 8002956:	d123      	bne.n	80029a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002962:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d11b      	bne.n	80029a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d113      	bne.n	80029a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	085b      	lsrs	r3, r3, #1
 8002984:	3b01      	subs	r3, #1
 8002986:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002988:	429a      	cmp	r2, r3
 800298a:	d109      	bne.n	80029a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	3b01      	subs	r3, #1
 800299a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d06d      	beq.n	8002a7c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d068      	beq.n	8002a78 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029a6:	4b5d      	ldr	r3, [pc, #372]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d105      	bne.n	80029be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029b2:	4b5a      	ldr	r3, [pc, #360]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0ba      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029c2:	4b56      	ldr	r3, [pc, #344]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a55      	ldr	r2, [pc, #340]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 80029c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029ce:	f7ff f911 	bl	8001bf4 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d6:	f7ff f90d 	bl	8001bf4 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e0a7      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e8:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f4:	4b49      	ldr	r3, [pc, #292]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	4b49      	ldr	r3, [pc, #292]	; (8002b20 <HAL_RCC_OscConfig+0x828>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a04:	3a01      	subs	r2, #1
 8002a06:	0112      	lsls	r2, r2, #4
 8002a08:	4311      	orrs	r1, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a0e:	0212      	lsls	r2, r2, #8
 8002a10:	4311      	orrs	r1, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a16:	0852      	lsrs	r2, r2, #1
 8002a18:	3a01      	subs	r2, #1
 8002a1a:	0552      	lsls	r2, r2, #21
 8002a1c:	4311      	orrs	r1, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a22:	0852      	lsrs	r2, r2, #1
 8002a24:	3a01      	subs	r2, #1
 8002a26:	0652      	lsls	r2, r2, #25
 8002a28:	4311      	orrs	r1, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a2e:	06d2      	lsls	r2, r2, #27
 8002a30:	430a      	orrs	r2, r1
 8002a32:	493a      	ldr	r1, [pc, #232]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a38:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a37      	ldr	r2, [pc, #220]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a44:	4b35      	ldr	r3, [pc, #212]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4a34      	ldr	r2, [pc, #208]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a50:	f7ff f8d0 	bl	8001bf4 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a58:	f7ff f8cc 	bl	8001bf4 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e066      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6a:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a76:	e05e      	b.n	8002b36 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e05d      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7c:	4b27      	ldr	r3, [pc, #156]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d156      	bne.n	8002b36 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a88:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a23      	ldr	r2, [pc, #140]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a94:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a20      	ldr	r2, [pc, #128]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aa0:	f7ff f8a8 	bl	8001bf4 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7ff f8a4 	bl	8001bf4 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e03e      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x7b0>
 8002ac6:	e036      	b.n	8002b36 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b0c      	cmp	r3, #12
 8002acc:	d031      	beq.n	8002b32 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002ad4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ad8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d105      	bne.n	8002af2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4a0c      	ldr	r2, [pc, #48]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002aec:	f023 0303 	bic.w	r3, r3, #3
 8002af0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <HAL_RCC_OscConfig+0x824>)
 8002af8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b00:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7ff f877 	bl	8001bf4 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b08:	e00c      	b.n	8002b24 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0a:	f7ff f873 	bl	8001bf4 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d905      	bls.n	8002b24 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e00d      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_RCC_OscConfig+0x848>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ec      	bne.n	8002b0a <HAL_RCC_OscConfig+0x812>
 8002b30:	e001      	b.n	8002b36 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000

08002b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e10f      	b.n	8002d7c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b89      	ldr	r3, [pc, #548]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d910      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b86      	ldr	r3, [pc, #536]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 020f 	bic.w	r2, r3, #15
 8002b72:	4984      	ldr	r1, [pc, #528]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b82      	ldr	r3, [pc, #520]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0f7      	b.n	8002d7c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8089 	beq.w	8002cac <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d133      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba2:	4b79      	ldr	r3, [pc, #484]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e0e4      	b.n	8002d7c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002bb2:	f000 fa0d 	bl	8002fd0 <RCC_GetSysClockFreqFromPLLSource>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	4b74      	ldr	r3, [pc, #464]	; (8002d8c <HAL_RCC_ClockConfig+0x248>)
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d955      	bls.n	8002c6a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002bbe:	4b72      	ldr	r3, [pc, #456]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bca:	4b6f      	ldr	r3, [pc, #444]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bd2:	4a6d      	ldr	r2, [pc, #436]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e044      	b.n	8002c6a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d03e      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x126>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d13a      	bne.n	8002c6a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bf4:	4b64      	ldr	r3, [pc, #400]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bfc:	4a62      	ldr	r2, [pc, #392]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c02:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	e02f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c12:	4b5d      	ldr	r3, [pc, #372]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d115      	bne.n	8002c4a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0ac      	b.n	8002d7c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c2a:	4b57      	ldr	r3, [pc, #348]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0a0      	b.n	8002d7c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c3a:	4b53      	ldr	r3, [pc, #332]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e098      	b.n	8002d7c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002c4a:	f000 f8a7 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	4b4e      	ldr	r3, [pc, #312]	; (8002d8c <HAL_RCC_ClockConfig+0x248>)
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d909      	bls.n	8002c6a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c56:	4b4c      	ldr	r3, [pc, #304]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c5e:	4a4a      	ldr	r2, [pc, #296]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f023 0203 	bic.w	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4944      	ldr	r1, [pc, #272]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7c:	f7fe ffba 	bl	8001bf4 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	e00a      	b.n	8002c9a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c84:	f7fe ffb6 	bl	8001bf4 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e070      	b.n	8002d7c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 020c 	and.w	r2, r3, #12
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d1eb      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d009      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb8:	4b33      	ldr	r3, [pc, #204]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4930      	ldr	r1, [pc, #192]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
 8002cca:	e008      	b.n	8002cde <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2b80      	cmp	r3, #128	; 0x80
 8002cd0:	d105      	bne.n	8002cde <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	4a2c      	ldr	r2, [pc, #176]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cdc:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cde:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d210      	bcs.n	8002d0e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 020f 	bic.w	r2, r3, #15
 8002cf4:	4923      	ldr	r1, [pc, #140]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfc:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e036      	b.n	8002d7c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	4918      	ldr	r1, [pc, #96]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d009      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4910      	ldr	r1, [pc, #64]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d4c:	f000 f826 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8002d50:	4601      	mov	r1, r0
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	091b      	lsrs	r3, r3, #4
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <HAL_RCC_ClockConfig+0x24c>)
 8002d5e:	5cd3      	ldrb	r3, [r2, r3]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	fa21 f303 	lsr.w	r3, r1, r3
 8002d68:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <HAL_RCC_ClockConfig+0x250>)
 8002d6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d6c:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <HAL_RCC_ClockConfig+0x254>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe fef3 	bl	8001b5c <HAL_InitTick>
 8002d76:	4603      	mov	r3, r0
 8002d78:	73fb      	strb	r3, [r7, #15]

  return status;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40022000 	.word	0x40022000
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	04c4b400 	.word	0x04c4b400
 8002d90:	08007154 	.word	0x08007154
 8002d94:	20000000 	.word	0x20000000
 8002d98:	20000004 	.word	0x20000004

08002d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002daa:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db4:	4b3a      	ldr	r3, [pc, #232]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	2b0c      	cmp	r3, #12
 8002dc8:	d121      	bne.n	8002e0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d11e      	bne.n	8002e0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dd0:	4b33      	ldr	r3, [pc, #204]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ddc:	4b30      	ldr	r3, [pc, #192]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de2:	0a1b      	lsrs	r3, r3, #8
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	e005      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dec:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002df8:	4a2a      	ldr	r2, [pc, #168]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10d      	bne.n	8002e24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e0c:	e00a      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d102      	bne.n	8002e1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e14:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	e004      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e20:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d133      	bne.n	8002e92 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d002      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0xa4>
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_GetSysClockFreq+0xaa>
 8002e3e:	e005      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e42:	617b      	str	r3, [r7, #20]
      break;
 8002e44:	e005      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e46:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e48:	617b      	str	r3, [r7, #20]
      break;
 8002e4a:	e002      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	617b      	str	r3, [r7, #20]
      break;
 8002e50:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	fb02 f203 	mul.w	r2, r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e76:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e78:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	0e5b      	lsrs	r3, r3, #25
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	3301      	adds	r3, #1
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e90:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e92:	69bb      	ldr	r3, [r7, #24]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3724      	adds	r7, #36	; 0x24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	0800716c 	.word	0x0800716c
 8002ea8:	00f42400 	.word	0x00f42400

08002eac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb0:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000000 	.word	0x20000000

08002ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ec8:	f7ff fff0 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ecc:	4601      	mov	r1, r0
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	4a04      	ldr	r2, [pc, #16]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eda:	5cd3      	ldrb	r3, [r2, r3]
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	08007164 	.word	0x08007164

08002ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ef4:	f7ff ffda 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ef8:	4601      	mov	r1, r0
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	0adb      	lsrs	r3, r3, #11
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f06:	5cd3      	ldrb	r3, [r2, r3]
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000
 8002f18:	08007164 	.word	0x08007164

08002f1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f28:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f34:	f7ff f91c 	bl	8002170 <HAL_PWREx_GetVoltageRange>
 8002f38:	6178      	str	r0, [r7, #20]
 8002f3a:	e014      	b.n	8002f66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f3c:	4b22      	ldr	r3, [pc, #136]	; (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f46:	6593      	str	r3, [r2, #88]	; 0x58
 8002f48:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f54:	f7ff f90c 	bl	8002170 <HAL_PWREx_GetVoltageRange>
 8002f58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	4a1a      	ldr	r2, [pc, #104]	; (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f6c:	d10b      	bne.n	8002f86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d913      	bls.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2ba0      	cmp	r3, #160	; 0xa0
 8002f78:	d902      	bls.n	8002f80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	e00d      	b.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f80:	2301      	movs	r3, #1
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	e00a      	b.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b7f      	cmp	r3, #127	; 0x7f
 8002f8a:	d902      	bls.n	8002f92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	e004      	b.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b70      	cmp	r3, #112	; 0x70
 8002f96:	d101      	bne.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f98:	2301      	movs	r3, #1
 8002f9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f023 020f 	bic.w	r2, r3, #15
 8002fa4:	4909      	ldr	r1, [pc, #36]	; (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fac:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d001      	beq.n	8002fbe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40022000 	.word	0x40022000

08002fd0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d118      	bne.n	8003018 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d107      	bne.n	8003002 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ff2:	4b27      	ldr	r3, [pc, #156]	; (8003090 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff8:	0a1b      	lsrs	r3, r3, #8
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	e005      	b.n	800300e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003002:	4b23      	ldr	r3, [pc, #140]	; (8003090 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800300e:	4a21      	ldr	r2, [pc, #132]	; (8003094 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003016:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d002      	beq.n	800302e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003028:	2b03      	cmp	r3, #3
 800302a:	d003      	beq.n	8003034 <RCC_GetSysClockFreqFromPLLSource+0x64>
 800302c:	e005      	b.n	800303a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800302e:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003030:	613b      	str	r3, [r7, #16]
    break;
 8003032:	e005      	b.n	8003040 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003036:	613b      	str	r3, [r7, #16]
    break;
 8003038:	e002      	b.n	8003040 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	613b      	str	r3, [r7, #16]
    break;
 800303e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	3301      	adds	r3, #1
 800304c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800304e:	4b10      	ldr	r3, [pc, #64]	; (8003090 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	fb02 f203 	mul.w	r2, r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	0e5b      	lsrs	r3, r3, #25
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	3301      	adds	r3, #1
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	fbb2 f3f3 	udiv	r3, r2, r3
 800307e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003080:	683b      	ldr	r3, [r7, #0]
}
 8003082:	4618      	mov	r0, r3
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	0800716c 	.word	0x0800716c
 8003098:	00f42400 	.word	0x00f42400

0800309c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030a4:	2300      	movs	r3, #0
 80030a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030a8:	2300      	movs	r3, #0
 80030aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d03d      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d00b      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d804      	bhi.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00e      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d015      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80030cc:	e01d      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80030ce:	2b60      	cmp	r3, #96	; 0x60
 80030d0:	d01e      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030d2:	2b80      	cmp	r3, #128	; 0x80
 80030d4:	d01c      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030d6:	e018      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030d8:	4b86      	ldr	r3, [pc, #536]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a85      	ldr	r2, [pc, #532]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030e4:	e015      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3304      	adds	r3, #4
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fb5d 	bl	80037ac <RCCEx_PLLSAI1_Config>
 80030f2:	4603      	mov	r3, r0
 80030f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030f6:	e00c      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3320      	adds	r3, #32
 80030fc:	2100      	movs	r1, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fc44 	bl	800398c <RCCEx_PLLSAI2_Config>
 8003104:	4603      	mov	r3, r0
 8003106:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003108:	e003      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	74fb      	strb	r3, [r7, #19]
      break;
 800310e:	e000      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003112:	7cfb      	ldrb	r3, [r7, #19]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10b      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003118:	4b76      	ldr	r3, [pc, #472]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800311a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800311e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003126:	4973      	ldr	r1, [pc, #460]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800312e:	e001      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003130:	7cfb      	ldrb	r3, [r7, #19]
 8003132:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d042      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003148:	d00f      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800314a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314e:	d805      	bhi.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d011      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003158:	d017      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xee>
 800315a:	e01f      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x100>
 800315c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003160:	d01f      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003166:	d01c      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003168:	e018      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800316a:	4b62      	ldr	r3, [pc, #392]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	4a61      	ldr	r2, [pc, #388]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003174:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003176:	e015      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3304      	adds	r3, #4
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fb14 	bl	80037ac <RCCEx_PLLSAI1_Config>
 8003184:	4603      	mov	r3, r0
 8003186:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003188:	e00c      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3320      	adds	r3, #32
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fbfb 	bl	800398c <RCCEx_PLLSAI2_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800319a:	e003      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	74fb      	strb	r3, [r7, #19]
      break;
 80031a0:	e000      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80031a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a4:	7cfb      	ldrb	r3, [r7, #19]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10b      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031aa:	4b52      	ldr	r3, [pc, #328]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	494e      	ldr	r1, [pc, #312]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80031c0:	e001      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c2:	7cfb      	ldrb	r3, [r7, #19]
 80031c4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 809f 	beq.w	8003312 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d4:	2300      	movs	r3, #0
 80031d6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031d8:	4b46      	ldr	r3, [pc, #280]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80031e8:	2300      	movs	r3, #0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00d      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	4a40      	ldr	r2, [pc, #256]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f8:	6593      	str	r3, [r2, #88]	; 0x58
 80031fa:	4b3e      	ldr	r3, [pc, #248]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003206:	2301      	movs	r3, #1
 8003208:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800320a:	4b3b      	ldr	r3, [pc, #236]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a3a      	ldr	r2, [pc, #232]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003216:	f7fe fced 	bl	8001bf4 <HAL_GetTick>
 800321a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800321c:	e009      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321e:	f7fe fce9 	bl	8001bf4 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d902      	bls.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	74fb      	strb	r3, [r7, #19]
        break;
 8003230:	e005      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003232:	4b31      	ldr	r3, [pc, #196]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0ef      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800323e:	7cfb      	ldrb	r3, [r7, #19]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d15b      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003244:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d01f      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	429a      	cmp	r2, r3
 8003260:	d019      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003262:	4b24      	ldr	r3, [pc, #144]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800326e:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003274:	4a1f      	ldr	r2, [pc, #124]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800327e:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800328e:	4a19      	ldr	r2, [pc, #100]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d016      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7fe fca8 	bl	8001bf4 <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a6:	e00b      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a8:	f7fe fca4 	bl	8001bf4 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d902      	bls.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	74fb      	strb	r3, [r7, #19]
            break;
 80032be:	e006      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ec      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80032ce:	7cfb      	ldrb	r3, [r7, #19]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10c      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032d4:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032e4:	4903      	ldr	r1, [pc, #12]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032ec:	e008      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032ee:	7cfb      	ldrb	r3, [r7, #19]
 80032f0:	74bb      	strb	r3, [r7, #18]
 80032f2:	e005      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003300:	7c7b      	ldrb	r3, [r7, #17]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d105      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003306:	4ba0      	ldr	r3, [pc, #640]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	4a9f      	ldr	r2, [pc, #636]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003310:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800331e:	4b9a      	ldr	r3, [pc, #616]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f023 0203 	bic.w	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332c:	4996      	ldr	r1, [pc, #600]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003340:	4b91      	ldr	r3, [pc, #580]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003346:	f023 020c 	bic.w	r2, r3, #12
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	498e      	ldr	r1, [pc, #568]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003362:	4b89      	ldr	r3, [pc, #548]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	4985      	ldr	r1, [pc, #532]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003384:	4b80      	ldr	r3, [pc, #512]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003392:	497d      	ldr	r1, [pc, #500]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033a6:	4b78      	ldr	r3, [pc, #480]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b4:	4974      	ldr	r1, [pc, #464]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0320 	and.w	r3, r3, #32
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033c8:	4b6f      	ldr	r3, [pc, #444]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d6:	496c      	ldr	r1, [pc, #432]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ea:	4b67      	ldr	r3, [pc, #412]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f8:	4963      	ldr	r1, [pc, #396]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800340c:	4b5e      	ldr	r3, [pc, #376]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800341a:	495b      	ldr	r1, [pc, #364]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800342e:	4b56      	ldr	r3, [pc, #344]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	4952      	ldr	r1, [pc, #328]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003450:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	494a      	ldr	r1, [pc, #296]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003472:	4b45      	ldr	r3, [pc, #276]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003480:	4941      	ldr	r1, [pc, #260]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003494:	4b3c      	ldr	r3, [pc, #240]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800349a:	f023 0203 	bic.w	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a2:	4939      	ldr	r1, [pc, #228]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d028      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034b6:	4b34      	ldr	r3, [pc, #208]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c4:	4930      	ldr	r1, [pc, #192]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034d4:	d106      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d6:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	4a2b      	ldr	r2, [pc, #172]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e0:	60d3      	str	r3, [r2, #12]
 80034e2:	e011      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034ec:	d10c      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3304      	adds	r3, #4
 80034f2:	2101      	movs	r1, #1
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 f959 	bl	80037ac <RCCEx_PLLSAI1_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034fe:	7cfb      	ldrb	r3, [r7, #19]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d04d      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800351c:	d108      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800351e:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003524:	4a18      	ldr	r2, [pc, #96]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800352a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800352e:	e012      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003530:	4b15      	ldr	r3, [pc, #84]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003536:	4a14      	ldr	r2, [pc, #80]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003538:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800353c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800354e:	490e      	ldr	r1, [pc, #56]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800355a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800355e:	d106      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4a08      	ldr	r2, [pc, #32]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800356a:	60d3      	str	r3, [r2, #12]
 800356c:	e020      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003576:	d109      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a02      	ldr	r2, [pc, #8]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003582:	60d3      	str	r3, [r2, #12]
 8003584:	e014      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003594:	d10c      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	2101      	movs	r1, #1
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f905 	bl	80037ac <RCCEx_PLLSAI1_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035ac:	7cfb      	ldrb	r3, [r7, #19]
 80035ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d028      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035bc:	4b7a      	ldr	r3, [pc, #488]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ca:	4977      	ldr	r1, [pc, #476]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035da:	d106      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035dc:	4b72      	ldr	r3, [pc, #456]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4a71      	ldr	r2, [pc, #452]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80035e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035e6:	60d3      	str	r3, [r2, #12]
 80035e8:	e011      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035f2:	d10c      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3304      	adds	r3, #4
 80035f8:	2101      	movs	r1, #1
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f8d6 	bl	80037ac <RCCEx_PLLSAI1_Config>
 8003600:	4603      	mov	r3, r0
 8003602:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800360a:	7cfb      	ldrb	r3, [r7, #19]
 800360c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d01e      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800361a:	4b63      	ldr	r3, [pc, #396]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003620:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800362a:	495f      	ldr	r1, [pc, #380]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003638:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800363c:	d10c      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3304      	adds	r3, #4
 8003642:	2102      	movs	r1, #2
 8003644:	4618      	mov	r0, r3
 8003646:	f000 f8b1 	bl	80037ac <RCCEx_PLLSAI1_Config>
 800364a:	4603      	mov	r3, r0
 800364c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800364e:	7cfb      	ldrb	r3, [r7, #19]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00b      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003664:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003666:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800366a:	f023 0204 	bic.w	r2, r3, #4
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003674:	494c      	ldr	r1, [pc, #304]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00b      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003688:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800368a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800368e:	f023 0218 	bic.w	r2, r3, #24
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	4943      	ldr	r1, [pc, #268]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d035      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036ac:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a3d      	ldr	r2, [pc, #244]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80036b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b8:	f7fe fa9c 	bl	8001bf4 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036be:	e009      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036c0:	f7fe fa98 	bl	8001bf4 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d902      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	74fb      	strb	r3, [r7, #19]
        break;
 80036d2:	e005      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036d4:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1ef      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 80036e0:	7cfb      	ldrb	r3, [r7, #19]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d113      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80036e6:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80036e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f6:	492c      	ldr	r1, [pc, #176]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3320      	adds	r3, #32
 8003702:	2102      	movs	r1, #2
 8003704:	4618      	mov	r0, r3
 8003706:	f000 f941 	bl	800398c <RCCEx_PLLSAI2_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800370e:	7cfb      	ldrb	r3, [r7, #19]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 8003714:	7cfb      	ldrb	r3, [r7, #19]
 8003716:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01e      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003724:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003726:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800372a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003734:	491c      	ldr	r1, [pc, #112]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003746:	d10c      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3320      	adds	r3, #32
 800374c:	2101      	movs	r1, #1
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f91c 	bl	800398c <RCCEx_PLLSAI2_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      {
        /* set overall return value */
        status = ret;
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d017      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800376e:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003770:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003774:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800377e:	490a      	ldr	r1, [pc, #40]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003790:	d105      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x702>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003792:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800379c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800379e:	7cbb      	ldrb	r3, [r7, #18]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000

080037ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ba:	4b70      	ldr	r3, [pc, #448]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00e      	beq.n	80037e4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037c6:	4b6d      	ldr	r3, [pc, #436]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f003 0203 	and.w	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d103      	bne.n	80037de <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
       ||
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d13f      	bne.n	800385e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
 80037e2:	e03c      	b.n	800385e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d00c      	beq.n	8003806 <RCCEx_PLLSAI1_Config+0x5a>
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d013      	beq.n	8003818 <RCCEx_PLLSAI1_Config+0x6c>
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d120      	bne.n	8003836 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037f4:	4b61      	ldr	r3, [pc, #388]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d11d      	bne.n	800383c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003804:	e01a      	b.n	800383c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003806:	4b5d      	ldr	r3, [pc, #372]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380e:	2b00      	cmp	r3, #0
 8003810:	d116      	bne.n	8003840 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003816:	e013      	b.n	8003840 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003818:	4b58      	ldr	r3, [pc, #352]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10f      	bne.n	8003844 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003824:	4b55      	ldr	r3, [pc, #340]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d109      	bne.n	8003844 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003834:	e006      	b.n	8003844 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
      break;
 800383a:	e004      	b.n	8003846 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800383c:	bf00      	nop
 800383e:	e002      	b.n	8003846 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003840:	bf00      	nop
 8003842:	e000      	b.n	8003846 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003844:	bf00      	nop
    }

    if(status == HAL_OK)
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d108      	bne.n	800385e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800384c:	4b4b      	ldr	r3, [pc, #300]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f023 0203 	bic.w	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4948      	ldr	r1, [pc, #288]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 800385a:	4313      	orrs	r3, r2
 800385c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	2b00      	cmp	r3, #0
 8003862:	f040 8086 	bne.w	8003972 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003866:	4b45      	ldr	r3, [pc, #276]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a44      	ldr	r2, [pc, #272]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 800386c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003872:	f7fe f9bf 	bl	8001bf4 <HAL_GetTick>
 8003876:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003878:	e009      	b.n	800388e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800387a:	f7fe f9bb 	bl	8001bf4 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d902      	bls.n	800388e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	73fb      	strb	r3, [r7, #15]
        break;
 800388c:	e005      	b.n	800389a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800388e:	4b3b      	ldr	r3, [pc, #236]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1ef      	bne.n	800387a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d168      	bne.n	8003972 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d113      	bne.n	80038ce <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038a6:	4b35      	ldr	r3, [pc, #212]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	4b35      	ldr	r3, [pc, #212]	; (8003980 <RCCEx_PLLSAI1_Config+0x1d4>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6892      	ldr	r2, [r2, #8]
 80038b2:	0211      	lsls	r1, r2, #8
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	68d2      	ldr	r2, [r2, #12]
 80038b8:	06d2      	lsls	r2, r2, #27
 80038ba:	4311      	orrs	r1, r2
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6852      	ldr	r2, [r2, #4]
 80038c0:	3a01      	subs	r2, #1
 80038c2:	0112      	lsls	r2, r2, #4
 80038c4:	430a      	orrs	r2, r1
 80038c6:	492d      	ldr	r1, [pc, #180]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	610b      	str	r3, [r1, #16]
 80038cc:	e02d      	b.n	800392a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d115      	bne.n	8003900 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038d4:	4b29      	ldr	r3, [pc, #164]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	4b2a      	ldr	r3, [pc, #168]	; (8003984 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038da:	4013      	ands	r3, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6892      	ldr	r2, [r2, #8]
 80038e0:	0211      	lsls	r1, r2, #8
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6912      	ldr	r2, [r2, #16]
 80038e6:	0852      	lsrs	r2, r2, #1
 80038e8:	3a01      	subs	r2, #1
 80038ea:	0552      	lsls	r2, r2, #21
 80038ec:	4311      	orrs	r1, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6852      	ldr	r2, [r2, #4]
 80038f2:	3a01      	subs	r2, #1
 80038f4:	0112      	lsls	r2, r2, #4
 80038f6:	430a      	orrs	r2, r1
 80038f8:	4920      	ldr	r1, [pc, #128]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	610b      	str	r3, [r1, #16]
 80038fe:	e014      	b.n	800392a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003900:	4b1e      	ldr	r3, [pc, #120]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	4b20      	ldr	r3, [pc, #128]	; (8003988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003906:	4013      	ands	r3, r2
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6892      	ldr	r2, [r2, #8]
 800390c:	0211      	lsls	r1, r2, #8
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6952      	ldr	r2, [r2, #20]
 8003912:	0852      	lsrs	r2, r2, #1
 8003914:	3a01      	subs	r2, #1
 8003916:	0652      	lsls	r2, r2, #25
 8003918:	4311      	orrs	r1, r2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6852      	ldr	r2, [r2, #4]
 800391e:	3a01      	subs	r2, #1
 8003920:	0112      	lsls	r2, r2, #4
 8003922:	430a      	orrs	r2, r1
 8003924:	4915      	ldr	r1, [pc, #84]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003926:	4313      	orrs	r3, r2
 8003928:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800392a:	4b14      	ldr	r3, [pc, #80]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a13      	ldr	r2, [pc, #76]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003930:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003934:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003936:	f7fe f95d 	bl	8001bf4 <HAL_GetTick>
 800393a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800393c:	e009      	b.n	8003952 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800393e:	f7fe f959 	bl	8001bf4 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d902      	bls.n	8003952 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	73fb      	strb	r3, [r7, #15]
          break;
 8003950:	e005      	b.n	800395e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003952:	4b0a      	ldr	r3, [pc, #40]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0ef      	beq.n	800393e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	4903      	ldr	r1, [pc, #12]	; (800397c <RCCEx_PLLSAI1_Config+0x1d0>)
 800396e:	4313      	orrs	r3, r2
 8003970:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40021000 	.word	0x40021000
 8003980:	07ff800f 	.word	0x07ff800f
 8003984:	ff9f800f 	.word	0xff9f800f
 8003988:	f9ff800f 	.word	0xf9ff800f

0800398c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800399a:	4b70      	ldr	r3, [pc, #448]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00e      	beq.n	80039c4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039a6:	4b6d      	ldr	r3, [pc, #436]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0203 	and.w	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d103      	bne.n	80039be <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
       ||
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d13f      	bne.n	8003a3e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
 80039c2:	e03c      	b.n	8003a3e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d00c      	beq.n	80039e6 <RCCEx_PLLSAI2_Config+0x5a>
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d013      	beq.n	80039f8 <RCCEx_PLLSAI2_Config+0x6c>
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d120      	bne.n	8003a16 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039d4:	4b61      	ldr	r3, [pc, #388]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11d      	bne.n	8003a1c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e4:	e01a      	b.n	8003a1c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039e6:	4b5d      	ldr	r3, [pc, #372]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d116      	bne.n	8003a20 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f6:	e013      	b.n	8003a20 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039f8:	4b58      	ldr	r3, [pc, #352]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10f      	bne.n	8003a24 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a04:	4b55      	ldr	r3, [pc, #340]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a14:	e006      	b.n	8003a24 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
      break;
 8003a1a:	e004      	b.n	8003a26 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003a1c:	bf00      	nop
 8003a1e:	e002      	b.n	8003a26 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003a20:	bf00      	nop
 8003a22:	e000      	b.n	8003a26 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003a24:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d108      	bne.n	8003a3e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003a2c:	4b4b      	ldr	r3, [pc, #300]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f023 0203 	bic.w	r2, r3, #3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4948      	ldr	r1, [pc, #288]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f040 8086 	bne.w	8003b52 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a46:	4b45      	ldr	r3, [pc, #276]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a44      	ldr	r2, [pc, #272]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a52:	f7fe f8cf 	bl	8001bf4 <HAL_GetTick>
 8003a56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a58:	e009      	b.n	8003a6e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a5a:	f7fe f8cb 	bl	8001bf4 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d902      	bls.n	8003a6e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	73fb      	strb	r3, [r7, #15]
        break;
 8003a6c:	e005      	b.n	8003a7a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a6e:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1ef      	bne.n	8003a5a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d168      	bne.n	8003b52 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d113      	bne.n	8003aae <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a86:	4b35      	ldr	r3, [pc, #212]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	4b35      	ldr	r3, [pc, #212]	; (8003b60 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6892      	ldr	r2, [r2, #8]
 8003a92:	0211      	lsls	r1, r2, #8
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68d2      	ldr	r2, [r2, #12]
 8003a98:	06d2      	lsls	r2, r2, #27
 8003a9a:	4311      	orrs	r1, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6852      	ldr	r2, [r2, #4]
 8003aa0:	3a01      	subs	r2, #1
 8003aa2:	0112      	lsls	r2, r2, #4
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	492d      	ldr	r1, [pc, #180]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	614b      	str	r3, [r1, #20]
 8003aac:	e02d      	b.n	8003b0a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d115      	bne.n	8003ae0 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ab4:	4b29      	ldr	r3, [pc, #164]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	4b2a      	ldr	r3, [pc, #168]	; (8003b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6892      	ldr	r2, [r2, #8]
 8003ac0:	0211      	lsls	r1, r2, #8
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6912      	ldr	r2, [r2, #16]
 8003ac6:	0852      	lsrs	r2, r2, #1
 8003ac8:	3a01      	subs	r2, #1
 8003aca:	0552      	lsls	r2, r2, #21
 8003acc:	4311      	orrs	r1, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6852      	ldr	r2, [r2, #4]
 8003ad2:	3a01      	subs	r2, #1
 8003ad4:	0112      	lsls	r2, r2, #4
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	4920      	ldr	r1, [pc, #128]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	614b      	str	r3, [r1, #20]
 8003ade:	e014      	b.n	8003b0a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ae0:	4b1e      	ldr	r3, [pc, #120]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6892      	ldr	r2, [r2, #8]
 8003aec:	0211      	lsls	r1, r2, #8
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6952      	ldr	r2, [r2, #20]
 8003af2:	0852      	lsrs	r2, r2, #1
 8003af4:	3a01      	subs	r2, #1
 8003af6:	0652      	lsls	r2, r2, #25
 8003af8:	4311      	orrs	r1, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6852      	ldr	r2, [r2, #4]
 8003afe:	3a01      	subs	r2, #1
 8003b00:	0112      	lsls	r2, r2, #4
 8003b02:	430a      	orrs	r2, r1
 8003b04:	4915      	ldr	r1, [pc, #84]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b0a:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b16:	f7fe f86d 	bl	8001bf4 <HAL_GetTick>
 8003b1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b1c:	e009      	b.n	8003b32 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b1e:	f7fe f869 	bl	8001bf4 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d902      	bls.n	8003b32 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	73fb      	strb	r3, [r7, #15]
          break;
 8003b30:	e005      	b.n	8003b3e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0ef      	beq.n	8003b1e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d106      	bne.n	8003b52 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b46:	695a      	ldr	r2, [r3, #20]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	4903      	ldr	r1, [pc, #12]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	07ff800f 	.word	0x07ff800f
 8003b64:	ff9f800f 	.word	0xff9f800f
 8003b68:	f9ff800f 	.word	0xf9ff800f

08003b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e07c      	b.n	8003c78 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d106      	bne.n	8003b9e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7fd fe87 	bl	80018ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bbe:	d902      	bls.n	8003bc6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e002      	b.n	8003bcc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bd4:	d007      	beq.n	8003be6 <HAL_SPI_Init+0x7a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bde:	d002      	beq.n	8003be6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10b      	bne.n	8003c06 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bf6:	d903      	bls.n	8003c00 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8003bfe:	e002      	b.n	8003c06 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	ea42 0103 	orr.w	r1, r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	0c1b      	lsrs	r3, r3, #16
 8003c46:	f003 0204 	and.w	r2, r3, #4
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	ea42 0103 	orr.w	r1, r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_SPI_Transmit+0x22>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e150      	b.n	8003f44 <HAL_SPI_Transmit+0x2c4>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003caa:	f7fd ffa3 	bl	8001bf4 <HAL_GetTick>
 8003cae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d002      	beq.n	8003cc6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cc4:	e135      	b.n	8003f32 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_SPI_Transmit+0x52>
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d102      	bne.n	8003cd8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cd6:	e12c      	b.n	8003f32 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	88fa      	ldrh	r2, [r7, #6]
 8003cf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	88fa      	ldrh	r2, [r7, #6]
 8003cf6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d22:	d107      	bne.n	8003d34 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3e:	2b40      	cmp	r3, #64	; 0x40
 8003d40:	d007      	beq.n	8003d52 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d5a:	d94b      	bls.n	8003df4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_SPI_Transmit+0xea>
 8003d64:	8afb      	ldrh	r3, [r7, #22]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d13e      	bne.n	8003de8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	881a      	ldrh	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	1c9a      	adds	r2, r3, #2
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d8e:	e02b      	b.n	8003de8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d112      	bne.n	8003dc4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	881a      	ldrh	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	1c9a      	adds	r2, r3, #2
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dc2:	e011      	b.n	8003de8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dc4:	f7fd ff16 	bl	8001bf4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d803      	bhi.n	8003ddc <HAL_SPI_Transmit+0x15c>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dda:	d102      	bne.n	8003de2 <HAL_SPI_Transmit+0x162>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003de6:	e0a4      	b.n	8003f32 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1ce      	bne.n	8003d90 <HAL_SPI_Transmit+0x110>
 8003df2:	e07c      	b.n	8003eee <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_SPI_Transmit+0x182>
 8003dfc:	8afb      	ldrh	r3, [r7, #22]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d170      	bne.n	8003ee4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d912      	bls.n	8003e32 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	1c9a      	adds	r2, r3, #2
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b02      	subs	r3, #2
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e30:	e058      	b.n	8003ee4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	330c      	adds	r3, #12
 8003e3c:	7812      	ldrb	r2, [r2, #0]
 8003e3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e58:	e044      	b.n	8003ee4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d12b      	bne.n	8003ec0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d912      	bls.n	8003e98 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	881a      	ldrh	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	1c9a      	adds	r2, r3, #2
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b02      	subs	r3, #2
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e96:	e025      	b.n	8003ee4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	7812      	ldrb	r2, [r2, #0]
 8003ea4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ebe:	e011      	b.n	8003ee4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec0:	f7fd fe98 	bl	8001bf4 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d803      	bhi.n	8003ed8 <HAL_SPI_Transmit+0x258>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed6:	d102      	bne.n	8003ede <HAL_SPI_Transmit+0x25e>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d102      	bne.n	8003ee4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ee2:	e026      	b.n	8003f32 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1b5      	bne.n	8003e5a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	6839      	ldr	r1, [r7, #0]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fc94 	bl	8004820 <SPI_EndRxTxTransaction>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	77fb      	strb	r3, [r7, #31]
 8003f2e:	e000      	b.n	8003f32 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003f30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f42:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f68:	d112      	bne.n	8003f90 <HAL_SPI_Receive+0x44>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10e      	bne.n	8003f90 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2204      	movs	r2, #4
 8003f76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f7a:	88fa      	ldrh	r2, [r7, #6]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f908 	bl	800419c <HAL_SPI_TransmitReceive>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	e101      	b.n	8004194 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_SPI_Receive+0x52>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e0fa      	b.n	8004194 <HAL_SPI_Receive+0x248>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fa6:	f7fd fe25 	bl	8001bf4 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d002      	beq.n	8003fbe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fbc:	e0e1      	b.n	8004182 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_SPI_Receive+0x7e>
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fce:	e0d8      	b.n	8004182 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	88fa      	ldrh	r2, [r7, #6]
 8003fe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	88fa      	ldrh	r2, [r7, #6]
 8003ff0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800401a:	d908      	bls.n	800402e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800402a:	605a      	str	r2, [r3, #4]
 800402c:	e007      	b.n	800403e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800403c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004046:	d107      	bne.n	8004058 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004056:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b40      	cmp	r3, #64	; 0x40
 8004064:	d007      	beq.n	8004076 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004074:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800407e:	d867      	bhi.n	8004150 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004080:	e030      	b.n	80040e4 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b01      	cmp	r3, #1
 800408e:	d117      	bne.n	80040c0 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f103 020c 	add.w	r2, r3, #12
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	7812      	ldrb	r2, [r2, #0]
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80040be:	e011      	b.n	80040e4 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c0:	f7fd fd98 	bl	8001bf4 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d803      	bhi.n	80040d8 <HAL_SPI_Receive+0x18c>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d102      	bne.n	80040de <HAL_SPI_Receive+0x192>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d102      	bne.n	80040e4 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040e2:	e04e      	b.n	8004182 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1c8      	bne.n	8004082 <HAL_SPI_Receive+0x136>
 80040f0:	e034      	b.n	800415c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d115      	bne.n	800412c <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	b292      	uxth	r2, r2
 800410c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	1c9a      	adds	r2, r3, #2
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800412a:	e011      	b.n	8004150 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800412c:	f7fd fd62 	bl	8001bf4 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d803      	bhi.n	8004144 <HAL_SPI_Receive+0x1f8>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004142:	d102      	bne.n	800414a <HAL_SPI_Receive+0x1fe>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d102      	bne.n	8004150 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800414e:	e018      	b.n	8004182 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1ca      	bne.n	80040f2 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	6839      	ldr	r1, [r7, #0]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 fb05 	bl	8004770 <SPI_EndRxTransaction>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	75fb      	strb	r3, [r7, #23]
 800417e:	e000      	b.n	8004182 <HAL_SPI_Receive+0x236>
  }

error :
 8004180:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004192:	7dfb      	ldrb	r3, [r7, #23]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08a      	sub	sp, #40	; 0x28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041aa:	2301      	movs	r3, #1
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_SPI_TransmitReceive+0x26>
 80041be:	2302      	movs	r3, #2
 80041c0:	e1fb      	b.n	80045ba <HAL_SPI_TransmitReceive+0x41e>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041ca:	f7fd fd13 	bl	8001bf4 <HAL_GetTick>
 80041ce:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041d6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80041de:	887b      	ldrh	r3, [r7, #2]
 80041e0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80041e2:	887b      	ldrh	r3, [r7, #2]
 80041e4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041e6:	7efb      	ldrb	r3, [r7, #27]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d00e      	beq.n	800420a <HAL_SPI_TransmitReceive+0x6e>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041f2:	d106      	bne.n	8004202 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d102      	bne.n	8004202 <HAL_SPI_TransmitReceive+0x66>
 80041fc:	7efb      	ldrb	r3, [r7, #27]
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d003      	beq.n	800420a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004202:	2302      	movs	r3, #2
 8004204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004208:	e1cd      	b.n	80045a6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_SPI_TransmitReceive+0x80>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_SPI_TransmitReceive+0x80>
 8004216:	887b      	ldrh	r3, [r7, #2]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004222:	e1c0      	b.n	80045a6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b04      	cmp	r3, #4
 800422e:	d003      	beq.n	8004238 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2205      	movs	r2, #5
 8004234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	887a      	ldrh	r2, [r7, #2]
 8004248:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	887a      	ldrh	r2, [r7, #2]
 8004250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	887a      	ldrh	r2, [r7, #2]
 800425e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	887a      	ldrh	r2, [r7, #2]
 8004264:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800427a:	d802      	bhi.n	8004282 <HAL_SPI_TransmitReceive+0xe6>
 800427c:	8a3b      	ldrh	r3, [r7, #16]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d908      	bls.n	8004294 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004290:	605a      	str	r2, [r3, #4]
 8004292:	e007      	b.n	80042a4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042a2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d007      	beq.n	80042c2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042ca:	d97c      	bls.n	80043c6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_SPI_TransmitReceive+0x13e>
 80042d4:	8a7b      	ldrh	r3, [r7, #18]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d169      	bne.n	80043ae <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	881a      	ldrh	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ea:	1c9a      	adds	r2, r3, #2
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042fe:	e056      	b.n	80043ae <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b02      	cmp	r3, #2
 800430c:	d11b      	bne.n	8004346 <HAL_SPI_TransmitReceive+0x1aa>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d016      	beq.n	8004346 <HAL_SPI_TransmitReceive+0x1aa>
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	2b01      	cmp	r3, #1
 800431c:	d113      	bne.n	8004346 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	881a      	ldrh	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	1c9a      	adds	r2, r3, #2
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b01      	cmp	r3, #1
 8004352:	d11c      	bne.n	800438e <HAL_SPI_TransmitReceive+0x1f2>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d016      	beq.n	800438e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	b292      	uxth	r2, r2
 800436c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	1c9a      	adds	r2, r3, #2
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800438a:	2301      	movs	r3, #1
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800438e:	f7fd fc31 	bl	8001bf4 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439a:	429a      	cmp	r2, r3
 800439c:	d807      	bhi.n	80043ae <HAL_SPI_TransmitReceive+0x212>
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d003      	beq.n	80043ae <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043ac:	e0fb      	b.n	80045a6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1a3      	bne.n	8004300 <HAL_SPI_TransmitReceive+0x164>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d19d      	bne.n	8004300 <HAL_SPI_TransmitReceive+0x164>
 80043c4:	e0df      	b.n	8004586 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_SPI_TransmitReceive+0x23a>
 80043ce:	8a7b      	ldrh	r3, [r7, #18]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	f040 80cb 	bne.w	800456c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d912      	bls.n	8004406 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	881a      	ldrh	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	1c9a      	adds	r2, r3, #2
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b02      	subs	r3, #2
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004404:	e0b2      	b.n	800456c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	330c      	adds	r3, #12
 8004410:	7812      	ldrb	r2, [r2, #0]
 8004412:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800442c:	e09e      	b.n	800456c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d134      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x30a>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02f      	beq.n	80044a6 <HAL_SPI_TransmitReceive+0x30a>
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	2b01      	cmp	r3, #1
 800444a:	d12c      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b01      	cmp	r3, #1
 8004454:	d912      	bls.n	800447c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	881a      	ldrh	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	1c9a      	adds	r2, r3, #2
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004470:	b29b      	uxth	r3, r3
 8004472:	3b02      	subs	r3, #2
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	87da      	strh	r2, [r3, #62]	; 0x3e
 800447a:	e012      	b.n	80044a2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	7812      	ldrb	r2, [r2, #0]
 8004488:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d148      	bne.n	8004546 <HAL_SPI_TransmitReceive+0x3aa>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d042      	beq.n	8004546 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d923      	bls.n	8004514 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	b292      	uxth	r2, r2
 80044d8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	1c9a      	adds	r2, r3, #2
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b02      	subs	r3, #2
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d81f      	bhi.n	8004542 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004510:	605a      	str	r2, [r3, #4]
 8004512:	e016      	b.n	8004542 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f103 020c 	add.w	r2, r3, #12
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	7812      	ldrb	r2, [r2, #0]
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004542:	2301      	movs	r3, #1
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004546:	f7fd fb55 	bl	8001bf4 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004552:	429a      	cmp	r2, r3
 8004554:	d803      	bhi.n	800455e <HAL_SPI_TransmitReceive+0x3c2>
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d102      	bne.n	8004564 <HAL_SPI_TransmitReceive+0x3c8>
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800456a:	e01c      	b.n	80045a6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	f47f af5b 	bne.w	800442e <HAL_SPI_TransmitReceive+0x292>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	f47f af54 	bne.w	800442e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f948 	bl	8004820 <SPI_EndRxTxTransaction>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d006      	beq.n	80045a4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	661a      	str	r2, [r3, #96]	; 0x60
 80045a2:	e000      	b.n	80045a6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80045a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3728      	adds	r7, #40	; 0x28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045d2:	e04c      	b.n	800466e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045da:	d048      	beq.n	800466e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80045dc:	f7fd fb0a 	bl	8001bf4 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d902      	bls.n	80045f2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d13d      	bne.n	800466e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004600:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800460a:	d111      	bne.n	8004630 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004614:	d004      	beq.n	8004620 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461e:	d107      	bne.n	8004630 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800462e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004638:	d10f      	bne.n	800465a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004658:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e00f      	b.n	800468e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4013      	ands	r3, r2
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	429a      	cmp	r2, r3
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	429a      	cmp	r2, r3
 800468a:	d1a3      	bne.n	80045d4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
 80046a2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80046a4:	e057      	b.n	8004756 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046ac:	d106      	bne.n	80046bc <SPI_WaitFifoStateUntilTimeout+0x26>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d103      	bne.n	80046bc <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d048      	beq.n	8004756 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80046c4:	f7fd fa96 	bl	8001bf4 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d902      	bls.n	80046da <SPI_WaitFifoStateUntilTimeout+0x44>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d13d      	bne.n	8004756 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046f2:	d111      	bne.n	8004718 <SPI_WaitFifoStateUntilTimeout+0x82>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fc:	d004      	beq.n	8004708 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004706:	d107      	bne.n	8004718 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004716:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004720:	d10f      	bne.n	8004742 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004740:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e008      	b.n	8004768 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4013      	ands	r3, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	429a      	cmp	r2, r3
 8004764:	d19f      	bne.n	80046a6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004784:	d111      	bne.n	80047aa <SPI_EndRxTransaction+0x3a>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800478e:	d004      	beq.n	800479a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004798:	d107      	bne.n	80047aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2200      	movs	r2, #0
 80047b2:	2180      	movs	r1, #128	; 0x80
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7ff ff04 	bl	80045c2 <SPI_WaitFlagStateUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e023      	b.n	8004818 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d8:	d11d      	bne.n	8004816 <SPI_EndRxTransaction+0xa6>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e2:	d004      	beq.n	80047ee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ec:	d113      	bne.n	8004816 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff ff4b 	bl	8004696 <SPI_WaitFifoStateUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480a:	f043 0220 	orr.w	r2, r3, #32
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e000      	b.n	8004818 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2200      	movs	r2, #0
 8004834:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7ff ff2c 	bl	8004696 <SPI_WaitFifoStateUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e027      	b.n	80048a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2200      	movs	r2, #0
 800485c:	2180      	movs	r1, #128	; 0x80
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f7ff feaf 	bl	80045c2 <SPI_WaitFlagStateUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800486e:	f043 0220 	orr.w	r2, r3, #32
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e014      	b.n	80048a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2200      	movs	r2, #0
 8004882:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f7ff ff05 	bl	8004696 <SPI_WaitFifoStateUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d007      	beq.n	80048a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004896:	f043 0220 	orr.w	r2, r3, #32
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e000      	b.n	80048a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e042      	b.n	8004944 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d106      	bne.n	80048d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7fd f82f 	bl	8001934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2224      	movs	r2, #36	; 0x24
 80048da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0201 	bic.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8c6 	bl	8004a80 <UART_SetConfig>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e022      	b.n	8004944 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f001 faa8 	bl	8005e5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800491a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800492a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f001 fb2f 	bl	8005fa0 <UART_CheckIdleState>
 8004942:	4603      	mov	r3, r0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	; 0x28
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	4613      	mov	r3, r2
 800495a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004962:	2b20      	cmp	r3, #32
 8004964:	f040 8084 	bne.w	8004a70 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HAL_UART_Transmit+0x28>
 800496e:	88fb      	ldrh	r3, [r7, #6]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e07c      	b.n	8004a72 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_UART_Transmit+0x3a>
 8004982:	2302      	movs	r3, #2
 8004984:	e075      	b.n	8004a72 <HAL_UART_Transmit+0x126>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2221      	movs	r2, #33	; 0x21
 800499a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800499e:	f7fd f929 	bl	8001bf4 <HAL_GetTick>
 80049a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	88fa      	ldrh	r2, [r7, #6]
 80049a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	88fa      	ldrh	r2, [r7, #6]
 80049b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049bc:	d108      	bne.n	80049d0 <HAL_UART_Transmit+0x84>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d104      	bne.n	80049d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	61bb      	str	r3, [r7, #24]
 80049ce:	e003      	b.n	80049d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80049e0:	e02d      	b.n	8004a3e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2200      	movs	r2, #0
 80049ea:	2180      	movs	r1, #128	; 0x80
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f001 fb1f 	bl	8006030 <UART_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e03a      	b.n	8004a72 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10b      	bne.n	8004a1a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	881a      	ldrh	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a0e:	b292      	uxth	r2, r2
 8004a10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	3302      	adds	r3, #2
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e008      	b.n	8004a2c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	781a      	ldrb	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	b292      	uxth	r2, r2
 8004a24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1cb      	bne.n	80049e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2200      	movs	r2, #0
 8004a52:	2140      	movs	r1, #64	; 0x40
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f001 faeb 	bl	8006030 <UART_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e006      	b.n	8004a72 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e000      	b.n	8004a72 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004a70:	2302      	movs	r3, #2
  }
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3720      	adds	r7, #32
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	0000      	movs	r0, r0
 8004a7c:	0000      	movs	r0, r0
	...

08004a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a80:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004a84:	b08a      	sub	sp, #40	; 0x28
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	4baa      	ldr	r3, [pc, #680]	; (8004d68 <UART_SetConfig+0x2e8>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a9f      	ldr	r2, [pc, #636]	; (8004d6c <UART_SetConfig+0x2ec>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af8:	4313      	orrs	r3, r2
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b10:	430b      	orrs	r3, r1
 8004b12:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	f023 010f 	bic.w	r1, r3, #15
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a90      	ldr	r2, [pc, #576]	; (8004d70 <UART_SetConfig+0x2f0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d126      	bne.n	8004b82 <UART_SetConfig+0x102>
 8004b34:	4b8f      	ldr	r3, [pc, #572]	; (8004d74 <UART_SetConfig+0x2f4>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d81a      	bhi.n	8004b78 <UART_SetConfig+0xf8>
 8004b42:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <UART_SetConfig+0xc8>)
 8004b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b48:	08004b59 	.word	0x08004b59
 8004b4c:	08004b69 	.word	0x08004b69
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004b71 	.word	0x08004b71
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5e:	e116      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004b60:	2302      	movs	r3, #2
 8004b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b66:	e112      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004b68:	2304      	movs	r3, #4
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6e:	e10e      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004b70:	2308      	movs	r3, #8
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b76:	e10a      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004b78:	2310      	movs	r3, #16
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7e:	bf00      	nop
 8004b80:	e105      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a7c      	ldr	r2, [pc, #496]	; (8004d78 <UART_SetConfig+0x2f8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d138      	bne.n	8004bfe <UART_SetConfig+0x17e>
 8004b8c:	4b79      	ldr	r3, [pc, #484]	; (8004d74 <UART_SetConfig+0x2f4>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	2b0c      	cmp	r3, #12
 8004b98:	d82c      	bhi.n	8004bf4 <UART_SetConfig+0x174>
 8004b9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <UART_SetConfig+0x120>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bd5 	.word	0x08004bd5
 8004ba4:	08004bf5 	.word	0x08004bf5
 8004ba8:	08004bf5 	.word	0x08004bf5
 8004bac:	08004bf5 	.word	0x08004bf5
 8004bb0:	08004be5 	.word	0x08004be5
 8004bb4:	08004bf5 	.word	0x08004bf5
 8004bb8:	08004bf5 	.word	0x08004bf5
 8004bbc:	08004bf5 	.word	0x08004bf5
 8004bc0:	08004bdd 	.word	0x08004bdd
 8004bc4:	08004bf5 	.word	0x08004bf5
 8004bc8:	08004bf5 	.word	0x08004bf5
 8004bcc:	08004bf5 	.word	0x08004bf5
 8004bd0:	08004bed 	.word	0x08004bed
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bda:	e0d8      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be2:	e0d4      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004be4:	2304      	movs	r3, #4
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bea:	e0d0      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004bec:	2308      	movs	r3, #8
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf2:	e0cc      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfa:	bf00      	nop
 8004bfc:	e0c7      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a5e      	ldr	r2, [pc, #376]	; (8004d7c <UART_SetConfig+0x2fc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d125      	bne.n	8004c54 <UART_SetConfig+0x1d4>
 8004c08:	4b5a      	ldr	r3, [pc, #360]	; (8004d74 <UART_SetConfig+0x2f4>)
 8004c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c12:	2b10      	cmp	r3, #16
 8004c14:	d011      	beq.n	8004c3a <UART_SetConfig+0x1ba>
 8004c16:	2b10      	cmp	r3, #16
 8004c18:	d802      	bhi.n	8004c20 <UART_SetConfig+0x1a0>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d005      	beq.n	8004c2a <UART_SetConfig+0x1aa>
 8004c1e:	e014      	b.n	8004c4a <UART_SetConfig+0x1ca>
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d006      	beq.n	8004c32 <UART_SetConfig+0x1b2>
 8004c24:	2b30      	cmp	r3, #48	; 0x30
 8004c26:	d00c      	beq.n	8004c42 <UART_SetConfig+0x1c2>
 8004c28:	e00f      	b.n	8004c4a <UART_SetConfig+0x1ca>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c30:	e0ad      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004c32:	2302      	movs	r3, #2
 8004c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c38:	e0a9      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004c3a:	2304      	movs	r3, #4
 8004c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c40:	e0a5      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004c42:	2308      	movs	r3, #8
 8004c44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c48:	e0a1      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004c4a:	2310      	movs	r3, #16
 8004c4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c50:	bf00      	nop
 8004c52:	e09c      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a49      	ldr	r2, [pc, #292]	; (8004d80 <UART_SetConfig+0x300>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d125      	bne.n	8004caa <UART_SetConfig+0x22a>
 8004c5e:	4b45      	ldr	r3, [pc, #276]	; (8004d74 <UART_SetConfig+0x2f4>)
 8004c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d011      	beq.n	8004c90 <UART_SetConfig+0x210>
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d802      	bhi.n	8004c76 <UART_SetConfig+0x1f6>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <UART_SetConfig+0x200>
 8004c74:	e014      	b.n	8004ca0 <UART_SetConfig+0x220>
 8004c76:	2b80      	cmp	r3, #128	; 0x80
 8004c78:	d006      	beq.n	8004c88 <UART_SetConfig+0x208>
 8004c7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c7c:	d00c      	beq.n	8004c98 <UART_SetConfig+0x218>
 8004c7e:	e00f      	b.n	8004ca0 <UART_SetConfig+0x220>
 8004c80:	2300      	movs	r3, #0
 8004c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c86:	e082      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8e:	e07e      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004c90:	2304      	movs	r3, #4
 8004c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c96:	e07a      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004c98:	2308      	movs	r3, #8
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9e:	e076      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004ca0:	2310      	movs	r3, #16
 8004ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca6:	bf00      	nop
 8004ca8:	e071      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a35      	ldr	r2, [pc, #212]	; (8004d84 <UART_SetConfig+0x304>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d129      	bne.n	8004d08 <UART_SetConfig+0x288>
 8004cb4:	4b2f      	ldr	r3, [pc, #188]	; (8004d74 <UART_SetConfig+0x2f4>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc2:	d014      	beq.n	8004cee <UART_SetConfig+0x26e>
 8004cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc8:	d802      	bhi.n	8004cd0 <UART_SetConfig+0x250>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <UART_SetConfig+0x25e>
 8004cce:	e016      	b.n	8004cfe <UART_SetConfig+0x27e>
 8004cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd4:	d007      	beq.n	8004ce6 <UART_SetConfig+0x266>
 8004cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cda:	d00c      	beq.n	8004cf6 <UART_SetConfig+0x276>
 8004cdc:	e00f      	b.n	8004cfe <UART_SetConfig+0x27e>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce4:	e053      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cec:	e04f      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004cee:	2304      	movs	r3, #4
 8004cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf4:	e04b      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004cf6:	2308      	movs	r3, #8
 8004cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfc:	e047      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004cfe:	2310      	movs	r3, #16
 8004d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d04:	bf00      	nop
 8004d06:	e042      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a17      	ldr	r2, [pc, #92]	; (8004d6c <UART_SetConfig+0x2ec>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d13a      	bne.n	8004d88 <UART_SetConfig+0x308>
 8004d12:	4b18      	ldr	r3, [pc, #96]	; (8004d74 <UART_SetConfig+0x2f4>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d20:	d014      	beq.n	8004d4c <UART_SetConfig+0x2cc>
 8004d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d26:	d802      	bhi.n	8004d2e <UART_SetConfig+0x2ae>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <UART_SetConfig+0x2bc>
 8004d2c:	e016      	b.n	8004d5c <UART_SetConfig+0x2dc>
 8004d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d32:	d007      	beq.n	8004d44 <UART_SetConfig+0x2c4>
 8004d34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d38:	d00c      	beq.n	8004d54 <UART_SetConfig+0x2d4>
 8004d3a:	e00f      	b.n	8004d5c <UART_SetConfig+0x2dc>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d42:	e024      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004d44:	2302      	movs	r3, #2
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4a:	e020      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d52:	e01c      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004d54:	2308      	movs	r3, #8
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5a:	e018      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004d5c:	2310      	movs	r3, #16
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d62:	bf00      	nop
 8004d64:	e013      	b.n	8004d8e <UART_SetConfig+0x30e>
 8004d66:	bf00      	nop
 8004d68:	cfff69f3 	.word	0xcfff69f3
 8004d6c:	40008000 	.word	0x40008000
 8004d70:	40013800 	.word	0x40013800
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40004400 	.word	0x40004400
 8004d7c:	40004800 	.word	0x40004800
 8004d80:	40004c00 	.word	0x40004c00
 8004d84:	40005000 	.word	0x40005000
 8004d88:	2310      	movs	r3, #16
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a86      	ldr	r2, [pc, #536]	; (8004fac <UART_SetConfig+0x52c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	f040 8422 	bne.w	80055de <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	f200 8173 	bhi.w	800508a <UART_SetConfig+0x60a>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <UART_SetConfig+0x32c>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004dd1 	.word	0x08004dd1
 8004db0:	0800508b 	.word	0x0800508b
 8004db4:	08004e73 	.word	0x08004e73
 8004db8:	0800508b 	.word	0x0800508b
 8004dbc:	08004f0b 	.word	0x08004f0b
 8004dc0:	0800508b 	.word	0x0800508b
 8004dc4:	0800508b 	.word	0x0800508b
 8004dc8:	0800508b 	.word	0x0800508b
 8004dcc:	08004fdd 	.word	0x08004fdd
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004dd0:	f7fe f878 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d044      	beq.n	8004e68 <UART_SetConfig+0x3e8>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d03e      	beq.n	8004e64 <UART_SetConfig+0x3e4>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d038      	beq.n	8004e60 <UART_SetConfig+0x3e0>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d032      	beq.n	8004e5c <UART_SetConfig+0x3dc>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d02c      	beq.n	8004e58 <UART_SetConfig+0x3d8>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	2b05      	cmp	r3, #5
 8004e04:	d026      	beq.n	8004e54 <UART_SetConfig+0x3d4>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	2b06      	cmp	r3, #6
 8004e0c:	d020      	beq.n	8004e50 <UART_SetConfig+0x3d0>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	2b07      	cmp	r3, #7
 8004e14:	d01a      	beq.n	8004e4c <UART_SetConfig+0x3cc>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d014      	beq.n	8004e48 <UART_SetConfig+0x3c8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	2b09      	cmp	r3, #9
 8004e24:	d00e      	beq.n	8004e44 <UART_SetConfig+0x3c4>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	2b0a      	cmp	r3, #10
 8004e2c:	d008      	beq.n	8004e40 <UART_SetConfig+0x3c0>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2b0b      	cmp	r3, #11
 8004e34:	d102      	bne.n	8004e3c <UART_SetConfig+0x3bc>
 8004e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e3a:	e016      	b.n	8004e6a <UART_SetConfig+0x3ea>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e014      	b.n	8004e6a <UART_SetConfig+0x3ea>
 8004e40:	2380      	movs	r3, #128	; 0x80
 8004e42:	e012      	b.n	8004e6a <UART_SetConfig+0x3ea>
 8004e44:	2340      	movs	r3, #64	; 0x40
 8004e46:	e010      	b.n	8004e6a <UART_SetConfig+0x3ea>
 8004e48:	2320      	movs	r3, #32
 8004e4a:	e00e      	b.n	8004e6a <UART_SetConfig+0x3ea>
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	e00c      	b.n	8004e6a <UART_SetConfig+0x3ea>
 8004e50:	230c      	movs	r3, #12
 8004e52:	e00a      	b.n	8004e6a <UART_SetConfig+0x3ea>
 8004e54:	230a      	movs	r3, #10
 8004e56:	e008      	b.n	8004e6a <UART_SetConfig+0x3ea>
 8004e58:	2308      	movs	r3, #8
 8004e5a:	e006      	b.n	8004e6a <UART_SetConfig+0x3ea>
 8004e5c:	2306      	movs	r3, #6
 8004e5e:	e004      	b.n	8004e6a <UART_SetConfig+0x3ea>
 8004e60:	2304      	movs	r3, #4
 8004e62:	e002      	b.n	8004e6a <UART_SetConfig+0x3ea>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e000      	b.n	8004e6a <UART_SetConfig+0x3ea>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6e:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e70:	e10e      	b.n	8005090 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d044      	beq.n	8004f04 <UART_SetConfig+0x484>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d03e      	beq.n	8004f00 <UART_SetConfig+0x480>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d038      	beq.n	8004efc <UART_SetConfig+0x47c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d032      	beq.n	8004ef8 <UART_SetConfig+0x478>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d02c      	beq.n	8004ef4 <UART_SetConfig+0x474>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2b05      	cmp	r3, #5
 8004ea0:	d026      	beq.n	8004ef0 <UART_SetConfig+0x470>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	2b06      	cmp	r3, #6
 8004ea8:	d020      	beq.n	8004eec <UART_SetConfig+0x46c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	2b07      	cmp	r3, #7
 8004eb0:	d01a      	beq.n	8004ee8 <UART_SetConfig+0x468>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d014      	beq.n	8004ee4 <UART_SetConfig+0x464>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	2b09      	cmp	r3, #9
 8004ec0:	d00e      	beq.n	8004ee0 <UART_SetConfig+0x460>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	2b0a      	cmp	r3, #10
 8004ec8:	d008      	beq.n	8004edc <UART_SetConfig+0x45c>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	2b0b      	cmp	r3, #11
 8004ed0:	d102      	bne.n	8004ed8 <UART_SetConfig+0x458>
 8004ed2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004ed6:	e016      	b.n	8004f06 <UART_SetConfig+0x486>
 8004ed8:	4b35      	ldr	r3, [pc, #212]	; (8004fb0 <UART_SetConfig+0x530>)
 8004eda:	e014      	b.n	8004f06 <UART_SetConfig+0x486>
 8004edc:	4b35      	ldr	r3, [pc, #212]	; (8004fb4 <UART_SetConfig+0x534>)
 8004ede:	e012      	b.n	8004f06 <UART_SetConfig+0x486>
 8004ee0:	4b35      	ldr	r3, [pc, #212]	; (8004fb8 <UART_SetConfig+0x538>)
 8004ee2:	e010      	b.n	8004f06 <UART_SetConfig+0x486>
 8004ee4:	4b35      	ldr	r3, [pc, #212]	; (8004fbc <UART_SetConfig+0x53c>)
 8004ee6:	e00e      	b.n	8004f06 <UART_SetConfig+0x486>
 8004ee8:	4b35      	ldr	r3, [pc, #212]	; (8004fc0 <UART_SetConfig+0x540>)
 8004eea:	e00c      	b.n	8004f06 <UART_SetConfig+0x486>
 8004eec:	4b35      	ldr	r3, [pc, #212]	; (8004fc4 <UART_SetConfig+0x544>)
 8004eee:	e00a      	b.n	8004f06 <UART_SetConfig+0x486>
 8004ef0:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <UART_SetConfig+0x548>)
 8004ef2:	e008      	b.n	8004f06 <UART_SetConfig+0x486>
 8004ef4:	4b35      	ldr	r3, [pc, #212]	; (8004fcc <UART_SetConfig+0x54c>)
 8004ef6:	e006      	b.n	8004f06 <UART_SetConfig+0x486>
 8004ef8:	4b35      	ldr	r3, [pc, #212]	; (8004fd0 <UART_SetConfig+0x550>)
 8004efa:	e004      	b.n	8004f06 <UART_SetConfig+0x486>
 8004efc:	4b35      	ldr	r3, [pc, #212]	; (8004fd4 <UART_SetConfig+0x554>)
 8004efe:	e002      	b.n	8004f06 <UART_SetConfig+0x486>
 8004f00:	4b35      	ldr	r3, [pc, #212]	; (8004fd8 <UART_SetConfig+0x558>)
 8004f02:	e000      	b.n	8004f06 <UART_SetConfig+0x486>
 8004f04:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <UART_SetConfig+0x530>)
 8004f06:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f08:	e0c2      	b.n	8005090 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004f0a:	f7fd ff47 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d044      	beq.n	8004fa2 <UART_SetConfig+0x522>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d03e      	beq.n	8004f9e <UART_SetConfig+0x51e>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d038      	beq.n	8004f9a <UART_SetConfig+0x51a>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d032      	beq.n	8004f96 <UART_SetConfig+0x516>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d02c      	beq.n	8004f92 <UART_SetConfig+0x512>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	2b05      	cmp	r3, #5
 8004f3e:	d026      	beq.n	8004f8e <UART_SetConfig+0x50e>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	2b06      	cmp	r3, #6
 8004f46:	d020      	beq.n	8004f8a <UART_SetConfig+0x50a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	2b07      	cmp	r3, #7
 8004f4e:	d01a      	beq.n	8004f86 <UART_SetConfig+0x506>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d014      	beq.n	8004f82 <UART_SetConfig+0x502>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	2b09      	cmp	r3, #9
 8004f5e:	d00e      	beq.n	8004f7e <UART_SetConfig+0x4fe>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	2b0a      	cmp	r3, #10
 8004f66:	d008      	beq.n	8004f7a <UART_SetConfig+0x4fa>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	2b0b      	cmp	r3, #11
 8004f6e:	d102      	bne.n	8004f76 <UART_SetConfig+0x4f6>
 8004f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f74:	e016      	b.n	8004fa4 <UART_SetConfig+0x524>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e014      	b.n	8004fa4 <UART_SetConfig+0x524>
 8004f7a:	2380      	movs	r3, #128	; 0x80
 8004f7c:	e012      	b.n	8004fa4 <UART_SetConfig+0x524>
 8004f7e:	2340      	movs	r3, #64	; 0x40
 8004f80:	e010      	b.n	8004fa4 <UART_SetConfig+0x524>
 8004f82:	2320      	movs	r3, #32
 8004f84:	e00e      	b.n	8004fa4 <UART_SetConfig+0x524>
 8004f86:	2310      	movs	r3, #16
 8004f88:	e00c      	b.n	8004fa4 <UART_SetConfig+0x524>
 8004f8a:	230c      	movs	r3, #12
 8004f8c:	e00a      	b.n	8004fa4 <UART_SetConfig+0x524>
 8004f8e:	230a      	movs	r3, #10
 8004f90:	e008      	b.n	8004fa4 <UART_SetConfig+0x524>
 8004f92:	2308      	movs	r3, #8
 8004f94:	e006      	b.n	8004fa4 <UART_SetConfig+0x524>
 8004f96:	2306      	movs	r3, #6
 8004f98:	e004      	b.n	8004fa4 <UART_SetConfig+0x524>
 8004f9a:	2304      	movs	r3, #4
 8004f9c:	e002      	b.n	8004fa4 <UART_SetConfig+0x524>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e000      	b.n	8004fa4 <UART_SetConfig+0x524>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa8:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8004faa:	e071      	b.n	8005090 <UART_SetConfig+0x610>
 8004fac:	40008000 	.word	0x40008000
 8004fb0:	00f42400 	.word	0x00f42400
 8004fb4:	0001e848 	.word	0x0001e848
 8004fb8:	0003d090 	.word	0x0003d090
 8004fbc:	0007a120 	.word	0x0007a120
 8004fc0:	000f4240 	.word	0x000f4240
 8004fc4:	00145855 	.word	0x00145855
 8004fc8:	00186a00 	.word	0x00186a00
 8004fcc:	001e8480 	.word	0x001e8480
 8004fd0:	0028b0aa 	.word	0x0028b0aa
 8004fd4:	003d0900 	.word	0x003d0900
 8004fd8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d04e      	beq.n	8005082 <UART_SetConfig+0x602>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d047      	beq.n	800507c <UART_SetConfig+0x5fc>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d040      	beq.n	8005076 <UART_SetConfig+0x5f6>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d039      	beq.n	8005070 <UART_SetConfig+0x5f0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	2b04      	cmp	r3, #4
 8005002:	d032      	beq.n	800506a <UART_SetConfig+0x5ea>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	2b05      	cmp	r3, #5
 800500a:	d02b      	beq.n	8005064 <UART_SetConfig+0x5e4>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	2b06      	cmp	r3, #6
 8005012:	d024      	beq.n	800505e <UART_SetConfig+0x5de>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	2b07      	cmp	r3, #7
 800501a:	d01d      	beq.n	8005058 <UART_SetConfig+0x5d8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	2b08      	cmp	r3, #8
 8005022:	d016      	beq.n	8005052 <UART_SetConfig+0x5d2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	2b09      	cmp	r3, #9
 800502a:	d00f      	beq.n	800504c <UART_SetConfig+0x5cc>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	2b0a      	cmp	r3, #10
 8005032:	d008      	beq.n	8005046 <UART_SetConfig+0x5c6>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	2b0b      	cmp	r3, #11
 800503a:	d101      	bne.n	8005040 <UART_SetConfig+0x5c0>
 800503c:	2380      	movs	r3, #128	; 0x80
 800503e:	e022      	b.n	8005086 <UART_SetConfig+0x606>
 8005040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005044:	e01f      	b.n	8005086 <UART_SetConfig+0x606>
 8005046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800504a:	e01c      	b.n	8005086 <UART_SetConfig+0x606>
 800504c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005050:	e019      	b.n	8005086 <UART_SetConfig+0x606>
 8005052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005056:	e016      	b.n	8005086 <UART_SetConfig+0x606>
 8005058:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800505c:	e013      	b.n	8005086 <UART_SetConfig+0x606>
 800505e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005062:	e010      	b.n	8005086 <UART_SetConfig+0x606>
 8005064:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005068:	e00d      	b.n	8005086 <UART_SetConfig+0x606>
 800506a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800506e:	e00a      	b.n	8005086 <UART_SetConfig+0x606>
 8005070:	f241 5355 	movw	r3, #5461	; 0x1555
 8005074:	e007      	b.n	8005086 <UART_SetConfig+0x606>
 8005076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800507a:	e004      	b.n	8005086 <UART_SetConfig+0x606>
 800507c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005080:	e001      	b.n	8005086 <UART_SetConfig+0x606>
 8005082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005086:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8005088:	e002      	b.n	8005090 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	76fb      	strb	r3, [r7, #27]
        break;
 800508e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 86b7 	beq.w	8005e06 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4413      	add	r3, r2
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d305      	bcc.n	80050b4 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d903      	bls.n	80050bc <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	76fb      	strb	r3, [r7, #27]
 80050b8:	f000 bea5 	b.w	8005e06 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 80050bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	f200 8277 	bhi.w	80055b4 <UART_SetConfig+0xb34>
 80050c6:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <UART_SetConfig+0x64c>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	080055b5 	.word	0x080055b5
 80050d4:	0800522f 	.word	0x0800522f
 80050d8:	080055b5 	.word	0x080055b5
 80050dc:	08005325 	.word	0x08005325
 80050e0:	080055b5 	.word	0x080055b5
 80050e4:	080055b5 	.word	0x080055b5
 80050e8:	080055b5 	.word	0x080055b5
 80050ec:	08005463 	.word	0x08005463
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80050f0:	f7fd fee8 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 80050f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f04f 0100 	mov.w	r1, #0
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d067      	beq.n	80051d6 <UART_SetConfig+0x756>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	2b01      	cmp	r3, #1
 800510c:	d05e      	beq.n	80051cc <UART_SetConfig+0x74c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	2b02      	cmp	r3, #2
 8005114:	d055      	beq.n	80051c2 <UART_SetConfig+0x742>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	2b03      	cmp	r3, #3
 800511c:	d04c      	beq.n	80051b8 <UART_SetConfig+0x738>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	2b04      	cmp	r3, #4
 8005124:	d043      	beq.n	80051ae <UART_SetConfig+0x72e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	2b05      	cmp	r3, #5
 800512c:	d03a      	beq.n	80051a4 <UART_SetConfig+0x724>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	2b06      	cmp	r3, #6
 8005134:	d031      	beq.n	800519a <UART_SetConfig+0x71a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2b07      	cmp	r3, #7
 800513c:	d028      	beq.n	8005190 <UART_SetConfig+0x710>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	2b08      	cmp	r3, #8
 8005144:	d01f      	beq.n	8005186 <UART_SetConfig+0x706>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	2b09      	cmp	r3, #9
 800514c:	d016      	beq.n	800517c <UART_SetConfig+0x6fc>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b0a      	cmp	r3, #10
 8005154:	d00d      	beq.n	8005172 <UART_SetConfig+0x6f2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	2b0b      	cmp	r3, #11
 800515c:	d104      	bne.n	8005168 <UART_SetConfig+0x6e8>
 800515e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005162:	f04f 0400 	mov.w	r4, #0
 8005166:	e03a      	b.n	80051de <UART_SetConfig+0x75e>
 8005168:	f04f 0301 	mov.w	r3, #1
 800516c:	f04f 0400 	mov.w	r4, #0
 8005170:	e035      	b.n	80051de <UART_SetConfig+0x75e>
 8005172:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005176:	f04f 0400 	mov.w	r4, #0
 800517a:	e030      	b.n	80051de <UART_SetConfig+0x75e>
 800517c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005180:	f04f 0400 	mov.w	r4, #0
 8005184:	e02b      	b.n	80051de <UART_SetConfig+0x75e>
 8005186:	f04f 0320 	mov.w	r3, #32
 800518a:	f04f 0400 	mov.w	r4, #0
 800518e:	e026      	b.n	80051de <UART_SetConfig+0x75e>
 8005190:	f04f 0310 	mov.w	r3, #16
 8005194:	f04f 0400 	mov.w	r4, #0
 8005198:	e021      	b.n	80051de <UART_SetConfig+0x75e>
 800519a:	f04f 030c 	mov.w	r3, #12
 800519e:	f04f 0400 	mov.w	r4, #0
 80051a2:	e01c      	b.n	80051de <UART_SetConfig+0x75e>
 80051a4:	f04f 030a 	mov.w	r3, #10
 80051a8:	f04f 0400 	mov.w	r4, #0
 80051ac:	e017      	b.n	80051de <UART_SetConfig+0x75e>
 80051ae:	f04f 0308 	mov.w	r3, #8
 80051b2:	f04f 0400 	mov.w	r4, #0
 80051b6:	e012      	b.n	80051de <UART_SetConfig+0x75e>
 80051b8:	f04f 0306 	mov.w	r3, #6
 80051bc:	f04f 0400 	mov.w	r4, #0
 80051c0:	e00d      	b.n	80051de <UART_SetConfig+0x75e>
 80051c2:	f04f 0304 	mov.w	r3, #4
 80051c6:	f04f 0400 	mov.w	r4, #0
 80051ca:	e008      	b.n	80051de <UART_SetConfig+0x75e>
 80051cc:	f04f 0302 	mov.w	r3, #2
 80051d0:	f04f 0400 	mov.w	r4, #0
 80051d4:	e003      	b.n	80051de <UART_SetConfig+0x75e>
 80051d6:	f04f 0301 	mov.w	r3, #1
 80051da:	f04f 0400 	mov.w	r4, #0
 80051de:	461a      	mov	r2, r3
 80051e0:	4623      	mov	r3, r4
 80051e2:	f7fb f865 	bl	80002b0 <__aeabi_uldivmod>
 80051e6:	4603      	mov	r3, r0
 80051e8:	460c      	mov	r4, r1
 80051ea:	4619      	mov	r1, r3
 80051ec:	4622      	mov	r2, r4
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	f04f 0400 	mov.w	r4, #0
 80051f6:	0214      	lsls	r4, r2, #8
 80051f8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80051fc:	020b      	lsls	r3, r1, #8
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6852      	ldr	r2, [r2, #4]
 8005202:	0852      	lsrs	r2, r2, #1
 8005204:	4611      	mov	r1, r2
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	eb13 0b01 	adds.w	fp, r3, r1
 800520e:	eb44 0c02 	adc.w	ip, r4, r2
 8005212:	4658      	mov	r0, fp
 8005214:	4661      	mov	r1, ip
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f04f 0400 	mov.w	r4, #0
 800521e:	461a      	mov	r2, r3
 8005220:	4623      	mov	r3, r4
 8005222:	f7fb f845 	bl	80002b0 <__aeabi_uldivmod>
 8005226:	4603      	mov	r3, r0
 8005228:	460c      	mov	r4, r1
 800522a:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800522c:	e1c5      	b.n	80055ba <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	2b00      	cmp	r3, #0
 8005234:	d05b      	beq.n	80052ee <UART_SetConfig+0x86e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2b01      	cmp	r3, #1
 800523c:	d053      	beq.n	80052e6 <UART_SetConfig+0x866>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b02      	cmp	r3, #2
 8005244:	d04b      	beq.n	80052de <UART_SetConfig+0x85e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	2b03      	cmp	r3, #3
 800524c:	d043      	beq.n	80052d6 <UART_SetConfig+0x856>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	2b04      	cmp	r3, #4
 8005254:	d03b      	beq.n	80052ce <UART_SetConfig+0x84e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b05      	cmp	r3, #5
 800525c:	d033      	beq.n	80052c6 <UART_SetConfig+0x846>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	2b06      	cmp	r3, #6
 8005264:	d02b      	beq.n	80052be <UART_SetConfig+0x83e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	2b07      	cmp	r3, #7
 800526c:	d023      	beq.n	80052b6 <UART_SetConfig+0x836>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2b08      	cmp	r3, #8
 8005274:	d01b      	beq.n	80052ae <UART_SetConfig+0x82e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	2b09      	cmp	r3, #9
 800527c:	d013      	beq.n	80052a6 <UART_SetConfig+0x826>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	2b0a      	cmp	r3, #10
 8005284:	d00b      	beq.n	800529e <UART_SetConfig+0x81e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	2b0b      	cmp	r3, #11
 800528c:	d103      	bne.n	8005296 <UART_SetConfig+0x816>
 800528e:	4bae      	ldr	r3, [pc, #696]	; (8005548 <UART_SetConfig+0xac8>)
 8005290:	f04f 0400 	mov.w	r4, #0
 8005294:	e02e      	b.n	80052f4 <UART_SetConfig+0x874>
 8005296:	4bad      	ldr	r3, [pc, #692]	; (800554c <UART_SetConfig+0xacc>)
 8005298:	f04f 0400 	mov.w	r4, #0
 800529c:	e02a      	b.n	80052f4 <UART_SetConfig+0x874>
 800529e:	4bac      	ldr	r3, [pc, #688]	; (8005550 <UART_SetConfig+0xad0>)
 80052a0:	f04f 0400 	mov.w	r4, #0
 80052a4:	e026      	b.n	80052f4 <UART_SetConfig+0x874>
 80052a6:	4bab      	ldr	r3, [pc, #684]	; (8005554 <UART_SetConfig+0xad4>)
 80052a8:	f04f 0400 	mov.w	r4, #0
 80052ac:	e022      	b.n	80052f4 <UART_SetConfig+0x874>
 80052ae:	4baa      	ldr	r3, [pc, #680]	; (8005558 <UART_SetConfig+0xad8>)
 80052b0:	f04f 0400 	mov.w	r4, #0
 80052b4:	e01e      	b.n	80052f4 <UART_SetConfig+0x874>
 80052b6:	4ba9      	ldr	r3, [pc, #676]	; (800555c <UART_SetConfig+0xadc>)
 80052b8:	f04f 0400 	mov.w	r4, #0
 80052bc:	e01a      	b.n	80052f4 <UART_SetConfig+0x874>
 80052be:	a49e      	add	r4, pc, #632	; (adr r4, 8005538 <UART_SetConfig+0xab8>)
 80052c0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80052c4:	e016      	b.n	80052f4 <UART_SetConfig+0x874>
 80052c6:	4ba6      	ldr	r3, [pc, #664]	; (8005560 <UART_SetConfig+0xae0>)
 80052c8:	f04f 0400 	mov.w	r4, #0
 80052cc:	e012      	b.n	80052f4 <UART_SetConfig+0x874>
 80052ce:	4ba5      	ldr	r3, [pc, #660]	; (8005564 <UART_SetConfig+0xae4>)
 80052d0:	f04f 0400 	mov.w	r4, #0
 80052d4:	e00e      	b.n	80052f4 <UART_SetConfig+0x874>
 80052d6:	a49a      	add	r4, pc, #616	; (adr r4, 8005540 <UART_SetConfig+0xac0>)
 80052d8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80052dc:	e00a      	b.n	80052f4 <UART_SetConfig+0x874>
 80052de:	4ba2      	ldr	r3, [pc, #648]	; (8005568 <UART_SetConfig+0xae8>)
 80052e0:	f04f 0400 	mov.w	r4, #0
 80052e4:	e006      	b.n	80052f4 <UART_SetConfig+0x874>
 80052e6:	4ba1      	ldr	r3, [pc, #644]	; (800556c <UART_SetConfig+0xaec>)
 80052e8:	f04f 0400 	mov.w	r4, #0
 80052ec:	e002      	b.n	80052f4 <UART_SetConfig+0x874>
 80052ee:	4b97      	ldr	r3, [pc, #604]	; (800554c <UART_SetConfig+0xacc>)
 80052f0:	f04f 0400 	mov.w	r4, #0
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6852      	ldr	r2, [r2, #4]
 80052f8:	0852      	lsrs	r2, r2, #1
 80052fa:	4611      	mov	r1, r2
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	eb13 0b01 	adds.w	fp, r3, r1
 8005304:	eb44 0c02 	adc.w	ip, r4, r2
 8005308:	4658      	mov	r0, fp
 800530a:	4661      	mov	r1, ip
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f04f 0400 	mov.w	r4, #0
 8005314:	461a      	mov	r2, r3
 8005316:	4623      	mov	r3, r4
 8005318:	f7fa ffca 	bl	80002b0 <__aeabi_uldivmod>
 800531c:	4603      	mov	r3, r0
 800531e:	460c      	mov	r4, r1
 8005320:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005322:	e14a      	b.n	80055ba <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005324:	f7fd fd3a 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8005328:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4618      	mov	r0, r3
 800532e:	f04f 0100 	mov.w	r1, #0
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d067      	beq.n	800540a <UART_SetConfig+0x98a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	2b01      	cmp	r3, #1
 8005340:	d05e      	beq.n	8005400 <UART_SetConfig+0x980>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2b02      	cmp	r3, #2
 8005348:	d055      	beq.n	80053f6 <UART_SetConfig+0x976>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	2b03      	cmp	r3, #3
 8005350:	d04c      	beq.n	80053ec <UART_SetConfig+0x96c>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	2b04      	cmp	r3, #4
 8005358:	d043      	beq.n	80053e2 <UART_SetConfig+0x962>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	2b05      	cmp	r3, #5
 8005360:	d03a      	beq.n	80053d8 <UART_SetConfig+0x958>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	2b06      	cmp	r3, #6
 8005368:	d031      	beq.n	80053ce <UART_SetConfig+0x94e>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	2b07      	cmp	r3, #7
 8005370:	d028      	beq.n	80053c4 <UART_SetConfig+0x944>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2b08      	cmp	r3, #8
 8005378:	d01f      	beq.n	80053ba <UART_SetConfig+0x93a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2b09      	cmp	r3, #9
 8005380:	d016      	beq.n	80053b0 <UART_SetConfig+0x930>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	2b0a      	cmp	r3, #10
 8005388:	d00d      	beq.n	80053a6 <UART_SetConfig+0x926>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	2b0b      	cmp	r3, #11
 8005390:	d104      	bne.n	800539c <UART_SetConfig+0x91c>
 8005392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005396:	f04f 0400 	mov.w	r4, #0
 800539a:	e03a      	b.n	8005412 <UART_SetConfig+0x992>
 800539c:	f04f 0301 	mov.w	r3, #1
 80053a0:	f04f 0400 	mov.w	r4, #0
 80053a4:	e035      	b.n	8005412 <UART_SetConfig+0x992>
 80053a6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80053aa:	f04f 0400 	mov.w	r4, #0
 80053ae:	e030      	b.n	8005412 <UART_SetConfig+0x992>
 80053b0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80053b4:	f04f 0400 	mov.w	r4, #0
 80053b8:	e02b      	b.n	8005412 <UART_SetConfig+0x992>
 80053ba:	f04f 0320 	mov.w	r3, #32
 80053be:	f04f 0400 	mov.w	r4, #0
 80053c2:	e026      	b.n	8005412 <UART_SetConfig+0x992>
 80053c4:	f04f 0310 	mov.w	r3, #16
 80053c8:	f04f 0400 	mov.w	r4, #0
 80053cc:	e021      	b.n	8005412 <UART_SetConfig+0x992>
 80053ce:	f04f 030c 	mov.w	r3, #12
 80053d2:	f04f 0400 	mov.w	r4, #0
 80053d6:	e01c      	b.n	8005412 <UART_SetConfig+0x992>
 80053d8:	f04f 030a 	mov.w	r3, #10
 80053dc:	f04f 0400 	mov.w	r4, #0
 80053e0:	e017      	b.n	8005412 <UART_SetConfig+0x992>
 80053e2:	f04f 0308 	mov.w	r3, #8
 80053e6:	f04f 0400 	mov.w	r4, #0
 80053ea:	e012      	b.n	8005412 <UART_SetConfig+0x992>
 80053ec:	f04f 0306 	mov.w	r3, #6
 80053f0:	f04f 0400 	mov.w	r4, #0
 80053f4:	e00d      	b.n	8005412 <UART_SetConfig+0x992>
 80053f6:	f04f 0304 	mov.w	r3, #4
 80053fa:	f04f 0400 	mov.w	r4, #0
 80053fe:	e008      	b.n	8005412 <UART_SetConfig+0x992>
 8005400:	f04f 0302 	mov.w	r3, #2
 8005404:	f04f 0400 	mov.w	r4, #0
 8005408:	e003      	b.n	8005412 <UART_SetConfig+0x992>
 800540a:	f04f 0301 	mov.w	r3, #1
 800540e:	f04f 0400 	mov.w	r4, #0
 8005412:	461a      	mov	r2, r3
 8005414:	4623      	mov	r3, r4
 8005416:	f7fa ff4b 	bl	80002b0 <__aeabi_uldivmod>
 800541a:	4603      	mov	r3, r0
 800541c:	460c      	mov	r4, r1
 800541e:	4619      	mov	r1, r3
 8005420:	4622      	mov	r2, r4
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	f04f 0400 	mov.w	r4, #0
 800542a:	0214      	lsls	r4, r2, #8
 800542c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005430:	020b      	lsls	r3, r1, #8
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6852      	ldr	r2, [r2, #4]
 8005436:	0852      	lsrs	r2, r2, #1
 8005438:	4611      	mov	r1, r2
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	eb13 0b01 	adds.w	fp, r3, r1
 8005442:	eb44 0c02 	adc.w	ip, r4, r2
 8005446:	4658      	mov	r0, fp
 8005448:	4661      	mov	r1, ip
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f04f 0400 	mov.w	r4, #0
 8005452:	461a      	mov	r2, r3
 8005454:	4623      	mov	r3, r4
 8005456:	f7fa ff2b 	bl	80002b0 <__aeabi_uldivmod>
 800545a:	4603      	mov	r3, r0
 800545c:	460c      	mov	r4, r1
 800545e:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005460:	e0ab      	b.n	80055ba <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 8088 	beq.w	800557c <UART_SetConfig+0xafc>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	2b01      	cmp	r3, #1
 8005472:	d05b      	beq.n	800552c <UART_SetConfig+0xaac>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	2b02      	cmp	r3, #2
 800547a:	d052      	beq.n	8005522 <UART_SetConfig+0xaa2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	2b03      	cmp	r3, #3
 8005482:	d04a      	beq.n	800551a <UART_SetConfig+0xa9a>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	2b04      	cmp	r3, #4
 800548a:	d041      	beq.n	8005510 <UART_SetConfig+0xa90>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2b05      	cmp	r3, #5
 8005492:	d039      	beq.n	8005508 <UART_SetConfig+0xa88>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	2b06      	cmp	r3, #6
 800549a:	d031      	beq.n	8005500 <UART_SetConfig+0xa80>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	2b07      	cmp	r3, #7
 80054a2:	d028      	beq.n	80054f6 <UART_SetConfig+0xa76>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d01f      	beq.n	80054ec <UART_SetConfig+0xa6c>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	2b09      	cmp	r3, #9
 80054b2:	d016      	beq.n	80054e2 <UART_SetConfig+0xa62>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	2b0a      	cmp	r3, #10
 80054ba:	d00d      	beq.n	80054d8 <UART_SetConfig+0xa58>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b0b      	cmp	r3, #11
 80054c2:	d104      	bne.n	80054ce <UART_SetConfig+0xa4e>
 80054c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054c8:	f04f 0400 	mov.w	r4, #0
 80054cc:	e05a      	b.n	8005584 <UART_SetConfig+0xb04>
 80054ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80054d2:	f04f 0400 	mov.w	r4, #0
 80054d6:	e055      	b.n	8005584 <UART_SetConfig+0xb04>
 80054d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054dc:	f04f 0400 	mov.w	r4, #0
 80054e0:	e050      	b.n	8005584 <UART_SetConfig+0xb04>
 80054e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054e6:	f04f 0400 	mov.w	r4, #0
 80054ea:	e04b      	b.n	8005584 <UART_SetConfig+0xb04>
 80054ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054f0:	f04f 0400 	mov.w	r4, #0
 80054f4:	e046      	b.n	8005584 <UART_SetConfig+0xb04>
 80054f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80054fa:	f04f 0400 	mov.w	r4, #0
 80054fe:	e041      	b.n	8005584 <UART_SetConfig+0xb04>
 8005500:	4b1b      	ldr	r3, [pc, #108]	; (8005570 <UART_SetConfig+0xaf0>)
 8005502:	f04f 0400 	mov.w	r4, #0
 8005506:	e03d      	b.n	8005584 <UART_SetConfig+0xb04>
 8005508:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <UART_SetConfig+0xaf4>)
 800550a:	f04f 0400 	mov.w	r4, #0
 800550e:	e039      	b.n	8005584 <UART_SetConfig+0xb04>
 8005510:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005514:	f04f 0400 	mov.w	r4, #0
 8005518:	e034      	b.n	8005584 <UART_SetConfig+0xb04>
 800551a:	4b17      	ldr	r3, [pc, #92]	; (8005578 <UART_SetConfig+0xaf8>)
 800551c:	f04f 0400 	mov.w	r4, #0
 8005520:	e030      	b.n	8005584 <UART_SetConfig+0xb04>
 8005522:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005526:	f04f 0400 	mov.w	r4, #0
 800552a:	e02b      	b.n	8005584 <UART_SetConfig+0xb04>
 800552c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005530:	f04f 0400 	mov.w	r4, #0
 8005534:	e026      	b.n	8005584 <UART_SetConfig+0xb04>
 8005536:	bf00      	nop
 8005538:	14585500 	.word	0x14585500
 800553c:	00000000 	.word	0x00000000
 8005540:	28b0aa00 	.word	0x28b0aa00
 8005544:	00000000 	.word	0x00000000
 8005548:	00f42400 	.word	0x00f42400
 800554c:	f4240000 	.word	0xf4240000
 8005550:	01e84800 	.word	0x01e84800
 8005554:	03d09000 	.word	0x03d09000
 8005558:	07a12000 	.word	0x07a12000
 800555c:	0f424000 	.word	0x0f424000
 8005560:	186a0000 	.word	0x186a0000
 8005564:	1e848000 	.word	0x1e848000
 8005568:	3d090000 	.word	0x3d090000
 800556c:	7a120000 	.word	0x7a120000
 8005570:	000aaa00 	.word	0x000aaa00
 8005574:	000ccc00 	.word	0x000ccc00
 8005578:	00155500 	.word	0x00155500
 800557c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005580:	f04f 0400 	mov.w	r4, #0
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6852      	ldr	r2, [r2, #4]
 8005588:	0852      	lsrs	r2, r2, #1
 800558a:	4611      	mov	r1, r2
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	eb13 0b01 	adds.w	fp, r3, r1
 8005594:	eb44 0c02 	adc.w	ip, r4, r2
 8005598:	4658      	mov	r0, fp
 800559a:	4661      	mov	r1, ip
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f04f 0400 	mov.w	r4, #0
 80055a4:	461a      	mov	r2, r3
 80055a6:	4623      	mov	r3, r4
 80055a8:	f7fa fe82 	bl	80002b0 <__aeabi_uldivmod>
 80055ac:	4603      	mov	r3, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80055b2:	e002      	b.n	80055ba <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	76fb      	strb	r3, [r7, #27]
            break;
 80055b8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055c0:	d309      	bcc.n	80055d6 <UART_SetConfig+0xb56>
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c8:	d205      	bcs.n	80055d6 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	60da      	str	r2, [r3, #12]
 80055d2:	f000 bc18 	b.w	8005e06 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	76fb      	strb	r3, [r7, #27]
 80055da:	f000 bc14 	b.w	8005e06 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e6:	f040 8204 	bne.w	80059f2 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 80055ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	f200 81df 	bhi.w	80059b2 <UART_SetConfig+0xf32>
 80055f4:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <UART_SetConfig+0xb7c>)
 80055f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	08005621 	.word	0x08005621
 8005600:	080056d9 	.word	0x080056d9
 8005604:	08005791 	.word	0x08005791
 8005608:	080059b3 	.word	0x080059b3
 800560c:	08005839 	.word	0x08005839
 8005610:	080059b3 	.word	0x080059b3
 8005614:	080059b3 	.word	0x080059b3
 8005618:	080059b3 	.word	0x080059b3
 800561c:	080058f1 	.word	0x080058f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005620:	f7fd fc50 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8005624:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	2b00      	cmp	r3, #0
 800562c:	d044      	beq.n	80056b8 <UART_SetConfig+0xc38>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	2b01      	cmp	r3, #1
 8005634:	d03e      	beq.n	80056b4 <UART_SetConfig+0xc34>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	2b02      	cmp	r3, #2
 800563c:	d038      	beq.n	80056b0 <UART_SetConfig+0xc30>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	2b03      	cmp	r3, #3
 8005644:	d032      	beq.n	80056ac <UART_SetConfig+0xc2c>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	2b04      	cmp	r3, #4
 800564c:	d02c      	beq.n	80056a8 <UART_SetConfig+0xc28>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	2b05      	cmp	r3, #5
 8005654:	d026      	beq.n	80056a4 <UART_SetConfig+0xc24>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	2b06      	cmp	r3, #6
 800565c:	d020      	beq.n	80056a0 <UART_SetConfig+0xc20>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	2b07      	cmp	r3, #7
 8005664:	d01a      	beq.n	800569c <UART_SetConfig+0xc1c>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	2b08      	cmp	r3, #8
 800566c:	d014      	beq.n	8005698 <UART_SetConfig+0xc18>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	2b09      	cmp	r3, #9
 8005674:	d00e      	beq.n	8005694 <UART_SetConfig+0xc14>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	2b0a      	cmp	r3, #10
 800567c:	d008      	beq.n	8005690 <UART_SetConfig+0xc10>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	2b0b      	cmp	r3, #11
 8005684:	d102      	bne.n	800568c <UART_SetConfig+0xc0c>
 8005686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800568a:	e016      	b.n	80056ba <UART_SetConfig+0xc3a>
 800568c:	2301      	movs	r3, #1
 800568e:	e014      	b.n	80056ba <UART_SetConfig+0xc3a>
 8005690:	2380      	movs	r3, #128	; 0x80
 8005692:	e012      	b.n	80056ba <UART_SetConfig+0xc3a>
 8005694:	2340      	movs	r3, #64	; 0x40
 8005696:	e010      	b.n	80056ba <UART_SetConfig+0xc3a>
 8005698:	2320      	movs	r3, #32
 800569a:	e00e      	b.n	80056ba <UART_SetConfig+0xc3a>
 800569c:	2310      	movs	r3, #16
 800569e:	e00c      	b.n	80056ba <UART_SetConfig+0xc3a>
 80056a0:	230c      	movs	r3, #12
 80056a2:	e00a      	b.n	80056ba <UART_SetConfig+0xc3a>
 80056a4:	230a      	movs	r3, #10
 80056a6:	e008      	b.n	80056ba <UART_SetConfig+0xc3a>
 80056a8:	2308      	movs	r3, #8
 80056aa:	e006      	b.n	80056ba <UART_SetConfig+0xc3a>
 80056ac:	2306      	movs	r3, #6
 80056ae:	e004      	b.n	80056ba <UART_SetConfig+0xc3a>
 80056b0:	2304      	movs	r3, #4
 80056b2:	e002      	b.n	80056ba <UART_SetConfig+0xc3a>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e000      	b.n	80056ba <UART_SetConfig+0xc3a>
 80056b8:	2301      	movs	r3, #1
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c0:	005a      	lsls	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	441a      	add	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80056d6:	e16f      	b.n	80059b8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d8:	f7fd fc0a 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 80056dc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d044      	beq.n	8005770 <UART_SetConfig+0xcf0>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d03e      	beq.n	800576c <UART_SetConfig+0xcec>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d038      	beq.n	8005768 <UART_SetConfig+0xce8>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	d032      	beq.n	8005764 <UART_SetConfig+0xce4>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	2b04      	cmp	r3, #4
 8005704:	d02c      	beq.n	8005760 <UART_SetConfig+0xce0>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	2b05      	cmp	r3, #5
 800570c:	d026      	beq.n	800575c <UART_SetConfig+0xcdc>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	2b06      	cmp	r3, #6
 8005714:	d020      	beq.n	8005758 <UART_SetConfig+0xcd8>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	2b07      	cmp	r3, #7
 800571c:	d01a      	beq.n	8005754 <UART_SetConfig+0xcd4>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	2b08      	cmp	r3, #8
 8005724:	d014      	beq.n	8005750 <UART_SetConfig+0xcd0>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	2b09      	cmp	r3, #9
 800572c:	d00e      	beq.n	800574c <UART_SetConfig+0xccc>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	2b0a      	cmp	r3, #10
 8005734:	d008      	beq.n	8005748 <UART_SetConfig+0xcc8>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	2b0b      	cmp	r3, #11
 800573c:	d102      	bne.n	8005744 <UART_SetConfig+0xcc4>
 800573e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005742:	e016      	b.n	8005772 <UART_SetConfig+0xcf2>
 8005744:	2301      	movs	r3, #1
 8005746:	e014      	b.n	8005772 <UART_SetConfig+0xcf2>
 8005748:	2380      	movs	r3, #128	; 0x80
 800574a:	e012      	b.n	8005772 <UART_SetConfig+0xcf2>
 800574c:	2340      	movs	r3, #64	; 0x40
 800574e:	e010      	b.n	8005772 <UART_SetConfig+0xcf2>
 8005750:	2320      	movs	r3, #32
 8005752:	e00e      	b.n	8005772 <UART_SetConfig+0xcf2>
 8005754:	2310      	movs	r3, #16
 8005756:	e00c      	b.n	8005772 <UART_SetConfig+0xcf2>
 8005758:	230c      	movs	r3, #12
 800575a:	e00a      	b.n	8005772 <UART_SetConfig+0xcf2>
 800575c:	230a      	movs	r3, #10
 800575e:	e008      	b.n	8005772 <UART_SetConfig+0xcf2>
 8005760:	2308      	movs	r3, #8
 8005762:	e006      	b.n	8005772 <UART_SetConfig+0xcf2>
 8005764:	2306      	movs	r3, #6
 8005766:	e004      	b.n	8005772 <UART_SetConfig+0xcf2>
 8005768:	2304      	movs	r3, #4
 800576a:	e002      	b.n	8005772 <UART_SetConfig+0xcf2>
 800576c:	2302      	movs	r3, #2
 800576e:	e000      	b.n	8005772 <UART_SetConfig+0xcf2>
 8005770:	2301      	movs	r3, #1
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	fbb2 f3f3 	udiv	r3, r2, r3
 8005778:	005a      	lsls	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	441a      	add	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	fbb2 f3f3 	udiv	r3, r2, r3
 800578a:	b29b      	uxth	r3, r3
 800578c:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800578e:	e113      	b.n	80059b8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d043      	beq.n	8005820 <UART_SetConfig+0xda0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	2b01      	cmp	r3, #1
 800579e:	d03d      	beq.n	800581c <UART_SetConfig+0xd9c>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d037      	beq.n	8005818 <UART_SetConfig+0xd98>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d031      	beq.n	8005814 <UART_SetConfig+0xd94>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d02b      	beq.n	8005810 <UART_SetConfig+0xd90>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	2b05      	cmp	r3, #5
 80057be:	d025      	beq.n	800580c <UART_SetConfig+0xd8c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	2b06      	cmp	r3, #6
 80057c6:	d01f      	beq.n	8005808 <UART_SetConfig+0xd88>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	2b07      	cmp	r3, #7
 80057ce:	d019      	beq.n	8005804 <UART_SetConfig+0xd84>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d013      	beq.n	8005800 <UART_SetConfig+0xd80>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	2b09      	cmp	r3, #9
 80057de:	d00d      	beq.n	80057fc <UART_SetConfig+0xd7c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	2b0a      	cmp	r3, #10
 80057e6:	d007      	beq.n	80057f8 <UART_SetConfig+0xd78>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	2b0b      	cmp	r3, #11
 80057ee:	d101      	bne.n	80057f4 <UART_SetConfig+0xd74>
 80057f0:	4b8d      	ldr	r3, [pc, #564]	; (8005a28 <UART_SetConfig+0xfa8>)
 80057f2:	e016      	b.n	8005822 <UART_SetConfig+0xda2>
 80057f4:	4b8d      	ldr	r3, [pc, #564]	; (8005a2c <UART_SetConfig+0xfac>)
 80057f6:	e014      	b.n	8005822 <UART_SetConfig+0xda2>
 80057f8:	4b8d      	ldr	r3, [pc, #564]	; (8005a30 <UART_SetConfig+0xfb0>)
 80057fa:	e012      	b.n	8005822 <UART_SetConfig+0xda2>
 80057fc:	4b8d      	ldr	r3, [pc, #564]	; (8005a34 <UART_SetConfig+0xfb4>)
 80057fe:	e010      	b.n	8005822 <UART_SetConfig+0xda2>
 8005800:	4b8d      	ldr	r3, [pc, #564]	; (8005a38 <UART_SetConfig+0xfb8>)
 8005802:	e00e      	b.n	8005822 <UART_SetConfig+0xda2>
 8005804:	4b8d      	ldr	r3, [pc, #564]	; (8005a3c <UART_SetConfig+0xfbc>)
 8005806:	e00c      	b.n	8005822 <UART_SetConfig+0xda2>
 8005808:	4b8d      	ldr	r3, [pc, #564]	; (8005a40 <UART_SetConfig+0xfc0>)
 800580a:	e00a      	b.n	8005822 <UART_SetConfig+0xda2>
 800580c:	4b8d      	ldr	r3, [pc, #564]	; (8005a44 <UART_SetConfig+0xfc4>)
 800580e:	e008      	b.n	8005822 <UART_SetConfig+0xda2>
 8005810:	4b8d      	ldr	r3, [pc, #564]	; (8005a48 <UART_SetConfig+0xfc8>)
 8005812:	e006      	b.n	8005822 <UART_SetConfig+0xda2>
 8005814:	4b8d      	ldr	r3, [pc, #564]	; (8005a4c <UART_SetConfig+0xfcc>)
 8005816:	e004      	b.n	8005822 <UART_SetConfig+0xda2>
 8005818:	4b8d      	ldr	r3, [pc, #564]	; (8005a50 <UART_SetConfig+0xfd0>)
 800581a:	e002      	b.n	8005822 <UART_SetConfig+0xda2>
 800581c:	4b8d      	ldr	r3, [pc, #564]	; (8005a54 <UART_SetConfig+0xfd4>)
 800581e:	e000      	b.n	8005822 <UART_SetConfig+0xda2>
 8005820:	4b82      	ldr	r3, [pc, #520]	; (8005a2c <UART_SetConfig+0xfac>)
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6852      	ldr	r2, [r2, #4]
 8005826:	0852      	lsrs	r2, r2, #1
 8005828:	441a      	add	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005832:	b29b      	uxth	r3, r3
 8005834:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005836:	e0bf      	b.n	80059b8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005838:	f7fd fab0 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 800583c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b00      	cmp	r3, #0
 8005844:	d044      	beq.n	80058d0 <UART_SetConfig+0xe50>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	2b01      	cmp	r3, #1
 800584c:	d03e      	beq.n	80058cc <UART_SetConfig+0xe4c>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	2b02      	cmp	r3, #2
 8005854:	d038      	beq.n	80058c8 <UART_SetConfig+0xe48>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	2b03      	cmp	r3, #3
 800585c:	d032      	beq.n	80058c4 <UART_SetConfig+0xe44>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	2b04      	cmp	r3, #4
 8005864:	d02c      	beq.n	80058c0 <UART_SetConfig+0xe40>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	2b05      	cmp	r3, #5
 800586c:	d026      	beq.n	80058bc <UART_SetConfig+0xe3c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	2b06      	cmp	r3, #6
 8005874:	d020      	beq.n	80058b8 <UART_SetConfig+0xe38>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	2b07      	cmp	r3, #7
 800587c:	d01a      	beq.n	80058b4 <UART_SetConfig+0xe34>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	2b08      	cmp	r3, #8
 8005884:	d014      	beq.n	80058b0 <UART_SetConfig+0xe30>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	2b09      	cmp	r3, #9
 800588c:	d00e      	beq.n	80058ac <UART_SetConfig+0xe2c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	2b0a      	cmp	r3, #10
 8005894:	d008      	beq.n	80058a8 <UART_SetConfig+0xe28>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2b0b      	cmp	r3, #11
 800589c:	d102      	bne.n	80058a4 <UART_SetConfig+0xe24>
 800589e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058a2:	e016      	b.n	80058d2 <UART_SetConfig+0xe52>
 80058a4:	2301      	movs	r3, #1
 80058a6:	e014      	b.n	80058d2 <UART_SetConfig+0xe52>
 80058a8:	2380      	movs	r3, #128	; 0x80
 80058aa:	e012      	b.n	80058d2 <UART_SetConfig+0xe52>
 80058ac:	2340      	movs	r3, #64	; 0x40
 80058ae:	e010      	b.n	80058d2 <UART_SetConfig+0xe52>
 80058b0:	2320      	movs	r3, #32
 80058b2:	e00e      	b.n	80058d2 <UART_SetConfig+0xe52>
 80058b4:	2310      	movs	r3, #16
 80058b6:	e00c      	b.n	80058d2 <UART_SetConfig+0xe52>
 80058b8:	230c      	movs	r3, #12
 80058ba:	e00a      	b.n	80058d2 <UART_SetConfig+0xe52>
 80058bc:	230a      	movs	r3, #10
 80058be:	e008      	b.n	80058d2 <UART_SetConfig+0xe52>
 80058c0:	2308      	movs	r3, #8
 80058c2:	e006      	b.n	80058d2 <UART_SetConfig+0xe52>
 80058c4:	2306      	movs	r3, #6
 80058c6:	e004      	b.n	80058d2 <UART_SetConfig+0xe52>
 80058c8:	2304      	movs	r3, #4
 80058ca:	e002      	b.n	80058d2 <UART_SetConfig+0xe52>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e000      	b.n	80058d2 <UART_SetConfig+0xe52>
 80058d0:	2301      	movs	r3, #1
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d8:	005a      	lsls	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	085b      	lsrs	r3, r3, #1
 80058e0:	441a      	add	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80058ee:	e063      	b.n	80059b8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d04f      	beq.n	8005998 <UART_SetConfig+0xf18>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d048      	beq.n	8005992 <UART_SetConfig+0xf12>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	2b02      	cmp	r3, #2
 8005906:	d041      	beq.n	800598c <UART_SetConfig+0xf0c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	2b03      	cmp	r3, #3
 800590e:	d03a      	beq.n	8005986 <UART_SetConfig+0xf06>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2b04      	cmp	r3, #4
 8005916:	d033      	beq.n	8005980 <UART_SetConfig+0xf00>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	2b05      	cmp	r3, #5
 800591e:	d02c      	beq.n	800597a <UART_SetConfig+0xefa>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	2b06      	cmp	r3, #6
 8005926:	d025      	beq.n	8005974 <UART_SetConfig+0xef4>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	2b07      	cmp	r3, #7
 800592e:	d01e      	beq.n	800596e <UART_SetConfig+0xeee>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	2b08      	cmp	r3, #8
 8005936:	d017      	beq.n	8005968 <UART_SetConfig+0xee8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	2b09      	cmp	r3, #9
 800593e:	d010      	beq.n	8005962 <UART_SetConfig+0xee2>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	2b0a      	cmp	r3, #10
 8005946:	d009      	beq.n	800595c <UART_SetConfig+0xedc>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	2b0b      	cmp	r3, #11
 800594e:	d102      	bne.n	8005956 <UART_SetConfig+0xed6>
 8005950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005954:	e022      	b.n	800599c <UART_SetConfig+0xf1c>
 8005956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800595a:	e01f      	b.n	800599c <UART_SetConfig+0xf1c>
 800595c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005960:	e01c      	b.n	800599c <UART_SetConfig+0xf1c>
 8005962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005966:	e019      	b.n	800599c <UART_SetConfig+0xf1c>
 8005968:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800596c:	e016      	b.n	800599c <UART_SetConfig+0xf1c>
 800596e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005972:	e013      	b.n	800599c <UART_SetConfig+0xf1c>
 8005974:	f241 5354 	movw	r3, #5460	; 0x1554
 8005978:	e010      	b.n	800599c <UART_SetConfig+0xf1c>
 800597a:	f641 1398 	movw	r3, #6552	; 0x1998
 800597e:	e00d      	b.n	800599c <UART_SetConfig+0xf1c>
 8005980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005984:	e00a      	b.n	800599c <UART_SetConfig+0xf1c>
 8005986:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800598a:	e007      	b.n	800599c <UART_SetConfig+0xf1c>
 800598c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005990:	e004      	b.n	800599c <UART_SetConfig+0xf1c>
 8005992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005996:	e001      	b.n	800599c <UART_SetConfig+0xf1c>
 8005998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6852      	ldr	r2, [r2, #4]
 80059a0:	0852      	lsrs	r2, r2, #1
 80059a2:	441a      	add	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80059b0:	e002      	b.n	80059b8 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	76fb      	strb	r3, [r7, #27]
        break;
 80059b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	2b0f      	cmp	r3, #15
 80059bc:	d916      	bls.n	80059ec <UART_SetConfig+0xf6c>
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c4:	d212      	bcs.n	80059ec <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f023 030f 	bic.w	r3, r3, #15
 80059ce:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	085b      	lsrs	r3, r3, #1
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	b29a      	uxth	r2, r3
 80059dc:	89fb      	ldrh	r3, [r7, #14]
 80059de:	4313      	orrs	r3, r2
 80059e0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	89fa      	ldrh	r2, [r7, #14]
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	e20c      	b.n	8005e06 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	76fb      	strb	r3, [r7, #27]
 80059f0:	e209      	b.n	8005e06 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 80059f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	f200 81f4 	bhi.w	8005de4 <UART_SetConfig+0x1364>
 80059fc:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <UART_SetConfig+0xf84>)
 80059fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a02:	bf00      	nop
 8005a04:	08005a59 	.word	0x08005a59
 8005a08:	08005b0f 	.word	0x08005b0f
 8005a0c:	08005bc5 	.word	0x08005bc5
 8005a10:	08005de5 	.word	0x08005de5
 8005a14:	08005c6f 	.word	0x08005c6f
 8005a18:	08005de5 	.word	0x08005de5
 8005a1c:	08005de5 	.word	0x08005de5
 8005a20:	08005de5 	.word	0x08005de5
 8005a24:	08005d25 	.word	0x08005d25
 8005a28:	0001e848 	.word	0x0001e848
 8005a2c:	01e84800 	.word	0x01e84800
 8005a30:	0003d090 	.word	0x0003d090
 8005a34:	0007a120 	.word	0x0007a120
 8005a38:	000f4240 	.word	0x000f4240
 8005a3c:	001e8480 	.word	0x001e8480
 8005a40:	0028b0aa 	.word	0x0028b0aa
 8005a44:	0030d400 	.word	0x0030d400
 8005a48:	003d0900 	.word	0x003d0900
 8005a4c:	00516154 	.word	0x00516154
 8005a50:	007a1200 	.word	0x007a1200
 8005a54:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a58:	f7fd fa34 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8005a5c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d044      	beq.n	8005af0 <UART_SetConfig+0x1070>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d03e      	beq.n	8005aec <UART_SetConfig+0x106c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d038      	beq.n	8005ae8 <UART_SetConfig+0x1068>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d032      	beq.n	8005ae4 <UART_SetConfig+0x1064>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d02c      	beq.n	8005ae0 <UART_SetConfig+0x1060>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	2b05      	cmp	r3, #5
 8005a8c:	d026      	beq.n	8005adc <UART_SetConfig+0x105c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	2b06      	cmp	r3, #6
 8005a94:	d020      	beq.n	8005ad8 <UART_SetConfig+0x1058>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2b07      	cmp	r3, #7
 8005a9c:	d01a      	beq.n	8005ad4 <UART_SetConfig+0x1054>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d014      	beq.n	8005ad0 <UART_SetConfig+0x1050>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	2b09      	cmp	r3, #9
 8005aac:	d00e      	beq.n	8005acc <UART_SetConfig+0x104c>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	2b0a      	cmp	r3, #10
 8005ab4:	d008      	beq.n	8005ac8 <UART_SetConfig+0x1048>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	2b0b      	cmp	r3, #11
 8005abc:	d102      	bne.n	8005ac4 <UART_SetConfig+0x1044>
 8005abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ac2:	e016      	b.n	8005af2 <UART_SetConfig+0x1072>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e014      	b.n	8005af2 <UART_SetConfig+0x1072>
 8005ac8:	2380      	movs	r3, #128	; 0x80
 8005aca:	e012      	b.n	8005af2 <UART_SetConfig+0x1072>
 8005acc:	2340      	movs	r3, #64	; 0x40
 8005ace:	e010      	b.n	8005af2 <UART_SetConfig+0x1072>
 8005ad0:	2320      	movs	r3, #32
 8005ad2:	e00e      	b.n	8005af2 <UART_SetConfig+0x1072>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	e00c      	b.n	8005af2 <UART_SetConfig+0x1072>
 8005ad8:	230c      	movs	r3, #12
 8005ada:	e00a      	b.n	8005af2 <UART_SetConfig+0x1072>
 8005adc:	230a      	movs	r3, #10
 8005ade:	e008      	b.n	8005af2 <UART_SetConfig+0x1072>
 8005ae0:	2308      	movs	r3, #8
 8005ae2:	e006      	b.n	8005af2 <UART_SetConfig+0x1072>
 8005ae4:	2306      	movs	r3, #6
 8005ae6:	e004      	b.n	8005af2 <UART_SetConfig+0x1072>
 8005ae8:	2304      	movs	r3, #4
 8005aea:	e002      	b.n	8005af2 <UART_SetConfig+0x1072>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e000      	b.n	8005af2 <UART_SetConfig+0x1072>
 8005af0:	2301      	movs	r3, #1
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	085b      	lsrs	r3, r3, #1
 8005afe:	441a      	add	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b0c:	e16d      	b.n	8005dea <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b0e:	f7fd f9ef 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 8005b12:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d044      	beq.n	8005ba6 <UART_SetConfig+0x1126>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d03e      	beq.n	8005ba2 <UART_SetConfig+0x1122>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d038      	beq.n	8005b9e <UART_SetConfig+0x111e>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d032      	beq.n	8005b9a <UART_SetConfig+0x111a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d02c      	beq.n	8005b96 <UART_SetConfig+0x1116>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	2b05      	cmp	r3, #5
 8005b42:	d026      	beq.n	8005b92 <UART_SetConfig+0x1112>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	2b06      	cmp	r3, #6
 8005b4a:	d020      	beq.n	8005b8e <UART_SetConfig+0x110e>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	2b07      	cmp	r3, #7
 8005b52:	d01a      	beq.n	8005b8a <UART_SetConfig+0x110a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d014      	beq.n	8005b86 <UART_SetConfig+0x1106>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	2b09      	cmp	r3, #9
 8005b62:	d00e      	beq.n	8005b82 <UART_SetConfig+0x1102>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	2b0a      	cmp	r3, #10
 8005b6a:	d008      	beq.n	8005b7e <UART_SetConfig+0x10fe>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	2b0b      	cmp	r3, #11
 8005b72:	d102      	bne.n	8005b7a <UART_SetConfig+0x10fa>
 8005b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b78:	e016      	b.n	8005ba8 <UART_SetConfig+0x1128>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e014      	b.n	8005ba8 <UART_SetConfig+0x1128>
 8005b7e:	2380      	movs	r3, #128	; 0x80
 8005b80:	e012      	b.n	8005ba8 <UART_SetConfig+0x1128>
 8005b82:	2340      	movs	r3, #64	; 0x40
 8005b84:	e010      	b.n	8005ba8 <UART_SetConfig+0x1128>
 8005b86:	2320      	movs	r3, #32
 8005b88:	e00e      	b.n	8005ba8 <UART_SetConfig+0x1128>
 8005b8a:	2310      	movs	r3, #16
 8005b8c:	e00c      	b.n	8005ba8 <UART_SetConfig+0x1128>
 8005b8e:	230c      	movs	r3, #12
 8005b90:	e00a      	b.n	8005ba8 <UART_SetConfig+0x1128>
 8005b92:	230a      	movs	r3, #10
 8005b94:	e008      	b.n	8005ba8 <UART_SetConfig+0x1128>
 8005b96:	2308      	movs	r3, #8
 8005b98:	e006      	b.n	8005ba8 <UART_SetConfig+0x1128>
 8005b9a:	2306      	movs	r3, #6
 8005b9c:	e004      	b.n	8005ba8 <UART_SetConfig+0x1128>
 8005b9e:	2304      	movs	r3, #4
 8005ba0:	e002      	b.n	8005ba8 <UART_SetConfig+0x1128>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e000      	b.n	8005ba8 <UART_SetConfig+0x1128>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	441a      	add	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bc2:	e112      	b.n	8005dea <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d044      	beq.n	8005c56 <UART_SetConfig+0x11d6>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d03e      	beq.n	8005c52 <UART_SetConfig+0x11d2>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d038      	beq.n	8005c4e <UART_SetConfig+0x11ce>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d032      	beq.n	8005c4a <UART_SetConfig+0x11ca>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d02c      	beq.n	8005c46 <UART_SetConfig+0x11c6>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	2b05      	cmp	r3, #5
 8005bf2:	d026      	beq.n	8005c42 <UART_SetConfig+0x11c2>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	2b06      	cmp	r3, #6
 8005bfa:	d020      	beq.n	8005c3e <UART_SetConfig+0x11be>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	2b07      	cmp	r3, #7
 8005c02:	d01a      	beq.n	8005c3a <UART_SetConfig+0x11ba>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d014      	beq.n	8005c36 <UART_SetConfig+0x11b6>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2b09      	cmp	r3, #9
 8005c12:	d00e      	beq.n	8005c32 <UART_SetConfig+0x11b2>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	2b0a      	cmp	r3, #10
 8005c1a:	d008      	beq.n	8005c2e <UART_SetConfig+0x11ae>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	2b0b      	cmp	r3, #11
 8005c22:	d102      	bne.n	8005c2a <UART_SetConfig+0x11aa>
 8005c24:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005c28:	e016      	b.n	8005c58 <UART_SetConfig+0x11d8>
 8005c2a:	4b81      	ldr	r3, [pc, #516]	; (8005e30 <UART_SetConfig+0x13b0>)
 8005c2c:	e014      	b.n	8005c58 <UART_SetConfig+0x11d8>
 8005c2e:	4b81      	ldr	r3, [pc, #516]	; (8005e34 <UART_SetConfig+0x13b4>)
 8005c30:	e012      	b.n	8005c58 <UART_SetConfig+0x11d8>
 8005c32:	4b81      	ldr	r3, [pc, #516]	; (8005e38 <UART_SetConfig+0x13b8>)
 8005c34:	e010      	b.n	8005c58 <UART_SetConfig+0x11d8>
 8005c36:	4b81      	ldr	r3, [pc, #516]	; (8005e3c <UART_SetConfig+0x13bc>)
 8005c38:	e00e      	b.n	8005c58 <UART_SetConfig+0x11d8>
 8005c3a:	4b81      	ldr	r3, [pc, #516]	; (8005e40 <UART_SetConfig+0x13c0>)
 8005c3c:	e00c      	b.n	8005c58 <UART_SetConfig+0x11d8>
 8005c3e:	4b81      	ldr	r3, [pc, #516]	; (8005e44 <UART_SetConfig+0x13c4>)
 8005c40:	e00a      	b.n	8005c58 <UART_SetConfig+0x11d8>
 8005c42:	4b81      	ldr	r3, [pc, #516]	; (8005e48 <UART_SetConfig+0x13c8>)
 8005c44:	e008      	b.n	8005c58 <UART_SetConfig+0x11d8>
 8005c46:	4b81      	ldr	r3, [pc, #516]	; (8005e4c <UART_SetConfig+0x13cc>)
 8005c48:	e006      	b.n	8005c58 <UART_SetConfig+0x11d8>
 8005c4a:	4b81      	ldr	r3, [pc, #516]	; (8005e50 <UART_SetConfig+0x13d0>)
 8005c4c:	e004      	b.n	8005c58 <UART_SetConfig+0x11d8>
 8005c4e:	4b81      	ldr	r3, [pc, #516]	; (8005e54 <UART_SetConfig+0x13d4>)
 8005c50:	e002      	b.n	8005c58 <UART_SetConfig+0x11d8>
 8005c52:	4b81      	ldr	r3, [pc, #516]	; (8005e58 <UART_SetConfig+0x13d8>)
 8005c54:	e000      	b.n	8005c58 <UART_SetConfig+0x11d8>
 8005c56:	4b76      	ldr	r3, [pc, #472]	; (8005e30 <UART_SetConfig+0x13b0>)
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6852      	ldr	r2, [r2, #4]
 8005c5c:	0852      	lsrs	r2, r2, #1
 8005c5e:	441a      	add	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c6c:	e0bd      	b.n	8005dea <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c6e:	f7fd f895 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8005c72:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d044      	beq.n	8005d06 <UART_SetConfig+0x1286>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d03e      	beq.n	8005d02 <UART_SetConfig+0x1282>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d038      	beq.n	8005cfe <UART_SetConfig+0x127e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d032      	beq.n	8005cfa <UART_SetConfig+0x127a>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d02c      	beq.n	8005cf6 <UART_SetConfig+0x1276>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b05      	cmp	r3, #5
 8005ca2:	d026      	beq.n	8005cf2 <UART_SetConfig+0x1272>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	2b06      	cmp	r3, #6
 8005caa:	d020      	beq.n	8005cee <UART_SetConfig+0x126e>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2b07      	cmp	r3, #7
 8005cb2:	d01a      	beq.n	8005cea <UART_SetConfig+0x126a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d014      	beq.n	8005ce6 <UART_SetConfig+0x1266>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	2b09      	cmp	r3, #9
 8005cc2:	d00e      	beq.n	8005ce2 <UART_SetConfig+0x1262>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	2b0a      	cmp	r3, #10
 8005cca:	d008      	beq.n	8005cde <UART_SetConfig+0x125e>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	2b0b      	cmp	r3, #11
 8005cd2:	d102      	bne.n	8005cda <UART_SetConfig+0x125a>
 8005cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cd8:	e016      	b.n	8005d08 <UART_SetConfig+0x1288>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e014      	b.n	8005d08 <UART_SetConfig+0x1288>
 8005cde:	2380      	movs	r3, #128	; 0x80
 8005ce0:	e012      	b.n	8005d08 <UART_SetConfig+0x1288>
 8005ce2:	2340      	movs	r3, #64	; 0x40
 8005ce4:	e010      	b.n	8005d08 <UART_SetConfig+0x1288>
 8005ce6:	2320      	movs	r3, #32
 8005ce8:	e00e      	b.n	8005d08 <UART_SetConfig+0x1288>
 8005cea:	2310      	movs	r3, #16
 8005cec:	e00c      	b.n	8005d08 <UART_SetConfig+0x1288>
 8005cee:	230c      	movs	r3, #12
 8005cf0:	e00a      	b.n	8005d08 <UART_SetConfig+0x1288>
 8005cf2:	230a      	movs	r3, #10
 8005cf4:	e008      	b.n	8005d08 <UART_SetConfig+0x1288>
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	e006      	b.n	8005d08 <UART_SetConfig+0x1288>
 8005cfa:	2306      	movs	r3, #6
 8005cfc:	e004      	b.n	8005d08 <UART_SetConfig+0x1288>
 8005cfe:	2304      	movs	r3, #4
 8005d00:	e002      	b.n	8005d08 <UART_SetConfig+0x1288>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e000      	b.n	8005d08 <UART_SetConfig+0x1288>
 8005d06:	2301      	movs	r3, #1
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	085b      	lsrs	r3, r3, #1
 8005d14:	441a      	add	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d22:	e062      	b.n	8005dea <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d04e      	beq.n	8005dca <UART_SetConfig+0x134a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d047      	beq.n	8005dc4 <UART_SetConfig+0x1344>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d040      	beq.n	8005dbe <UART_SetConfig+0x133e>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d039      	beq.n	8005db8 <UART_SetConfig+0x1338>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d032      	beq.n	8005db2 <UART_SetConfig+0x1332>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	2b05      	cmp	r3, #5
 8005d52:	d02b      	beq.n	8005dac <UART_SetConfig+0x132c>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2b06      	cmp	r3, #6
 8005d5a:	d024      	beq.n	8005da6 <UART_SetConfig+0x1326>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	2b07      	cmp	r3, #7
 8005d62:	d01d      	beq.n	8005da0 <UART_SetConfig+0x1320>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d016      	beq.n	8005d9a <UART_SetConfig+0x131a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	2b09      	cmp	r3, #9
 8005d72:	d00f      	beq.n	8005d94 <UART_SetConfig+0x1314>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	2b0a      	cmp	r3, #10
 8005d7a:	d008      	beq.n	8005d8e <UART_SetConfig+0x130e>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2b0b      	cmp	r3, #11
 8005d82:	d101      	bne.n	8005d88 <UART_SetConfig+0x1308>
 8005d84:	2380      	movs	r3, #128	; 0x80
 8005d86:	e022      	b.n	8005dce <UART_SetConfig+0x134e>
 8005d88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d8c:	e01f      	b.n	8005dce <UART_SetConfig+0x134e>
 8005d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d92:	e01c      	b.n	8005dce <UART_SetConfig+0x134e>
 8005d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d98:	e019      	b.n	8005dce <UART_SetConfig+0x134e>
 8005d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d9e:	e016      	b.n	8005dce <UART_SetConfig+0x134e>
 8005da0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005da4:	e013      	b.n	8005dce <UART_SetConfig+0x134e>
 8005da6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005daa:	e010      	b.n	8005dce <UART_SetConfig+0x134e>
 8005dac:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005db0:	e00d      	b.n	8005dce <UART_SetConfig+0x134e>
 8005db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005db6:	e00a      	b.n	8005dce <UART_SetConfig+0x134e>
 8005db8:	f241 5355 	movw	r3, #5461	; 0x1555
 8005dbc:	e007      	b.n	8005dce <UART_SetConfig+0x134e>
 8005dbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005dc2:	e004      	b.n	8005dce <UART_SetConfig+0x134e>
 8005dc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005dc8:	e001      	b.n	8005dce <UART_SetConfig+0x134e>
 8005dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6852      	ldr	r2, [r2, #4]
 8005dd2:	0852      	lsrs	r2, r2, #1
 8005dd4:	441a      	add	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005de2:	e002      	b.n	8005dea <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	76fb      	strb	r3, [r7, #27]
        break;
 8005de8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	2b0f      	cmp	r3, #15
 8005dee:	d908      	bls.n	8005e02 <UART_SetConfig+0x1382>
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df6:	d204      	bcs.n	8005e02 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	60da      	str	r2, [r3, #12]
 8005e00:	e001      	b.n	8005e06 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	76fb      	strb	r3, [r7, #27]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005e22:	7efb      	ldrb	r3, [r7, #27]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3728      	adds	r7, #40	; 0x28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005e2e:	bf00      	nop
 8005e30:	00f42400 	.word	0x00f42400
 8005e34:	0001e848 	.word	0x0001e848
 8005e38:	0003d090 	.word	0x0003d090
 8005e3c:	0007a120 	.word	0x0007a120
 8005e40:	000f4240 	.word	0x000f4240
 8005e44:	00145855 	.word	0x00145855
 8005e48:	00186a00 	.word	0x00186a00
 8005e4c:	001e8480 	.word	0x001e8480
 8005e50:	0028b0aa 	.word	0x0028b0aa
 8005e54:	003d0900 	.word	0x003d0900
 8005e58:	007a1200 	.word	0x007a1200

08005e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00a      	beq.n	8005e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	f003 0310 	and.w	r3, r3, #16
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01a      	beq.n	8005f72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f5a:	d10a      	bne.n	8005f72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	605a      	str	r2, [r3, #4]
  }
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005fb0:	f7fb fe20 	bl	8001bf4 <HAL_GetTick>
 8005fb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d10e      	bne.n	8005fe2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f82c 	bl	8006030 <UART_WaitOnFlagUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e022      	b.n	8006028 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d10e      	bne.n	800600e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f816 	bl	8006030 <UART_WaitOnFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e00c      	b.n	8006028 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2220      	movs	r2, #32
 800601a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	4613      	mov	r3, r2
 800603e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006040:	e062      	b.n	8006108 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d05e      	beq.n	8006108 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604a:	f7fb fdd3 	bl	8001bf4 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	429a      	cmp	r2, r3
 8006058:	d302      	bcc.n	8006060 <UART_WaitOnFlagUntilTimeout+0x30>
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d11d      	bne.n	800609c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800606e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2220      	movs	r2, #32
 8006084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2220      	movs	r2, #32
 800608c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e045      	b.n	8006128 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d02e      	beq.n	8006108 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b8:	d126      	bne.n	8006108 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060c2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060d2:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0201 	bic.w	r2, r2, #1
 80060e2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e00f      	b.n	8006128 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	69da      	ldr	r2, [r3, #28]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	4013      	ands	r3, r2
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	429a      	cmp	r2, r3
 8006116:	bf0c      	ite	eq
 8006118:	2301      	moveq	r3, #1
 800611a:	2300      	movne	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	461a      	mov	r2, r3
 8006120:	79fb      	ldrb	r3, [r7, #7]
 8006122:	429a      	cmp	r2, r3
 8006124:	d08d      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_UARTEx_DisableFifoMode+0x16>
 8006142:	2302      	movs	r3, #2
 8006144:	e027      	b.n	8006196 <HAL_UARTEx_DisableFifoMode+0x66>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2224      	movs	r2, #36	; 0x24
 8006152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0201 	bic.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006174:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e02d      	b.n	8006216 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2224      	movs	r2, #36	; 0x24
 80061c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0201 	bic.w	r2, r2, #1
 80061e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f850 	bl	800629c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006232:	2302      	movs	r3, #2
 8006234:	e02d      	b.n	8006292 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2224      	movs	r2, #36	; 0x24
 8006242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f812 	bl	800629c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800629c:	b480      	push	{r7}
 800629e:	b089      	sub	sp, #36	; 0x24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80062a4:	4a2f      	ldr	r2, [pc, #188]	; (8006364 <UARTEx_SetNbDataToProcess+0xc8>)
 80062a6:	f107 0314 	add.w	r3, r7, #20
 80062aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062ae:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80062b2:	4a2d      	ldr	r2, [pc, #180]	; (8006368 <UARTEx_SetNbDataToProcess+0xcc>)
 80062b4:	f107 030c 	add.w	r3, r7, #12
 80062b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062bc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d108      	bne.n	80062da <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062d8:	e03d      	b.n	8006356 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062da:	2308      	movs	r3, #8
 80062dc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062de:	2308      	movs	r3, #8
 80062e0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	0e5b      	lsrs	r3, r3, #25
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	0f5b      	lsrs	r3, r3, #29
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006302:	7fbb      	ldrb	r3, [r7, #30]
 8006304:	7f3a      	ldrb	r2, [r7, #28]
 8006306:	f107 0120 	add.w	r1, r7, #32
 800630a:	440a      	add	r2, r1
 800630c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006310:	fb02 f303 	mul.w	r3, r2, r3
 8006314:	7f3a      	ldrb	r2, [r7, #28]
 8006316:	f107 0120 	add.w	r1, r7, #32
 800631a:	440a      	add	r2, r1
 800631c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006320:	fb93 f3f2 	sdiv	r3, r3, r2
 8006324:	b29a      	uxth	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800632c:	7ffb      	ldrb	r3, [r7, #31]
 800632e:	7f7a      	ldrb	r2, [r7, #29]
 8006330:	f107 0120 	add.w	r1, r7, #32
 8006334:	440a      	add	r2, r1
 8006336:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800633a:	fb02 f303 	mul.w	r3, r2, r3
 800633e:	7f7a      	ldrb	r2, [r7, #29]
 8006340:	f107 0120 	add.w	r1, r7, #32
 8006344:	440a      	add	r2, r1
 8006346:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800634a:	fb93 f3f2 	sdiv	r3, r3, r2
 800634e:	b29a      	uxth	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006356:	bf00      	nop
 8006358:	3724      	adds	r7, #36	; 0x24
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	08007144 	.word	0x08007144
 8006368:	0800714c 	.word	0x0800714c

0800636c <__errno>:
 800636c:	4b01      	ldr	r3, [pc, #4]	; (8006374 <__errno+0x8>)
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	2000000c 	.word	0x2000000c

08006378 <__libc_init_array>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	4e0d      	ldr	r6, [pc, #52]	; (80063b0 <__libc_init_array+0x38>)
 800637c:	4c0d      	ldr	r4, [pc, #52]	; (80063b4 <__libc_init_array+0x3c>)
 800637e:	1ba4      	subs	r4, r4, r6
 8006380:	10a4      	asrs	r4, r4, #2
 8006382:	2500      	movs	r5, #0
 8006384:	42a5      	cmp	r5, r4
 8006386:	d109      	bne.n	800639c <__libc_init_array+0x24>
 8006388:	4e0b      	ldr	r6, [pc, #44]	; (80063b8 <__libc_init_array+0x40>)
 800638a:	4c0c      	ldr	r4, [pc, #48]	; (80063bc <__libc_init_array+0x44>)
 800638c:	f000 fc28 	bl	8006be0 <_init>
 8006390:	1ba4      	subs	r4, r4, r6
 8006392:	10a4      	asrs	r4, r4, #2
 8006394:	2500      	movs	r5, #0
 8006396:	42a5      	cmp	r5, r4
 8006398:	d105      	bne.n	80063a6 <__libc_init_array+0x2e>
 800639a:	bd70      	pop	{r4, r5, r6, pc}
 800639c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063a0:	4798      	blx	r3
 80063a2:	3501      	adds	r5, #1
 80063a4:	e7ee      	b.n	8006384 <__libc_init_array+0xc>
 80063a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063aa:	4798      	blx	r3
 80063ac:	3501      	adds	r5, #1
 80063ae:	e7f2      	b.n	8006396 <__libc_init_array+0x1e>
 80063b0:	080071d8 	.word	0x080071d8
 80063b4:	080071d8 	.word	0x080071d8
 80063b8:	080071d8 	.word	0x080071d8
 80063bc:	080071dc 	.word	0x080071dc

080063c0 <memcpy>:
 80063c0:	b510      	push	{r4, lr}
 80063c2:	1e43      	subs	r3, r0, #1
 80063c4:	440a      	add	r2, r1
 80063c6:	4291      	cmp	r1, r2
 80063c8:	d100      	bne.n	80063cc <memcpy+0xc>
 80063ca:	bd10      	pop	{r4, pc}
 80063cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063d4:	e7f7      	b.n	80063c6 <memcpy+0x6>

080063d6 <memset>:
 80063d6:	4402      	add	r2, r0
 80063d8:	4603      	mov	r3, r0
 80063da:	4293      	cmp	r3, r2
 80063dc:	d100      	bne.n	80063e0 <memset+0xa>
 80063de:	4770      	bx	lr
 80063e0:	f803 1b01 	strb.w	r1, [r3], #1
 80063e4:	e7f9      	b.n	80063da <memset+0x4>
	...

080063e8 <siprintf>:
 80063e8:	b40e      	push	{r1, r2, r3}
 80063ea:	b500      	push	{lr}
 80063ec:	b09c      	sub	sp, #112	; 0x70
 80063ee:	ab1d      	add	r3, sp, #116	; 0x74
 80063f0:	9002      	str	r0, [sp, #8]
 80063f2:	9006      	str	r0, [sp, #24]
 80063f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063f8:	4809      	ldr	r0, [pc, #36]	; (8006420 <siprintf+0x38>)
 80063fa:	9107      	str	r1, [sp, #28]
 80063fc:	9104      	str	r1, [sp, #16]
 80063fe:	4909      	ldr	r1, [pc, #36]	; (8006424 <siprintf+0x3c>)
 8006400:	f853 2b04 	ldr.w	r2, [r3], #4
 8006404:	9105      	str	r1, [sp, #20]
 8006406:	6800      	ldr	r0, [r0, #0]
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	a902      	add	r1, sp, #8
 800640c:	f000 f866 	bl	80064dc <_svfiprintf_r>
 8006410:	9b02      	ldr	r3, [sp, #8]
 8006412:	2200      	movs	r2, #0
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	b01c      	add	sp, #112	; 0x70
 8006418:	f85d eb04 	ldr.w	lr, [sp], #4
 800641c:	b003      	add	sp, #12
 800641e:	4770      	bx	lr
 8006420:	2000000c 	.word	0x2000000c
 8006424:	ffff0208 	.word	0xffff0208

08006428 <__ssputs_r>:
 8006428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800642c:	688e      	ldr	r6, [r1, #8]
 800642e:	429e      	cmp	r6, r3
 8006430:	4682      	mov	sl, r0
 8006432:	460c      	mov	r4, r1
 8006434:	4690      	mov	r8, r2
 8006436:	4699      	mov	r9, r3
 8006438:	d837      	bhi.n	80064aa <__ssputs_r+0x82>
 800643a:	898a      	ldrh	r2, [r1, #12]
 800643c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006440:	d031      	beq.n	80064a6 <__ssputs_r+0x7e>
 8006442:	6825      	ldr	r5, [r4, #0]
 8006444:	6909      	ldr	r1, [r1, #16]
 8006446:	1a6f      	subs	r7, r5, r1
 8006448:	6965      	ldr	r5, [r4, #20]
 800644a:	2302      	movs	r3, #2
 800644c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006450:	fb95 f5f3 	sdiv	r5, r5, r3
 8006454:	f109 0301 	add.w	r3, r9, #1
 8006458:	443b      	add	r3, r7
 800645a:	429d      	cmp	r5, r3
 800645c:	bf38      	it	cc
 800645e:	461d      	movcc	r5, r3
 8006460:	0553      	lsls	r3, r2, #21
 8006462:	d530      	bpl.n	80064c6 <__ssputs_r+0x9e>
 8006464:	4629      	mov	r1, r5
 8006466:	f000 fb21 	bl	8006aac <_malloc_r>
 800646a:	4606      	mov	r6, r0
 800646c:	b950      	cbnz	r0, 8006484 <__ssputs_r+0x5c>
 800646e:	230c      	movs	r3, #12
 8006470:	f8ca 3000 	str.w	r3, [sl]
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800647a:	81a3      	strh	r3, [r4, #12]
 800647c:	f04f 30ff 	mov.w	r0, #4294967295
 8006480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006484:	463a      	mov	r2, r7
 8006486:	6921      	ldr	r1, [r4, #16]
 8006488:	f7ff ff9a 	bl	80063c0 <memcpy>
 800648c:	89a3      	ldrh	r3, [r4, #12]
 800648e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006496:	81a3      	strh	r3, [r4, #12]
 8006498:	6126      	str	r6, [r4, #16]
 800649a:	6165      	str	r5, [r4, #20]
 800649c:	443e      	add	r6, r7
 800649e:	1bed      	subs	r5, r5, r7
 80064a0:	6026      	str	r6, [r4, #0]
 80064a2:	60a5      	str	r5, [r4, #8]
 80064a4:	464e      	mov	r6, r9
 80064a6:	454e      	cmp	r6, r9
 80064a8:	d900      	bls.n	80064ac <__ssputs_r+0x84>
 80064aa:	464e      	mov	r6, r9
 80064ac:	4632      	mov	r2, r6
 80064ae:	4641      	mov	r1, r8
 80064b0:	6820      	ldr	r0, [r4, #0]
 80064b2:	f000 fa93 	bl	80069dc <memmove>
 80064b6:	68a3      	ldr	r3, [r4, #8]
 80064b8:	1b9b      	subs	r3, r3, r6
 80064ba:	60a3      	str	r3, [r4, #8]
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	441e      	add	r6, r3
 80064c0:	6026      	str	r6, [r4, #0]
 80064c2:	2000      	movs	r0, #0
 80064c4:	e7dc      	b.n	8006480 <__ssputs_r+0x58>
 80064c6:	462a      	mov	r2, r5
 80064c8:	f000 fb4a 	bl	8006b60 <_realloc_r>
 80064cc:	4606      	mov	r6, r0
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d1e2      	bne.n	8006498 <__ssputs_r+0x70>
 80064d2:	6921      	ldr	r1, [r4, #16]
 80064d4:	4650      	mov	r0, sl
 80064d6:	f000 fa9b 	bl	8006a10 <_free_r>
 80064da:	e7c8      	b.n	800646e <__ssputs_r+0x46>

080064dc <_svfiprintf_r>:
 80064dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e0:	461d      	mov	r5, r3
 80064e2:	898b      	ldrh	r3, [r1, #12]
 80064e4:	061f      	lsls	r7, r3, #24
 80064e6:	b09d      	sub	sp, #116	; 0x74
 80064e8:	4680      	mov	r8, r0
 80064ea:	460c      	mov	r4, r1
 80064ec:	4616      	mov	r6, r2
 80064ee:	d50f      	bpl.n	8006510 <_svfiprintf_r+0x34>
 80064f0:	690b      	ldr	r3, [r1, #16]
 80064f2:	b96b      	cbnz	r3, 8006510 <_svfiprintf_r+0x34>
 80064f4:	2140      	movs	r1, #64	; 0x40
 80064f6:	f000 fad9 	bl	8006aac <_malloc_r>
 80064fa:	6020      	str	r0, [r4, #0]
 80064fc:	6120      	str	r0, [r4, #16]
 80064fe:	b928      	cbnz	r0, 800650c <_svfiprintf_r+0x30>
 8006500:	230c      	movs	r3, #12
 8006502:	f8c8 3000 	str.w	r3, [r8]
 8006506:	f04f 30ff 	mov.w	r0, #4294967295
 800650a:	e0c8      	b.n	800669e <_svfiprintf_r+0x1c2>
 800650c:	2340      	movs	r3, #64	; 0x40
 800650e:	6163      	str	r3, [r4, #20]
 8006510:	2300      	movs	r3, #0
 8006512:	9309      	str	r3, [sp, #36]	; 0x24
 8006514:	2320      	movs	r3, #32
 8006516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800651a:	2330      	movs	r3, #48	; 0x30
 800651c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006520:	9503      	str	r5, [sp, #12]
 8006522:	f04f 0b01 	mov.w	fp, #1
 8006526:	4637      	mov	r7, r6
 8006528:	463d      	mov	r5, r7
 800652a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800652e:	b10b      	cbz	r3, 8006534 <_svfiprintf_r+0x58>
 8006530:	2b25      	cmp	r3, #37	; 0x25
 8006532:	d13e      	bne.n	80065b2 <_svfiprintf_r+0xd6>
 8006534:	ebb7 0a06 	subs.w	sl, r7, r6
 8006538:	d00b      	beq.n	8006552 <_svfiprintf_r+0x76>
 800653a:	4653      	mov	r3, sl
 800653c:	4632      	mov	r2, r6
 800653e:	4621      	mov	r1, r4
 8006540:	4640      	mov	r0, r8
 8006542:	f7ff ff71 	bl	8006428 <__ssputs_r>
 8006546:	3001      	adds	r0, #1
 8006548:	f000 80a4 	beq.w	8006694 <_svfiprintf_r+0x1b8>
 800654c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654e:	4453      	add	r3, sl
 8006550:	9309      	str	r3, [sp, #36]	; 0x24
 8006552:	783b      	ldrb	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 809d 	beq.w	8006694 <_svfiprintf_r+0x1b8>
 800655a:	2300      	movs	r3, #0
 800655c:	f04f 32ff 	mov.w	r2, #4294967295
 8006560:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006564:	9304      	str	r3, [sp, #16]
 8006566:	9307      	str	r3, [sp, #28]
 8006568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800656c:	931a      	str	r3, [sp, #104]	; 0x68
 800656e:	462f      	mov	r7, r5
 8006570:	2205      	movs	r2, #5
 8006572:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006576:	4850      	ldr	r0, [pc, #320]	; (80066b8 <_svfiprintf_r+0x1dc>)
 8006578:	f7f9 fe4a 	bl	8000210 <memchr>
 800657c:	9b04      	ldr	r3, [sp, #16]
 800657e:	b9d0      	cbnz	r0, 80065b6 <_svfiprintf_r+0xda>
 8006580:	06d9      	lsls	r1, r3, #27
 8006582:	bf44      	itt	mi
 8006584:	2220      	movmi	r2, #32
 8006586:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800658a:	071a      	lsls	r2, r3, #28
 800658c:	bf44      	itt	mi
 800658e:	222b      	movmi	r2, #43	; 0x2b
 8006590:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006594:	782a      	ldrb	r2, [r5, #0]
 8006596:	2a2a      	cmp	r2, #42	; 0x2a
 8006598:	d015      	beq.n	80065c6 <_svfiprintf_r+0xea>
 800659a:	9a07      	ldr	r2, [sp, #28]
 800659c:	462f      	mov	r7, r5
 800659e:	2000      	movs	r0, #0
 80065a0:	250a      	movs	r5, #10
 80065a2:	4639      	mov	r1, r7
 80065a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065a8:	3b30      	subs	r3, #48	; 0x30
 80065aa:	2b09      	cmp	r3, #9
 80065ac:	d94d      	bls.n	800664a <_svfiprintf_r+0x16e>
 80065ae:	b1b8      	cbz	r0, 80065e0 <_svfiprintf_r+0x104>
 80065b0:	e00f      	b.n	80065d2 <_svfiprintf_r+0xf6>
 80065b2:	462f      	mov	r7, r5
 80065b4:	e7b8      	b.n	8006528 <_svfiprintf_r+0x4c>
 80065b6:	4a40      	ldr	r2, [pc, #256]	; (80066b8 <_svfiprintf_r+0x1dc>)
 80065b8:	1a80      	subs	r0, r0, r2
 80065ba:	fa0b f000 	lsl.w	r0, fp, r0
 80065be:	4318      	orrs	r0, r3
 80065c0:	9004      	str	r0, [sp, #16]
 80065c2:	463d      	mov	r5, r7
 80065c4:	e7d3      	b.n	800656e <_svfiprintf_r+0x92>
 80065c6:	9a03      	ldr	r2, [sp, #12]
 80065c8:	1d11      	adds	r1, r2, #4
 80065ca:	6812      	ldr	r2, [r2, #0]
 80065cc:	9103      	str	r1, [sp, #12]
 80065ce:	2a00      	cmp	r2, #0
 80065d0:	db01      	blt.n	80065d6 <_svfiprintf_r+0xfa>
 80065d2:	9207      	str	r2, [sp, #28]
 80065d4:	e004      	b.n	80065e0 <_svfiprintf_r+0x104>
 80065d6:	4252      	negs	r2, r2
 80065d8:	f043 0302 	orr.w	r3, r3, #2
 80065dc:	9207      	str	r2, [sp, #28]
 80065de:	9304      	str	r3, [sp, #16]
 80065e0:	783b      	ldrb	r3, [r7, #0]
 80065e2:	2b2e      	cmp	r3, #46	; 0x2e
 80065e4:	d10c      	bne.n	8006600 <_svfiprintf_r+0x124>
 80065e6:	787b      	ldrb	r3, [r7, #1]
 80065e8:	2b2a      	cmp	r3, #42	; 0x2a
 80065ea:	d133      	bne.n	8006654 <_svfiprintf_r+0x178>
 80065ec:	9b03      	ldr	r3, [sp, #12]
 80065ee:	1d1a      	adds	r2, r3, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	9203      	str	r2, [sp, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	bfb8      	it	lt
 80065f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80065fc:	3702      	adds	r7, #2
 80065fe:	9305      	str	r3, [sp, #20]
 8006600:	4d2e      	ldr	r5, [pc, #184]	; (80066bc <_svfiprintf_r+0x1e0>)
 8006602:	7839      	ldrb	r1, [r7, #0]
 8006604:	2203      	movs	r2, #3
 8006606:	4628      	mov	r0, r5
 8006608:	f7f9 fe02 	bl	8000210 <memchr>
 800660c:	b138      	cbz	r0, 800661e <_svfiprintf_r+0x142>
 800660e:	2340      	movs	r3, #64	; 0x40
 8006610:	1b40      	subs	r0, r0, r5
 8006612:	fa03 f000 	lsl.w	r0, r3, r0
 8006616:	9b04      	ldr	r3, [sp, #16]
 8006618:	4303      	orrs	r3, r0
 800661a:	3701      	adds	r7, #1
 800661c:	9304      	str	r3, [sp, #16]
 800661e:	7839      	ldrb	r1, [r7, #0]
 8006620:	4827      	ldr	r0, [pc, #156]	; (80066c0 <_svfiprintf_r+0x1e4>)
 8006622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006626:	2206      	movs	r2, #6
 8006628:	1c7e      	adds	r6, r7, #1
 800662a:	f7f9 fdf1 	bl	8000210 <memchr>
 800662e:	2800      	cmp	r0, #0
 8006630:	d038      	beq.n	80066a4 <_svfiprintf_r+0x1c8>
 8006632:	4b24      	ldr	r3, [pc, #144]	; (80066c4 <_svfiprintf_r+0x1e8>)
 8006634:	bb13      	cbnz	r3, 800667c <_svfiprintf_r+0x1a0>
 8006636:	9b03      	ldr	r3, [sp, #12]
 8006638:	3307      	adds	r3, #7
 800663a:	f023 0307 	bic.w	r3, r3, #7
 800663e:	3308      	adds	r3, #8
 8006640:	9303      	str	r3, [sp, #12]
 8006642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006644:	444b      	add	r3, r9
 8006646:	9309      	str	r3, [sp, #36]	; 0x24
 8006648:	e76d      	b.n	8006526 <_svfiprintf_r+0x4a>
 800664a:	fb05 3202 	mla	r2, r5, r2, r3
 800664e:	2001      	movs	r0, #1
 8006650:	460f      	mov	r7, r1
 8006652:	e7a6      	b.n	80065a2 <_svfiprintf_r+0xc6>
 8006654:	2300      	movs	r3, #0
 8006656:	3701      	adds	r7, #1
 8006658:	9305      	str	r3, [sp, #20]
 800665a:	4619      	mov	r1, r3
 800665c:	250a      	movs	r5, #10
 800665e:	4638      	mov	r0, r7
 8006660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006664:	3a30      	subs	r2, #48	; 0x30
 8006666:	2a09      	cmp	r2, #9
 8006668:	d903      	bls.n	8006672 <_svfiprintf_r+0x196>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0c8      	beq.n	8006600 <_svfiprintf_r+0x124>
 800666e:	9105      	str	r1, [sp, #20]
 8006670:	e7c6      	b.n	8006600 <_svfiprintf_r+0x124>
 8006672:	fb05 2101 	mla	r1, r5, r1, r2
 8006676:	2301      	movs	r3, #1
 8006678:	4607      	mov	r7, r0
 800667a:	e7f0      	b.n	800665e <_svfiprintf_r+0x182>
 800667c:	ab03      	add	r3, sp, #12
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	4622      	mov	r2, r4
 8006682:	4b11      	ldr	r3, [pc, #68]	; (80066c8 <_svfiprintf_r+0x1ec>)
 8006684:	a904      	add	r1, sp, #16
 8006686:	4640      	mov	r0, r8
 8006688:	f3af 8000 	nop.w
 800668c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006690:	4681      	mov	r9, r0
 8006692:	d1d6      	bne.n	8006642 <_svfiprintf_r+0x166>
 8006694:	89a3      	ldrh	r3, [r4, #12]
 8006696:	065b      	lsls	r3, r3, #25
 8006698:	f53f af35 	bmi.w	8006506 <_svfiprintf_r+0x2a>
 800669c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800669e:	b01d      	add	sp, #116	; 0x74
 80066a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a4:	ab03      	add	r3, sp, #12
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	4622      	mov	r2, r4
 80066aa:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <_svfiprintf_r+0x1ec>)
 80066ac:	a904      	add	r1, sp, #16
 80066ae:	4640      	mov	r0, r8
 80066b0:	f000 f882 	bl	80067b8 <_printf_i>
 80066b4:	e7ea      	b.n	800668c <_svfiprintf_r+0x1b0>
 80066b6:	bf00      	nop
 80066b8:	0800719c 	.word	0x0800719c
 80066bc:	080071a2 	.word	0x080071a2
 80066c0:	080071a6 	.word	0x080071a6
 80066c4:	00000000 	.word	0x00000000
 80066c8:	08006429 	.word	0x08006429

080066cc <_printf_common>:
 80066cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d0:	4691      	mov	r9, r2
 80066d2:	461f      	mov	r7, r3
 80066d4:	688a      	ldr	r2, [r1, #8]
 80066d6:	690b      	ldr	r3, [r1, #16]
 80066d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066dc:	4293      	cmp	r3, r2
 80066de:	bfb8      	it	lt
 80066e0:	4613      	movlt	r3, r2
 80066e2:	f8c9 3000 	str.w	r3, [r9]
 80066e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066ea:	4606      	mov	r6, r0
 80066ec:	460c      	mov	r4, r1
 80066ee:	b112      	cbz	r2, 80066f6 <_printf_common+0x2a>
 80066f0:	3301      	adds	r3, #1
 80066f2:	f8c9 3000 	str.w	r3, [r9]
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	0699      	lsls	r1, r3, #26
 80066fa:	bf42      	ittt	mi
 80066fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006700:	3302      	addmi	r3, #2
 8006702:	f8c9 3000 	strmi.w	r3, [r9]
 8006706:	6825      	ldr	r5, [r4, #0]
 8006708:	f015 0506 	ands.w	r5, r5, #6
 800670c:	d107      	bne.n	800671e <_printf_common+0x52>
 800670e:	f104 0a19 	add.w	sl, r4, #25
 8006712:	68e3      	ldr	r3, [r4, #12]
 8006714:	f8d9 2000 	ldr.w	r2, [r9]
 8006718:	1a9b      	subs	r3, r3, r2
 800671a:	42ab      	cmp	r3, r5
 800671c:	dc28      	bgt.n	8006770 <_printf_common+0xa4>
 800671e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006722:	6822      	ldr	r2, [r4, #0]
 8006724:	3300      	adds	r3, #0
 8006726:	bf18      	it	ne
 8006728:	2301      	movne	r3, #1
 800672a:	0692      	lsls	r2, r2, #26
 800672c:	d42d      	bmi.n	800678a <_printf_common+0xbe>
 800672e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006732:	4639      	mov	r1, r7
 8006734:	4630      	mov	r0, r6
 8006736:	47c0      	blx	r8
 8006738:	3001      	adds	r0, #1
 800673a:	d020      	beq.n	800677e <_printf_common+0xb2>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	68e5      	ldr	r5, [r4, #12]
 8006740:	f8d9 2000 	ldr.w	r2, [r9]
 8006744:	f003 0306 	and.w	r3, r3, #6
 8006748:	2b04      	cmp	r3, #4
 800674a:	bf08      	it	eq
 800674c:	1aad      	subeq	r5, r5, r2
 800674e:	68a3      	ldr	r3, [r4, #8]
 8006750:	6922      	ldr	r2, [r4, #16]
 8006752:	bf0c      	ite	eq
 8006754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006758:	2500      	movne	r5, #0
 800675a:	4293      	cmp	r3, r2
 800675c:	bfc4      	itt	gt
 800675e:	1a9b      	subgt	r3, r3, r2
 8006760:	18ed      	addgt	r5, r5, r3
 8006762:	f04f 0900 	mov.w	r9, #0
 8006766:	341a      	adds	r4, #26
 8006768:	454d      	cmp	r5, r9
 800676a:	d11a      	bne.n	80067a2 <_printf_common+0xd6>
 800676c:	2000      	movs	r0, #0
 800676e:	e008      	b.n	8006782 <_printf_common+0xb6>
 8006770:	2301      	movs	r3, #1
 8006772:	4652      	mov	r2, sl
 8006774:	4639      	mov	r1, r7
 8006776:	4630      	mov	r0, r6
 8006778:	47c0      	blx	r8
 800677a:	3001      	adds	r0, #1
 800677c:	d103      	bne.n	8006786 <_printf_common+0xba>
 800677e:	f04f 30ff 	mov.w	r0, #4294967295
 8006782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006786:	3501      	adds	r5, #1
 8006788:	e7c3      	b.n	8006712 <_printf_common+0x46>
 800678a:	18e1      	adds	r1, r4, r3
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	2030      	movs	r0, #48	; 0x30
 8006790:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006794:	4422      	add	r2, r4
 8006796:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800679a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800679e:	3302      	adds	r3, #2
 80067a0:	e7c5      	b.n	800672e <_printf_common+0x62>
 80067a2:	2301      	movs	r3, #1
 80067a4:	4622      	mov	r2, r4
 80067a6:	4639      	mov	r1, r7
 80067a8:	4630      	mov	r0, r6
 80067aa:	47c0      	blx	r8
 80067ac:	3001      	adds	r0, #1
 80067ae:	d0e6      	beq.n	800677e <_printf_common+0xb2>
 80067b0:	f109 0901 	add.w	r9, r9, #1
 80067b4:	e7d8      	b.n	8006768 <_printf_common+0x9c>
	...

080067b8 <_printf_i>:
 80067b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80067c0:	460c      	mov	r4, r1
 80067c2:	7e09      	ldrb	r1, [r1, #24]
 80067c4:	b085      	sub	sp, #20
 80067c6:	296e      	cmp	r1, #110	; 0x6e
 80067c8:	4617      	mov	r7, r2
 80067ca:	4606      	mov	r6, r0
 80067cc:	4698      	mov	r8, r3
 80067ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067d0:	f000 80b3 	beq.w	800693a <_printf_i+0x182>
 80067d4:	d822      	bhi.n	800681c <_printf_i+0x64>
 80067d6:	2963      	cmp	r1, #99	; 0x63
 80067d8:	d036      	beq.n	8006848 <_printf_i+0x90>
 80067da:	d80a      	bhi.n	80067f2 <_printf_i+0x3a>
 80067dc:	2900      	cmp	r1, #0
 80067de:	f000 80b9 	beq.w	8006954 <_printf_i+0x19c>
 80067e2:	2958      	cmp	r1, #88	; 0x58
 80067e4:	f000 8083 	beq.w	80068ee <_printf_i+0x136>
 80067e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067f0:	e032      	b.n	8006858 <_printf_i+0xa0>
 80067f2:	2964      	cmp	r1, #100	; 0x64
 80067f4:	d001      	beq.n	80067fa <_printf_i+0x42>
 80067f6:	2969      	cmp	r1, #105	; 0x69
 80067f8:	d1f6      	bne.n	80067e8 <_printf_i+0x30>
 80067fa:	6820      	ldr	r0, [r4, #0]
 80067fc:	6813      	ldr	r3, [r2, #0]
 80067fe:	0605      	lsls	r5, r0, #24
 8006800:	f103 0104 	add.w	r1, r3, #4
 8006804:	d52a      	bpl.n	800685c <_printf_i+0xa4>
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6011      	str	r1, [r2, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	da03      	bge.n	8006816 <_printf_i+0x5e>
 800680e:	222d      	movs	r2, #45	; 0x2d
 8006810:	425b      	negs	r3, r3
 8006812:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006816:	486f      	ldr	r0, [pc, #444]	; (80069d4 <_printf_i+0x21c>)
 8006818:	220a      	movs	r2, #10
 800681a:	e039      	b.n	8006890 <_printf_i+0xd8>
 800681c:	2973      	cmp	r1, #115	; 0x73
 800681e:	f000 809d 	beq.w	800695c <_printf_i+0x1a4>
 8006822:	d808      	bhi.n	8006836 <_printf_i+0x7e>
 8006824:	296f      	cmp	r1, #111	; 0x6f
 8006826:	d020      	beq.n	800686a <_printf_i+0xb2>
 8006828:	2970      	cmp	r1, #112	; 0x70
 800682a:	d1dd      	bne.n	80067e8 <_printf_i+0x30>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	f043 0320 	orr.w	r3, r3, #32
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	e003      	b.n	800683e <_printf_i+0x86>
 8006836:	2975      	cmp	r1, #117	; 0x75
 8006838:	d017      	beq.n	800686a <_printf_i+0xb2>
 800683a:	2978      	cmp	r1, #120	; 0x78
 800683c:	d1d4      	bne.n	80067e8 <_printf_i+0x30>
 800683e:	2378      	movs	r3, #120	; 0x78
 8006840:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006844:	4864      	ldr	r0, [pc, #400]	; (80069d8 <_printf_i+0x220>)
 8006846:	e055      	b.n	80068f4 <_printf_i+0x13c>
 8006848:	6813      	ldr	r3, [r2, #0]
 800684a:	1d19      	adds	r1, r3, #4
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6011      	str	r1, [r2, #0]
 8006850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006858:	2301      	movs	r3, #1
 800685a:	e08c      	b.n	8006976 <_printf_i+0x1be>
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6011      	str	r1, [r2, #0]
 8006860:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006864:	bf18      	it	ne
 8006866:	b21b      	sxthne	r3, r3
 8006868:	e7cf      	b.n	800680a <_printf_i+0x52>
 800686a:	6813      	ldr	r3, [r2, #0]
 800686c:	6825      	ldr	r5, [r4, #0]
 800686e:	1d18      	adds	r0, r3, #4
 8006870:	6010      	str	r0, [r2, #0]
 8006872:	0628      	lsls	r0, r5, #24
 8006874:	d501      	bpl.n	800687a <_printf_i+0xc2>
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	e002      	b.n	8006880 <_printf_i+0xc8>
 800687a:	0668      	lsls	r0, r5, #25
 800687c:	d5fb      	bpl.n	8006876 <_printf_i+0xbe>
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	4854      	ldr	r0, [pc, #336]	; (80069d4 <_printf_i+0x21c>)
 8006882:	296f      	cmp	r1, #111	; 0x6f
 8006884:	bf14      	ite	ne
 8006886:	220a      	movne	r2, #10
 8006888:	2208      	moveq	r2, #8
 800688a:	2100      	movs	r1, #0
 800688c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006890:	6865      	ldr	r5, [r4, #4]
 8006892:	60a5      	str	r5, [r4, #8]
 8006894:	2d00      	cmp	r5, #0
 8006896:	f2c0 8095 	blt.w	80069c4 <_printf_i+0x20c>
 800689a:	6821      	ldr	r1, [r4, #0]
 800689c:	f021 0104 	bic.w	r1, r1, #4
 80068a0:	6021      	str	r1, [r4, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d13d      	bne.n	8006922 <_printf_i+0x16a>
 80068a6:	2d00      	cmp	r5, #0
 80068a8:	f040 808e 	bne.w	80069c8 <_printf_i+0x210>
 80068ac:	4665      	mov	r5, ip
 80068ae:	2a08      	cmp	r2, #8
 80068b0:	d10b      	bne.n	80068ca <_printf_i+0x112>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	07db      	lsls	r3, r3, #31
 80068b6:	d508      	bpl.n	80068ca <_printf_i+0x112>
 80068b8:	6923      	ldr	r3, [r4, #16]
 80068ba:	6862      	ldr	r2, [r4, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	bfde      	ittt	le
 80068c0:	2330      	movle	r3, #48	; 0x30
 80068c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068ca:	ebac 0305 	sub.w	r3, ip, r5
 80068ce:	6123      	str	r3, [r4, #16]
 80068d0:	f8cd 8000 	str.w	r8, [sp]
 80068d4:	463b      	mov	r3, r7
 80068d6:	aa03      	add	r2, sp, #12
 80068d8:	4621      	mov	r1, r4
 80068da:	4630      	mov	r0, r6
 80068dc:	f7ff fef6 	bl	80066cc <_printf_common>
 80068e0:	3001      	adds	r0, #1
 80068e2:	d14d      	bne.n	8006980 <_printf_i+0x1c8>
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	b005      	add	sp, #20
 80068ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068ee:	4839      	ldr	r0, [pc, #228]	; (80069d4 <_printf_i+0x21c>)
 80068f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068f4:	6813      	ldr	r3, [r2, #0]
 80068f6:	6821      	ldr	r1, [r4, #0]
 80068f8:	1d1d      	adds	r5, r3, #4
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6015      	str	r5, [r2, #0]
 80068fe:	060a      	lsls	r2, r1, #24
 8006900:	d50b      	bpl.n	800691a <_printf_i+0x162>
 8006902:	07ca      	lsls	r2, r1, #31
 8006904:	bf44      	itt	mi
 8006906:	f041 0120 	orrmi.w	r1, r1, #32
 800690a:	6021      	strmi	r1, [r4, #0]
 800690c:	b91b      	cbnz	r3, 8006916 <_printf_i+0x15e>
 800690e:	6822      	ldr	r2, [r4, #0]
 8006910:	f022 0220 	bic.w	r2, r2, #32
 8006914:	6022      	str	r2, [r4, #0]
 8006916:	2210      	movs	r2, #16
 8006918:	e7b7      	b.n	800688a <_printf_i+0xd2>
 800691a:	064d      	lsls	r5, r1, #25
 800691c:	bf48      	it	mi
 800691e:	b29b      	uxthmi	r3, r3
 8006920:	e7ef      	b.n	8006902 <_printf_i+0x14a>
 8006922:	4665      	mov	r5, ip
 8006924:	fbb3 f1f2 	udiv	r1, r3, r2
 8006928:	fb02 3311 	mls	r3, r2, r1, r3
 800692c:	5cc3      	ldrb	r3, [r0, r3]
 800692e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006932:	460b      	mov	r3, r1
 8006934:	2900      	cmp	r1, #0
 8006936:	d1f5      	bne.n	8006924 <_printf_i+0x16c>
 8006938:	e7b9      	b.n	80068ae <_printf_i+0xf6>
 800693a:	6813      	ldr	r3, [r2, #0]
 800693c:	6825      	ldr	r5, [r4, #0]
 800693e:	6961      	ldr	r1, [r4, #20]
 8006940:	1d18      	adds	r0, r3, #4
 8006942:	6010      	str	r0, [r2, #0]
 8006944:	0628      	lsls	r0, r5, #24
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	d501      	bpl.n	800694e <_printf_i+0x196>
 800694a:	6019      	str	r1, [r3, #0]
 800694c:	e002      	b.n	8006954 <_printf_i+0x19c>
 800694e:	066a      	lsls	r2, r5, #25
 8006950:	d5fb      	bpl.n	800694a <_printf_i+0x192>
 8006952:	8019      	strh	r1, [r3, #0]
 8006954:	2300      	movs	r3, #0
 8006956:	6123      	str	r3, [r4, #16]
 8006958:	4665      	mov	r5, ip
 800695a:	e7b9      	b.n	80068d0 <_printf_i+0x118>
 800695c:	6813      	ldr	r3, [r2, #0]
 800695e:	1d19      	adds	r1, r3, #4
 8006960:	6011      	str	r1, [r2, #0]
 8006962:	681d      	ldr	r5, [r3, #0]
 8006964:	6862      	ldr	r2, [r4, #4]
 8006966:	2100      	movs	r1, #0
 8006968:	4628      	mov	r0, r5
 800696a:	f7f9 fc51 	bl	8000210 <memchr>
 800696e:	b108      	cbz	r0, 8006974 <_printf_i+0x1bc>
 8006970:	1b40      	subs	r0, r0, r5
 8006972:	6060      	str	r0, [r4, #4]
 8006974:	6863      	ldr	r3, [r4, #4]
 8006976:	6123      	str	r3, [r4, #16]
 8006978:	2300      	movs	r3, #0
 800697a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800697e:	e7a7      	b.n	80068d0 <_printf_i+0x118>
 8006980:	6923      	ldr	r3, [r4, #16]
 8006982:	462a      	mov	r2, r5
 8006984:	4639      	mov	r1, r7
 8006986:	4630      	mov	r0, r6
 8006988:	47c0      	blx	r8
 800698a:	3001      	adds	r0, #1
 800698c:	d0aa      	beq.n	80068e4 <_printf_i+0x12c>
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	079b      	lsls	r3, r3, #30
 8006992:	d413      	bmi.n	80069bc <_printf_i+0x204>
 8006994:	68e0      	ldr	r0, [r4, #12]
 8006996:	9b03      	ldr	r3, [sp, #12]
 8006998:	4298      	cmp	r0, r3
 800699a:	bfb8      	it	lt
 800699c:	4618      	movlt	r0, r3
 800699e:	e7a3      	b.n	80068e8 <_printf_i+0x130>
 80069a0:	2301      	movs	r3, #1
 80069a2:	464a      	mov	r2, r9
 80069a4:	4639      	mov	r1, r7
 80069a6:	4630      	mov	r0, r6
 80069a8:	47c0      	blx	r8
 80069aa:	3001      	adds	r0, #1
 80069ac:	d09a      	beq.n	80068e4 <_printf_i+0x12c>
 80069ae:	3501      	adds	r5, #1
 80069b0:	68e3      	ldr	r3, [r4, #12]
 80069b2:	9a03      	ldr	r2, [sp, #12]
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	42ab      	cmp	r3, r5
 80069b8:	dcf2      	bgt.n	80069a0 <_printf_i+0x1e8>
 80069ba:	e7eb      	b.n	8006994 <_printf_i+0x1dc>
 80069bc:	2500      	movs	r5, #0
 80069be:	f104 0919 	add.w	r9, r4, #25
 80069c2:	e7f5      	b.n	80069b0 <_printf_i+0x1f8>
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1ac      	bne.n	8006922 <_printf_i+0x16a>
 80069c8:	7803      	ldrb	r3, [r0, #0]
 80069ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069d2:	e76c      	b.n	80068ae <_printf_i+0xf6>
 80069d4:	080071ad 	.word	0x080071ad
 80069d8:	080071be 	.word	0x080071be

080069dc <memmove>:
 80069dc:	4288      	cmp	r0, r1
 80069de:	b510      	push	{r4, lr}
 80069e0:	eb01 0302 	add.w	r3, r1, r2
 80069e4:	d807      	bhi.n	80069f6 <memmove+0x1a>
 80069e6:	1e42      	subs	r2, r0, #1
 80069e8:	4299      	cmp	r1, r3
 80069ea:	d00a      	beq.n	8006a02 <memmove+0x26>
 80069ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069f4:	e7f8      	b.n	80069e8 <memmove+0xc>
 80069f6:	4283      	cmp	r3, r0
 80069f8:	d9f5      	bls.n	80069e6 <memmove+0xa>
 80069fa:	1881      	adds	r1, r0, r2
 80069fc:	1ad2      	subs	r2, r2, r3
 80069fe:	42d3      	cmn	r3, r2
 8006a00:	d100      	bne.n	8006a04 <memmove+0x28>
 8006a02:	bd10      	pop	{r4, pc}
 8006a04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006a0c:	e7f7      	b.n	80069fe <memmove+0x22>
	...

08006a10 <_free_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4605      	mov	r5, r0
 8006a14:	2900      	cmp	r1, #0
 8006a16:	d045      	beq.n	8006aa4 <_free_r+0x94>
 8006a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a1c:	1f0c      	subs	r4, r1, #4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	bfb8      	it	lt
 8006a22:	18e4      	addlt	r4, r4, r3
 8006a24:	f000 f8d2 	bl	8006bcc <__malloc_lock>
 8006a28:	4a1f      	ldr	r2, [pc, #124]	; (8006aa8 <_free_r+0x98>)
 8006a2a:	6813      	ldr	r3, [r2, #0]
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	b933      	cbnz	r3, 8006a3e <_free_r+0x2e>
 8006a30:	6063      	str	r3, [r4, #4]
 8006a32:	6014      	str	r4, [r2, #0]
 8006a34:	4628      	mov	r0, r5
 8006a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a3a:	f000 b8c8 	b.w	8006bce <__malloc_unlock>
 8006a3e:	42a3      	cmp	r3, r4
 8006a40:	d90c      	bls.n	8006a5c <_free_r+0x4c>
 8006a42:	6821      	ldr	r1, [r4, #0]
 8006a44:	1862      	adds	r2, r4, r1
 8006a46:	4293      	cmp	r3, r2
 8006a48:	bf04      	itt	eq
 8006a4a:	681a      	ldreq	r2, [r3, #0]
 8006a4c:	685b      	ldreq	r3, [r3, #4]
 8006a4e:	6063      	str	r3, [r4, #4]
 8006a50:	bf04      	itt	eq
 8006a52:	1852      	addeq	r2, r2, r1
 8006a54:	6022      	streq	r2, [r4, #0]
 8006a56:	6004      	str	r4, [r0, #0]
 8006a58:	e7ec      	b.n	8006a34 <_free_r+0x24>
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	b10a      	cbz	r2, 8006a64 <_free_r+0x54>
 8006a60:	42a2      	cmp	r2, r4
 8006a62:	d9fa      	bls.n	8006a5a <_free_r+0x4a>
 8006a64:	6819      	ldr	r1, [r3, #0]
 8006a66:	1858      	adds	r0, r3, r1
 8006a68:	42a0      	cmp	r0, r4
 8006a6a:	d10b      	bne.n	8006a84 <_free_r+0x74>
 8006a6c:	6820      	ldr	r0, [r4, #0]
 8006a6e:	4401      	add	r1, r0
 8006a70:	1858      	adds	r0, r3, r1
 8006a72:	4282      	cmp	r2, r0
 8006a74:	6019      	str	r1, [r3, #0]
 8006a76:	d1dd      	bne.n	8006a34 <_free_r+0x24>
 8006a78:	6810      	ldr	r0, [r2, #0]
 8006a7a:	6852      	ldr	r2, [r2, #4]
 8006a7c:	605a      	str	r2, [r3, #4]
 8006a7e:	4401      	add	r1, r0
 8006a80:	6019      	str	r1, [r3, #0]
 8006a82:	e7d7      	b.n	8006a34 <_free_r+0x24>
 8006a84:	d902      	bls.n	8006a8c <_free_r+0x7c>
 8006a86:	230c      	movs	r3, #12
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	e7d3      	b.n	8006a34 <_free_r+0x24>
 8006a8c:	6820      	ldr	r0, [r4, #0]
 8006a8e:	1821      	adds	r1, r4, r0
 8006a90:	428a      	cmp	r2, r1
 8006a92:	bf04      	itt	eq
 8006a94:	6811      	ldreq	r1, [r2, #0]
 8006a96:	6852      	ldreq	r2, [r2, #4]
 8006a98:	6062      	str	r2, [r4, #4]
 8006a9a:	bf04      	itt	eq
 8006a9c:	1809      	addeq	r1, r1, r0
 8006a9e:	6021      	streq	r1, [r4, #0]
 8006aa0:	605c      	str	r4, [r3, #4]
 8006aa2:	e7c7      	b.n	8006a34 <_free_r+0x24>
 8006aa4:	bd38      	pop	{r3, r4, r5, pc}
 8006aa6:	bf00      	nop
 8006aa8:	2000018c 	.word	0x2000018c

08006aac <_malloc_r>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	1ccd      	adds	r5, r1, #3
 8006ab0:	f025 0503 	bic.w	r5, r5, #3
 8006ab4:	3508      	adds	r5, #8
 8006ab6:	2d0c      	cmp	r5, #12
 8006ab8:	bf38      	it	cc
 8006aba:	250c      	movcc	r5, #12
 8006abc:	2d00      	cmp	r5, #0
 8006abe:	4606      	mov	r6, r0
 8006ac0:	db01      	blt.n	8006ac6 <_malloc_r+0x1a>
 8006ac2:	42a9      	cmp	r1, r5
 8006ac4:	d903      	bls.n	8006ace <_malloc_r+0x22>
 8006ac6:	230c      	movs	r3, #12
 8006ac8:	6033      	str	r3, [r6, #0]
 8006aca:	2000      	movs	r0, #0
 8006acc:	bd70      	pop	{r4, r5, r6, pc}
 8006ace:	f000 f87d 	bl	8006bcc <__malloc_lock>
 8006ad2:	4a21      	ldr	r2, [pc, #132]	; (8006b58 <_malloc_r+0xac>)
 8006ad4:	6814      	ldr	r4, [r2, #0]
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	b991      	cbnz	r1, 8006b00 <_malloc_r+0x54>
 8006ada:	4c20      	ldr	r4, [pc, #128]	; (8006b5c <_malloc_r+0xb0>)
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	b91b      	cbnz	r3, 8006ae8 <_malloc_r+0x3c>
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f000 f863 	bl	8006bac <_sbrk_r>
 8006ae6:	6020      	str	r0, [r4, #0]
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4630      	mov	r0, r6
 8006aec:	f000 f85e 	bl	8006bac <_sbrk_r>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	d124      	bne.n	8006b3e <_malloc_r+0x92>
 8006af4:	230c      	movs	r3, #12
 8006af6:	6033      	str	r3, [r6, #0]
 8006af8:	4630      	mov	r0, r6
 8006afa:	f000 f868 	bl	8006bce <__malloc_unlock>
 8006afe:	e7e4      	b.n	8006aca <_malloc_r+0x1e>
 8006b00:	680b      	ldr	r3, [r1, #0]
 8006b02:	1b5b      	subs	r3, r3, r5
 8006b04:	d418      	bmi.n	8006b38 <_malloc_r+0x8c>
 8006b06:	2b0b      	cmp	r3, #11
 8006b08:	d90f      	bls.n	8006b2a <_malloc_r+0x7e>
 8006b0a:	600b      	str	r3, [r1, #0]
 8006b0c:	50cd      	str	r5, [r1, r3]
 8006b0e:	18cc      	adds	r4, r1, r3
 8006b10:	4630      	mov	r0, r6
 8006b12:	f000 f85c 	bl	8006bce <__malloc_unlock>
 8006b16:	f104 000b 	add.w	r0, r4, #11
 8006b1a:	1d23      	adds	r3, r4, #4
 8006b1c:	f020 0007 	bic.w	r0, r0, #7
 8006b20:	1ac3      	subs	r3, r0, r3
 8006b22:	d0d3      	beq.n	8006acc <_malloc_r+0x20>
 8006b24:	425a      	negs	r2, r3
 8006b26:	50e2      	str	r2, [r4, r3]
 8006b28:	e7d0      	b.n	8006acc <_malloc_r+0x20>
 8006b2a:	428c      	cmp	r4, r1
 8006b2c:	684b      	ldr	r3, [r1, #4]
 8006b2e:	bf16      	itet	ne
 8006b30:	6063      	strne	r3, [r4, #4]
 8006b32:	6013      	streq	r3, [r2, #0]
 8006b34:	460c      	movne	r4, r1
 8006b36:	e7eb      	b.n	8006b10 <_malloc_r+0x64>
 8006b38:	460c      	mov	r4, r1
 8006b3a:	6849      	ldr	r1, [r1, #4]
 8006b3c:	e7cc      	b.n	8006ad8 <_malloc_r+0x2c>
 8006b3e:	1cc4      	adds	r4, r0, #3
 8006b40:	f024 0403 	bic.w	r4, r4, #3
 8006b44:	42a0      	cmp	r0, r4
 8006b46:	d005      	beq.n	8006b54 <_malloc_r+0xa8>
 8006b48:	1a21      	subs	r1, r4, r0
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f000 f82e 	bl	8006bac <_sbrk_r>
 8006b50:	3001      	adds	r0, #1
 8006b52:	d0cf      	beq.n	8006af4 <_malloc_r+0x48>
 8006b54:	6025      	str	r5, [r4, #0]
 8006b56:	e7db      	b.n	8006b10 <_malloc_r+0x64>
 8006b58:	2000018c 	.word	0x2000018c
 8006b5c:	20000190 	.word	0x20000190

08006b60 <_realloc_r>:
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	4607      	mov	r7, r0
 8006b64:	4614      	mov	r4, r2
 8006b66:	460e      	mov	r6, r1
 8006b68:	b921      	cbnz	r1, 8006b74 <_realloc_r+0x14>
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b70:	f7ff bf9c 	b.w	8006aac <_malloc_r>
 8006b74:	b922      	cbnz	r2, 8006b80 <_realloc_r+0x20>
 8006b76:	f7ff ff4b 	bl	8006a10 <_free_r>
 8006b7a:	4625      	mov	r5, r4
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b80:	f000 f826 	bl	8006bd0 <_malloc_usable_size_r>
 8006b84:	42a0      	cmp	r0, r4
 8006b86:	d20f      	bcs.n	8006ba8 <_realloc_r+0x48>
 8006b88:	4621      	mov	r1, r4
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	f7ff ff8e 	bl	8006aac <_malloc_r>
 8006b90:	4605      	mov	r5, r0
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d0f2      	beq.n	8006b7c <_realloc_r+0x1c>
 8006b96:	4631      	mov	r1, r6
 8006b98:	4622      	mov	r2, r4
 8006b9a:	f7ff fc11 	bl	80063c0 <memcpy>
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	f7ff ff35 	bl	8006a10 <_free_r>
 8006ba6:	e7e9      	b.n	8006b7c <_realloc_r+0x1c>
 8006ba8:	4635      	mov	r5, r6
 8006baa:	e7e7      	b.n	8006b7c <_realloc_r+0x1c>

08006bac <_sbrk_r>:
 8006bac:	b538      	push	{r3, r4, r5, lr}
 8006bae:	4c06      	ldr	r4, [pc, #24]	; (8006bc8 <_sbrk_r+0x1c>)
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	4608      	mov	r0, r1
 8006bb6:	6023      	str	r3, [r4, #0]
 8006bb8:	f7fa ff2c 	bl	8001a14 <_sbrk>
 8006bbc:	1c43      	adds	r3, r0, #1
 8006bbe:	d102      	bne.n	8006bc6 <_sbrk_r+0x1a>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	b103      	cbz	r3, 8006bc6 <_sbrk_r+0x1a>
 8006bc4:	602b      	str	r3, [r5, #0]
 8006bc6:	bd38      	pop	{r3, r4, r5, pc}
 8006bc8:	20000288 	.word	0x20000288

08006bcc <__malloc_lock>:
 8006bcc:	4770      	bx	lr

08006bce <__malloc_unlock>:
 8006bce:	4770      	bx	lr

08006bd0 <_malloc_usable_size_r>:
 8006bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd4:	1f18      	subs	r0, r3, #4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	bfbc      	itt	lt
 8006bda:	580b      	ldrlt	r3, [r1, r0]
 8006bdc:	18c0      	addlt	r0, r0, r3
 8006bde:	4770      	bx	lr

08006be0 <_init>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	bf00      	nop
 8006be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be6:	bc08      	pop	{r3}
 8006be8:	469e      	mov	lr, r3
 8006bea:	4770      	bx	lr

08006bec <_fini>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	bf00      	nop
 8006bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf2:	bc08      	pop	{r3}
 8006bf4:	469e      	mov	lr, r3
 8006bf6:	4770      	bx	lr
